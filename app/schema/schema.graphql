"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """Reads and enables pagination through a set of `Application`."""
  allApplications(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  allApplicationStatuses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition
  ): ApplicationStatusesConnection

  """Reads and enables pagination through a set of `Attachment`."""
  allAttachments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection

  """Reads and enables pagination through a set of `CcbcUser`."""
  allCcbcUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUsersConnection

  """Reads and enables pagination through a set of `Intake`."""
  allIntakes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition
  ): IntakesConnection
  applicationByRowId(rowId: Int!): Application
  applicationStatusByRowId(rowId: Int!): ApplicationStatus
  attachmentByRowId(rowId: Int!): Attachment
  ccbcUserByRowId(rowId: Int!): CcbcUser
  intakeByRowId(rowId: Int!): Intake
  intakeByCcbcIntakeNumber(ccbcIntakeNumber: Int!): Intake
  intakeByApplicationNumberSeqName(applicationNumberSeqName: String!): Intake

  """Returns the current open intake"""
  openIntake: Intake
  session: KeycloakJwt

  """Reads a single `Application` using its globally unique `ID`."""
  application(
    """
    The globally unique `ID` to be used in selecting a single `Application`.
    """
    id: ID!
  ): Application

  """Reads a single `ApplicationStatus` using its globally unique `ID`."""
  applicationStatus(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationStatus`.
    """
    id: ID!
  ): ApplicationStatus

  """Reads a single `Attachment` using its globally unique `ID`."""
  attachment(
    """
    The globally unique `ID` to be used in selecting a single `Attachment`.
    """
    id: ID!
  ): Attachment

  """Reads a single `CcbcUser` using its globally unique `ID`."""
  ccbcUser(
    """The globally unique `ID` to be used in selecting a single `CcbcUser`."""
    id: ID!
  ): CcbcUser

  """Reads a single `Intake` using its globally unique `ID`."""
  intake(
    """The globally unique `ID` to be used in selecting a single `Intake`."""
    id: ID!
  ): Intake
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""A connection to a list of `Application` values."""
type ApplicationsConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application` and cursor to aid in pagination.
  """
  edges: [ApplicationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
Table containing the data associated with the CCBC respondents application
"""
type Application implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Primary key ID for the application"""
  rowId: Int!

  """Reference number assigned to the application"""
  ccbcNumber: String

  """The owner of the application, identified by its JWT sub"""
  owner: String!

  """The data entered into the form by the respondent"""
  formData: JSON!

  """The status of the application, draft or complete"""
  status: String

  """Column saving the key of the last edited form page"""
  lastEditedPage: String

  """The intake associated with the application, set when it is submitted"""
  intakeId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `Intake` that is related to this `Application`."""
  intakeByIntakeId: Intake

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!
  projectName: String
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
Table containing intake numbers and their respective open and closing dates
"""
type Intake implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for each intake number"""
  rowId: Int!

  """Open date and time for an intake number"""
  openTimestamp: Datetime!

  """Close date and time for an intake number"""
  closeTimestamp: Datetime!

  """Unique intake number for a set of CCBC IDs"""
  ccbcIntakeNumber: Int!

  """
  The name of the sequence used to generate CCBC ids. It is added via a trigger
  """
  applicationNumberSeqName: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads and enables pagination through a set of `Application`."""
  applicationsByIntakeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection!
}

"""
Table containing information about the application's users, this is business contact information not personally identifiable information
"""
type CcbcUser implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the user"""
  rowId: Int!

  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  sessionSub: String

  """User's first name"""
  givenName: String

  """User's last name"""
  familyName: String

  """User's email address"""
  emailAddress: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUsersConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUsersConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUsersConnection!

  """Reads and enables pagination through a set of `Intake`."""
  intakesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition
  ): IntakesConnection!

  """Reads and enables pagination through a set of `Intake`."""
  intakesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition
  ): IntakesConnection!

  """Reads and enables pagination through a set of `Intake`."""
  intakesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition
  ): IntakesConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection!

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition
  ): ApplicationStatusesConnection!

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition
  ): ApplicationStatusesConnection!

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition
  ): ApplicationStatusesConnection!

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!
}

"""A connection to a list of `CcbcUser` values."""
type CcbcUsersConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser` and cursor to aid in pagination.
  """
  edges: [CcbcUsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection."""
type CcbcUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `CcbcUser`."""
enum CcbcUsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SESSION_SUB_ASC
  SESSION_SUB_DESC
  GIVEN_NAME_ASC
  GIVEN_NAME_DESC
  FAMILY_NAME_ASC
  FAMILY_NAME_DESC
  EMAIL_ADDRESS_ASC
  EMAIL_ADDRESS_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CcbcUser` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CcbcUserCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `sessionSub` field."""
  sessionSub: String

  """Checks for equality with the object’s `givenName` field."""
  givenName: String

  """Checks for equality with the object’s `familyName` field."""
  familyName: String

  """Checks for equality with the object’s `emailAddress` field."""
  emailAddress: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A connection to a list of `Intake` values."""
type IntakesConnection {
  """A list of `Intake` objects."""
  nodes: [Intake]!

  """
  A list of edges which contains the `Intake` and cursor to aid in pagination.
  """
  edges: [IntakesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Intake` you could get from the connection."""
  totalCount: Int!
}

"""A `Intake` edge in the connection."""
type IntakesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Intake` at the end of the edge."""
  node: Intake
}

"""Methods to use when ordering `Intake`."""
enum IntakesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  OPEN_TIMESTAMP_ASC
  OPEN_TIMESTAMP_DESC
  CLOSE_TIMESTAMP_ASC
  CLOSE_TIMESTAMP_DESC
  CCBC_INTAKE_NUMBER_ASC
  CCBC_INTAKE_NUMBER_DESC
  APPLICATION_NUMBER_SEQ_NAME_ASC
  APPLICATION_NUMBER_SEQ_NAME_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Intake` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input IntakeCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `openTimestamp` field."""
  openTimestamp: Datetime

  """Checks for equality with the object’s `closeTimestamp` field."""
  closeTimestamp: Datetime

  """Checks for equality with the object’s `ccbcIntakeNumber` field."""
  ccbcIntakeNumber: Int

  """
  Checks for equality with the object’s `applicationNumberSeqName` field.
  """
  applicationNumberSeqName: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""Methods to use when ordering `Application`."""
enum ApplicationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CCBC_NUMBER_ASC
  CCBC_NUMBER_DESC
  OWNER_ASC
  OWNER_DESC
  FORM_DATA_ASC
  FORM_DATA_DESC
  STATUS_ASC
  STATUS_DESC
  LAST_EDITED_PAGE_ASC
  LAST_EDITED_PAGE_DESC
  INTAKE_ID_ASC
  INTAKE_ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Application` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ApplicationCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `ccbcNumber` field."""
  ccbcNumber: String

  """Checks for equality with the object’s `owner` field."""
  owner: String

  """Checks for equality with the object’s `formData` field."""
  formData: JSON

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `lastEditedPage` field."""
  lastEditedPage: String

  """Checks for equality with the object’s `intakeId` field."""
  intakeId: Int

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A connection to a list of `ApplicationStatus` values."""
type ApplicationStatusesConnection {
  """A list of `ApplicationStatus` objects."""
  nodes: [ApplicationStatus]!

  """
  A list of edges which contains the `ApplicationStatus` and cursor to aid in pagination.
  """
  edges: [ApplicationStatusesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""Table containing information about possible application statuses"""
type ApplicationStatus implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the application_status"""
  rowId: Int!

  """Name of the application_status"""
  name: String!

  """Description of the application_status"""
  description: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByApplicationStatusId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!
}

"""A connection to a list of `Attachment` values."""
type AttachmentsConnection {
  """A list of `Attachment` objects."""
  nodes: [Attachment]!

  """
  A list of edges which contains the `Attachment` and cursor to aid in pagination.
  """
  edges: [AttachmentsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Attachment` you could get from the connection."""
  totalCount: Int!
}

"""Table containing information about uploaded attachments"""
type Attachment implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the attachment"""
  rowId: Int!

  """
  Universally Unique ID for the attachment, created by the fastapi storage micro-service
  """
  file: UUID

  """Description of the attachment"""
  description: String

  """Original uploaded file name"""
  fileName: String

  """Original uploaded file type"""
  fileType: String

  """Original uploaded file size"""
  fileSize: String

  """
  The id of the project (ccbc_public.application.id) that the attachment was uploaded to
  """
  applicationId: Int!

  """
  The id of the application_status (ccbc_public.application_status.id) that the attachment references
  """
  applicationStatusId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `Application` that is related to this `Attachment`."""
  applicationByApplicationId: Application

  """
  Reads a single `ApplicationStatus` that is related to this `Attachment`.
  """
  applicationStatusByApplicationStatusId: ApplicationStatus

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByArchivedBy: CcbcUser
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""A `Attachment` edge in the connection."""
type AttachmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Attachment` at the end of the edge."""
  node: Attachment
}

"""Methods to use when ordering `Attachment`."""
enum AttachmentsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FILE_ASC
  FILE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  FILE_NAME_ASC
  FILE_NAME_DESC
  FILE_TYPE_ASC
  FILE_TYPE_DESC
  FILE_SIZE_ASC
  FILE_SIZE_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  APPLICATION_STATUS_ID_ASC
  APPLICATION_STATUS_ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Attachment` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AttachmentCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `file` field."""
  file: UUID

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `fileName` field."""
  fileName: String

  """Checks for equality with the object’s `fileType` field."""
  fileType: String

  """Checks for equality with the object’s `fileSize` field."""
  fileSize: String

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `applicationStatusId` field."""
  applicationStatusId: Int

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A `ApplicationStatus` edge in the connection."""
type ApplicationStatusesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationStatus` at the end of the edge."""
  node: ApplicationStatus
}

"""Methods to use when ordering `ApplicationStatus`."""
enum ApplicationStatusesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ApplicationStatus` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ApplicationStatusCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A `Application` edge in the connection."""
type ApplicationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application
}

type KeycloakJwt {
  """
  OPTIONAL - The "jti" (JWT ID) claim provides a unique identifier for the JWT.
     The identifier value MUST be assigned in a manner that ensures that
     there is a negligible probability that the same value will be
     accidentally assigned to a different data object; if the application
     uses multiple issuers, collisions MUST be prevented among values
     produced by different issuers as well.  The "jti" claim can be used
     to prevent the JWT from being replayed.  The "jti" value is a case-
     sensitive string.
  """
  jti: UUID

  """
  REQUIRED - The "exp" (expiration time) claim identifies the expiration time on
     or after which the JWT MUST NOT be accepted for processing.  The
     processing of the "exp" claim requires that the current date/time
     MUST be before the expiration date/time listed in the "exp" claim.
  """
  exp: Int

  """
  OPTIONAL - The "nbf" (not before) claim identifies the time before which the JWT
     MUST NOT be accepted for processing.  The processing of the "nbf"
     claim requires that the current date/time MUST be after or equal to
     the not-before date/time listed in the "nbf" claim.  Implementers MAY
     provide for some small leeway, usually no more than a few minutes, to
     account for clock skew.  Its value MUST be a number containing a
     NumericDate value.
  """
  nbf: Int

  """
  REQUIRED - The "iat" (issued at) claim identifies the time at which the JWT was
     issued.  This claim can be used to determine the age of the JWT.  Its
     value MUST be a number containing a NumericDate value.
  """
  iat: Int

  """
  REQUIRED - The "iss" (issuer) claim identifies the principal that issued the
     JWT.  The processing of this claim is generally application specific.
     The "iss" value is a case-sensitive string containing a StringOrURI
     value.
  """
  iss: String

  """
  REQUIRED - The "aud" (audience) claim identifies the recipients that the JWT is
     intended for.  Each principal intended to process the JWT MUST
     identify itself with a value in the audience claim.  If the principal
     processing the claim does not identify itself with a value in the
     "aud" claim when this claim is present, then the JWT MUST be
     rejected.  In the general case, the "aud" value is an array of case-
     sensitive strings, each containing a StringOrURI value.  In the
     special case when the JWT has one audience, the "aud" value MAY be a
     single case-sensitive string containing a StringOrURI value.  The
     interpretation of audience values is generally application specific.
  """
  aud: String

  """
  REQUIRED - The "sub" (subject) claim identifies the principal that is the
     subject of the JWT.  The claims in a JWT are normally statements
     about the subject.  The subject value MUST either be scoped to be
     locally unique in the context of the issuer or be globally unique.
     The processing of this claim is generally application specific.  The
     "sub" value is a case-sensitive string containing a StringOrURI
     value.
  """
  sub: String

  """
  OPTIONAL - The "typ" (type) Header Parameter defined by [JWS] and [JWE] is used
     by JWT applications to declare the media type [IANA.MediaTypes] of
     this complete JWT.  This is intended for use by the JWT application
     when values that are not JWTs could also be present in an application
     data structure that can contain a JWT object; the application can use
     this value to disambiguate among the different kinds of objects that
     might be present.  It will typically not be used by applications when
     it is already known that the object is a JWT.  This parameter is
     ignored by JWT implementations; any processing of this parameter is
     performed by the JWT application.  If present, it is RECOMMENDED that
     its value be "JWT" to indicate that this object is a JWT.  While
     media type names are not case sensitive, it is RECOMMENDED that "JWT"
     always be spelled using uppercase characters for compatibility with
     legacy implementations.
  """
  typ: String

  """
  OPTIONAL - Authorized party - the party to which the ID Token was issued. If 
    present, it MUST contain the OAuth 2.0 Client ID of this party. This 
    Claim is only needed when the ID Token has a single audience value and 
    that audience is different than the authorized party. It MAY be included 
    even when the authorized party is the same as the sole audience. The azp
    value is a case sensitive string containing a StringOrURI value.
  """
  azp: String

  """
  Time when the End-User authentication occurred. Its value is a JSON number
     representing the number of seconds from 1970-01-01T0:0:0Z as measured 
     in UTC until the date/time. When a max_age request is made or when auth_time 
     is requested as an Essential Claim, then this Claim is REQUIRED; otherwise, 
     its inclusion is OPTIONAL
  """
  authTime: Int

  """
  Session State. JSON string that represents the End-Users login state at the OP. 
    It MUST NOT contain the space (" ") character. This value is opaque to the RP. 
    This is REQUIRED if session management is supported. The Session State value is 
    initially calculated on the server. The same Session State value is also 
    recalculated by the OP iframe in the browser client. The generation of suitable 
    Session State values is specified in Section 4.2, and is based on a salted 
    cryptographic hash of Client ID, origin URL, and OP browser state. For the origin 
    URL, the server can use the origin URL of the Authentication Response, following 
    the algorithm specified in Section 4 of RFC 6454 [RFC6454].
  """
  sessionState: UUID

  """
  OPTIONAL - Authentication Context Class Reference. String specifying an 
    Authentication Context Class Reference value that identifies the Authentication 
    Context Class that the authentication performed satisfied. The value "0" 
    indicates the End-User authentication did not meet the requirements of ISO/IEC 29115 
    [ISO29115] level 1. Authentication using a long-lived browser cookie, for instance, 
    is one example where the use of "level 0" is appropriate. Authentications with 
    level 0 SHOULD NOT be used to authorize access to any resource of any monetary 
    value. (This corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] nist_auth_level 0.) 
    An absolute URI or an RFC 6711 [RFC6711] registered name SHOULD be used as the acr 
    value; registered names MUST NOT be used with a different meaning than that which 
    is registered. Parties using this claim will need to agree upon the meanings of 
    the values used, which may be context-specific. The acr value is a case sensitive 
    string.
  """
  acr: String

  """Whether or not a users email is verified with the login provider."""
  emailVerified: Boolean

  """
  Users full name by combining given_name and family_name set and returned by login provider.
  """
  name: String

  """
  Username as set and returned by provider including provider name separated by @. eg. username@github
  """
  preferredUsername: String

  """First name as set and returned by login provider."""
  givenName: String

  """Last name as set and returned by login provider."""
  familyName: String

  """Email address as set and returned by login provider."""
  email: String

  """
  If created via a broker external login, this is an identifier that can be used to 
    match external broker backchannel logout requests to a UserSession
  """
  brokerSessionId: String
  priorityGroup: String

  """Name of the identity provider."""
  identityProvider: String
  userGroups: [String]

  """Reads a single `CcbcUser` that is related to this `KeycloakJwt`."""
  ccbcUserBySub: CcbcUser
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Application`."""
  createApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationInput!
  ): CreateApplicationPayload

  """Creates a single `ApplicationStatus`."""
  createApplicationStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationStatusInput!
  ): CreateApplicationStatusPayload

  """Creates a single `Attachment`."""
  createAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAttachmentInput!
  ): CreateAttachmentPayload

  """Creates a single `CcbcUser`."""
  createCcbcUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCcbcUserInput!
  ): CreateCcbcUserPayload

  """Creates a single `Intake`."""
  createIntake(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateIntakeInput!
  ): CreateIntakePayload

  """
  Updates a single `Application` using its globally unique id and a patch.
  """
  updateApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationInput!
  ): UpdateApplicationPayload

  """Updates a single `Application` using a unique key and a patch."""
  updateApplicationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationByRowIdInput!
  ): UpdateApplicationPayload

  """
  Updates a single `ApplicationStatus` using its globally unique id and a patch.
  """
  updateApplicationStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationStatusInput!
  ): UpdateApplicationStatusPayload

  """Updates a single `ApplicationStatus` using a unique key and a patch."""
  updateApplicationStatusByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationStatusByRowIdInput!
  ): UpdateApplicationStatusPayload

  """
  Updates a single `Attachment` using its globally unique id and a patch.
  """
  updateAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAttachmentInput!
  ): UpdateAttachmentPayload

  """Updates a single `Attachment` using a unique key and a patch."""
  updateAttachmentByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAttachmentByRowIdInput!
  ): UpdateAttachmentPayload

  """Updates a single `CcbcUser` using its globally unique id and a patch."""
  updateCcbcUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCcbcUserInput!
  ): UpdateCcbcUserPayload

  """Updates a single `CcbcUser` using a unique key and a patch."""
  updateCcbcUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCcbcUserByRowIdInput!
  ): UpdateCcbcUserPayload

  """Updates a single `Intake` using its globally unique id and a patch."""
  updateIntake(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIntakeInput!
  ): UpdateIntakePayload

  """Updates a single `Intake` using a unique key and a patch."""
  updateIntakeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIntakeByRowIdInput!
  ): UpdateIntakePayload

  """Updates a single `Intake` using a unique key and a patch."""
  updateIntakeByCcbcIntakeNumber(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIntakeByCcbcIntakeNumberInput!
  ): UpdateIntakePayload

  """Updates a single `Intake` using a unique key and a patch."""
  updateIntakeByApplicationNumberSeqName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIntakeByApplicationNumberSeqNameInput!
  ): UpdateIntakePayload

  """Deletes a single `Application` using its globally unique id."""
  deleteApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationInput!
  ): DeleteApplicationPayload

  """Deletes a single `Application` using a unique key."""
  deleteApplicationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationByRowIdInput!
  ): DeleteApplicationPayload

  """Deletes a single `ApplicationStatus` using its globally unique id."""
  deleteApplicationStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationStatusInput!
  ): DeleteApplicationStatusPayload

  """Deletes a single `ApplicationStatus` using a unique key."""
  deleteApplicationStatusByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationStatusByRowIdInput!
  ): DeleteApplicationStatusPayload

  """Deletes a single `Attachment` using its globally unique id."""
  deleteAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAttachmentInput!
  ): DeleteAttachmentPayload

  """Deletes a single `Attachment` using a unique key."""
  deleteAttachmentByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAttachmentByRowIdInput!
  ): DeleteAttachmentPayload

  """Deletes a single `CcbcUser` using its globally unique id."""
  deleteCcbcUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCcbcUserInput!
  ): DeleteCcbcUserPayload

  """Deletes a single `CcbcUser` using a unique key."""
  deleteCcbcUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCcbcUserByRowIdInput!
  ): DeleteCcbcUserPayload

  """Deletes a single `Intake` using its globally unique id."""
  deleteIntake(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteIntakeInput!
  ): DeleteIntakePayload

  """Deletes a single `Intake` using a unique key."""
  deleteIntakeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteIntakeByRowIdInput!
  ): DeleteIntakePayload

  """Deletes a single `Intake` using a unique key."""
  deleteIntakeByCcbcIntakeNumber(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteIntakeByCcbcIntakeNumberInput!
  ): DeleteIntakePayload

  """Deletes a single `Intake` using a unique key."""
  deleteIntakeByApplicationNumberSeqName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteIntakeByApplicationNumberSeqNameInput!
  ): DeleteIntakePayload
  createUserFromSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserFromSessionInput!
  ): CreateUserFromSessionPayload
  submitApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SubmitApplicationInput!
  ): SubmitApplicationPayload
}

"""The output of our create `Application` mutation."""
type CreateApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Application` that was created by this mutation."""
  application: Application

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Intake` that is related to this `Application`."""
  intakeByIntakeId: Intake

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge
}

"""All input for the create `Application` mutation."""
input CreateApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Application` to be created by this mutation."""
  application: ApplicationInput!
}

"""An input for mutations affecting `Application`"""
input ApplicationInput {
  """Reference number assigned to the application"""
  ccbcNumber: String

  """The owner of the application, identified by its JWT sub"""
  owner: String!

  """The data entered into the form by the respondent"""
  formData: JSON

  """The status of the application, draft or complete"""
  status: String

  """Column saving the key of the last edited form page"""
  lastEditedPage: String

  """The intake associated with the application, set when it is submitted"""
  intakeId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `ApplicationStatus` mutation."""
type CreateApplicationStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationStatus` that was created by this mutation."""
  applicationStatus: ApplicationStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationStatus`. May be used by Relay 1."""
  applicationStatusEdge(
    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusesEdge
}

"""All input for the create `ApplicationStatus` mutation."""
input CreateApplicationStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ApplicationStatus` to be created by this mutation."""
  applicationStatus: ApplicationStatusInput!
}

"""An input for mutations affecting `ApplicationStatus`"""
input ApplicationStatusInput {
  """Name of the application_status"""
  name: String!

  """Description of the application_status"""
  description: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `Attachment` mutation."""
type CreateAttachmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Attachment` that was created by this mutation."""
  attachment: Attachment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Application` that is related to this `Attachment`."""
  applicationByApplicationId: Application

  """
  Reads a single `ApplicationStatus` that is related to this `Attachment`.
  """
  applicationStatusByApplicationStatusId: ApplicationStatus

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Attachment`. May be used by Relay 1."""
  attachmentEdge(
    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsEdge
}

"""All input for the create `Attachment` mutation."""
input CreateAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Attachment` to be created by this mutation."""
  attachment: AttachmentInput!
}

"""An input for mutations affecting `Attachment`"""
input AttachmentInput {
  """
  Universally Unique ID for the attachment, created by the fastapi storage micro-service
  """
  file: Upload

  """Description of the attachment"""
  description: String

  """Original uploaded file name"""
  fileName: String

  """Original uploaded file type"""
  fileType: String

  """Original uploaded file size"""
  fileSize: String

  """
  The id of the project (ccbc_public.application.id) that the attachment was uploaded to
  """
  applicationId: Int!

  """
  The id of the application_status (ccbc_public.application_status.id) that the attachment references
  """
  applicationStatusId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"""The output of our create `CcbcUser` mutation."""
type CreateCcbcUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CcbcUser` that was created by this mutation."""
  ccbcUser: CcbcUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `CcbcUser`. May be used by Relay 1."""
  ccbcUserEdge(
    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CcbcUsersEdge
}

"""All input for the create `CcbcUser` mutation."""
input CreateCcbcUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CcbcUser` to be created by this mutation."""
  ccbcUser: CcbcUserInput!
}

"""An input for mutations affecting `CcbcUser`"""
input CcbcUserInput {
  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  sessionSub: String

  """User's first name"""
  givenName: String

  """User's last name"""
  familyName: String

  """User's email address"""
  emailAddress: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `Intake` mutation."""
type CreateIntakePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Intake` that was created by this mutation."""
  intake: Intake

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Intake`. May be used by Relay 1."""
  intakeEdge(
    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]
  ): IntakesEdge
}

"""All input for the create `Intake` mutation."""
input CreateIntakeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Intake` to be created by this mutation."""
  intake: IntakeInput!
}

"""An input for mutations affecting `Intake`"""
input IntakeInput {
  """Open date and time for an intake number"""
  openTimestamp: Datetime!

  """Close date and time for an intake number"""
  closeTimestamp: Datetime!

  """Unique intake number for a set of CCBC IDs"""
  ccbcIntakeNumber: Int!

  """
  The name of the sequence used to generate CCBC ids. It is added via a trigger
  """
  applicationNumberSeqName: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our update `Application` mutation."""
type UpdateApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Application` that was updated by this mutation."""
  application: Application

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Intake` that is related to this `Application`."""
  intakeByIntakeId: Intake

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge
}

"""All input for the `updateApplication` mutation."""
input UpdateApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Application` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Application` being updated.
  """
  applicationPatch: ApplicationPatch!
}

"""
Represents an update to a `Application`. Fields that are set will be updated.
"""
input ApplicationPatch {
  """Reference number assigned to the application"""
  ccbcNumber: String

  """The owner of the application, identified by its JWT sub"""
  owner: String

  """The data entered into the form by the respondent"""
  formData: JSON

  """The status of the application, draft or complete"""
  status: String

  """Column saving the key of the last edited form page"""
  lastEditedPage: String

  """The intake associated with the application, set when it is submitted"""
  intakeId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateApplicationByRowId` mutation."""
input UpdateApplicationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Application` being updated.
  """
  applicationPatch: ApplicationPatch!

  """Primary key ID for the application"""
  rowId: Int!
}

"""The output of our update `ApplicationStatus` mutation."""
type UpdateApplicationStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationStatus` that was updated by this mutation."""
  applicationStatus: ApplicationStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationStatus`. May be used by Relay 1."""
  applicationStatusEdge(
    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusesEdge
}

"""All input for the `updateApplicationStatus` mutation."""
input UpdateApplicationStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationStatus` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationStatus` being updated.
  """
  applicationStatusPatch: ApplicationStatusPatch!
}

"""
Represents an update to a `ApplicationStatus`. Fields that are set will be updated.
"""
input ApplicationStatusPatch {
  """Name of the application_status"""
  name: String

  """Description of the application_status"""
  description: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateApplicationStatusByRowId` mutation."""
input UpdateApplicationStatusByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationStatus` being updated.
  """
  applicationStatusPatch: ApplicationStatusPatch!

  """Unique ID for the application_status"""
  rowId: Int!
}

"""The output of our update `Attachment` mutation."""
type UpdateAttachmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Attachment` that was updated by this mutation."""
  attachment: Attachment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Application` that is related to this `Attachment`."""
  applicationByApplicationId: Application

  """
  Reads a single `ApplicationStatus` that is related to this `Attachment`.
  """
  applicationStatusByApplicationStatusId: ApplicationStatus

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Attachment`. May be used by Relay 1."""
  attachmentEdge(
    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsEdge
}

"""All input for the `updateAttachment` mutation."""
input UpdateAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Attachment` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Attachment` being updated.
  """
  attachmentPatch: AttachmentPatch!
}

"""
Represents an update to a `Attachment`. Fields that are set will be updated.
"""
input AttachmentPatch {
  """
  Universally Unique ID for the attachment, created by the fastapi storage micro-service
  """
  file: Upload

  """Description of the attachment"""
  description: String

  """Original uploaded file name"""
  fileName: String

  """Original uploaded file type"""
  fileType: String

  """Original uploaded file size"""
  fileSize: String

  """
  The id of the project (ccbc_public.application.id) that the attachment was uploaded to
  """
  applicationId: Int

  """
  The id of the application_status (ccbc_public.application_status.id) that the attachment references
  """
  applicationStatusId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateAttachmentByRowId` mutation."""
input UpdateAttachmentByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Attachment` being updated.
  """
  attachmentPatch: AttachmentPatch!

  """Unique ID for the attachment"""
  rowId: Int!
}

"""The output of our update `CcbcUser` mutation."""
type UpdateCcbcUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CcbcUser` that was updated by this mutation."""
  ccbcUser: CcbcUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `CcbcUser`. May be used by Relay 1."""
  ccbcUserEdge(
    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CcbcUsersEdge
}

"""All input for the `updateCcbcUser` mutation."""
input UpdateCcbcUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CcbcUser` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `CcbcUser` being updated.
  """
  ccbcUserPatch: CcbcUserPatch!
}

"""
Represents an update to a `CcbcUser`. Fields that are set will be updated.
"""
input CcbcUserPatch {
  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  sessionSub: String

  """User's first name"""
  givenName: String

  """User's last name"""
  familyName: String

  """User's email address"""
  emailAddress: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateCcbcUserByRowId` mutation."""
input UpdateCcbcUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CcbcUser` being updated.
  """
  ccbcUserPatch: CcbcUserPatch!

  """Unique ID for the user"""
  rowId: Int!
}

"""The output of our update `Intake` mutation."""
type UpdateIntakePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Intake` that was updated by this mutation."""
  intake: Intake

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Intake`. May be used by Relay 1."""
  intakeEdge(
    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]
  ): IntakesEdge
}

"""All input for the `updateIntake` mutation."""
input UpdateIntakeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Intake` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Intake` being updated.
  """
  intakePatch: IntakePatch!
}

"""
Represents an update to a `Intake`. Fields that are set will be updated.
"""
input IntakePatch {
  """Open date and time for an intake number"""
  openTimestamp: Datetime

  """Close date and time for an intake number"""
  closeTimestamp: Datetime

  """Unique intake number for a set of CCBC IDs"""
  ccbcIntakeNumber: Int

  """
  The name of the sequence used to generate CCBC ids. It is added via a trigger
  """
  applicationNumberSeqName: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateIntakeByRowId` mutation."""
input UpdateIntakeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Intake` being updated.
  """
  intakePatch: IntakePatch!

  """Unique ID for each intake number"""
  rowId: Int!
}

"""All input for the `updateIntakeByCcbcIntakeNumber` mutation."""
input UpdateIntakeByCcbcIntakeNumberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Intake` being updated.
  """
  intakePatch: IntakePatch!

  """Unique intake number for a set of CCBC IDs"""
  ccbcIntakeNumber: Int!
}

"""All input for the `updateIntakeByApplicationNumberSeqName` mutation."""
input UpdateIntakeByApplicationNumberSeqNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Intake` being updated.
  """
  intakePatch: IntakePatch!

  """
  The name of the sequence used to generate CCBC ids. It is added via a trigger
  """
  applicationNumberSeqName: String!
}

"""The output of our delete `Application` mutation."""
type DeleteApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Application` that was deleted by this mutation."""
  application: Application
  deletedApplicationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Intake` that is related to this `Application`."""
  intakeByIntakeId: Intake

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge
}

"""All input for the `deleteApplication` mutation."""
input DeleteApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Application` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteApplicationByRowId` mutation."""
input DeleteApplicationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Primary key ID for the application"""
  rowId: Int!
}

"""The output of our delete `ApplicationStatus` mutation."""
type DeleteApplicationStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationStatus` that was deleted by this mutation."""
  applicationStatus: ApplicationStatus
  deletedApplicationStatusId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationStatus`. May be used by Relay 1."""
  applicationStatusEdge(
    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusesEdge
}

"""All input for the `deleteApplicationStatus` mutation."""
input DeleteApplicationStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationStatus` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteApplicationStatusByRowId` mutation."""
input DeleteApplicationStatusByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the application_status"""
  rowId: Int!
}

"""The output of our delete `Attachment` mutation."""
type DeleteAttachmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Attachment` that was deleted by this mutation."""
  attachment: Attachment
  deletedAttachmentId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Application` that is related to this `Attachment`."""
  applicationByApplicationId: Application

  """
  Reads a single `ApplicationStatus` that is related to this `Attachment`.
  """
  applicationStatusByApplicationStatusId: ApplicationStatus

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Attachment`. May be used by Relay 1."""
  attachmentEdge(
    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsEdge
}

"""All input for the `deleteAttachment` mutation."""
input DeleteAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Attachment` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteAttachmentByRowId` mutation."""
input DeleteAttachmentByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the attachment"""
  rowId: Int!
}

"""The output of our delete `CcbcUser` mutation."""
type DeleteCcbcUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CcbcUser` that was deleted by this mutation."""
  ccbcUser: CcbcUser
  deletedCcbcUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `CcbcUser`. May be used by Relay 1."""
  ccbcUserEdge(
    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CcbcUsersEdge
}

"""All input for the `deleteCcbcUser` mutation."""
input DeleteCcbcUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CcbcUser` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteCcbcUserByRowId` mutation."""
input DeleteCcbcUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the user"""
  rowId: Int!
}

"""The output of our delete `Intake` mutation."""
type DeleteIntakePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Intake` that was deleted by this mutation."""
  intake: Intake
  deletedIntakeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Intake`. May be used by Relay 1."""
  intakeEdge(
    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]
  ): IntakesEdge
}

"""All input for the `deleteIntake` mutation."""
input DeleteIntakeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Intake` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteIntakeByRowId` mutation."""
input DeleteIntakeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for each intake number"""
  rowId: Int!
}

"""All input for the `deleteIntakeByCcbcIntakeNumber` mutation."""
input DeleteIntakeByCcbcIntakeNumberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique intake number for a set of CCBC IDs"""
  ccbcIntakeNumber: Int!
}

"""All input for the `deleteIntakeByApplicationNumberSeqName` mutation."""
input DeleteIntakeByApplicationNumberSeqNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The name of the sequence used to generate CCBC ids. It is added via a trigger
  """
  applicationNumberSeqName: String!
}

"""The output of our `createUserFromSession` mutation."""
type CreateUserFromSessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  ccbcUser: CcbcUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `CcbcUser`. May be used by Relay 1."""
  ccbcUserEdge(
    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CcbcUsersEdge
}

"""All input for the `createUserFromSession` mutation."""
input CreateUserFromSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `submitApplication` mutation."""
type SubmitApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  application: Application

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Intake` that is related to this `Application`."""
  intakeByIntakeId: Intake

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge
}

"""All input for the `submitApplication` mutation."""
input SubmitApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  applicationRowId: Int!
}
