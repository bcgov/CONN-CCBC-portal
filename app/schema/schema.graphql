"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """Reads and enables pagination through a set of `Analyst`."""
  allAnalysts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnalystFilter
  ): AnalystsConnection

  """Reads and enables pagination through a set of `Announcement`."""
  allAnnouncements(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Announcement`."""
    orderBy: [AnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnnouncementFilter
  ): AnnouncementsConnection

  """Reads and enables pagination through a set of `Application`."""
  allApplications(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): ApplicationsConnection

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  allApplicationAnalystLeads(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnalystLeadFilter
  ): ApplicationAnalystLeadsConnection

  """Reads and enables pagination through a set of `ApplicationAnnounced`."""
  allApplicationAnnounceds(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnounced`."""
    orderBy: [ApplicationAnnouncedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncedCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncedFilter
  ): ApplicationAnnouncedsConnection

  """
  Reads and enables pagination through a set of `ApplicationAnnouncement`.
  """
  allApplicationAnnouncements(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncementFilter
  ): ApplicationAnnouncementsConnection

  """Reads and enables pagination through a set of `ApplicationClaimsData`."""
  allApplicationClaimsData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsData`."""
    orderBy: [ApplicationClaimsDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsDataFilter
  ): ApplicationClaimsDataConnection

  """
  Reads and enables pagination through a set of `ApplicationClaimsExcelData`.
  """
  allApplicationClaimsExcelData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsExcelData`."""
    orderBy: [ApplicationClaimsExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsExcelDataFilter
  ): ApplicationClaimsExcelDataConnection

  """
  Reads and enables pagination through a set of `ApplicationCommunityProgressReportData`.
  """
  allApplicationCommunityProgressReportData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    The method to use when ordering `ApplicationCommunityProgressReportData`.
    """
    orderBy: [ApplicationCommunityProgressReportDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityProgressReportDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityProgressReportDataFilter
  ): ApplicationCommunityProgressReportDataConnection

  """
  Reads and enables pagination through a set of `ApplicationCommunityReportExcelData`.
  """
  allApplicationCommunityReportExcelData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationCommunityReportExcelData`."""
    orderBy: [ApplicationCommunityReportExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityReportExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityReportExcelDataFilter
  ): ApplicationCommunityReportExcelDataConnection

  """Reads and enables pagination through a set of `ApplicationFormData`."""
  allApplicationFormData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationFormData`."""
    orderBy: [ApplicationFormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationFormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFormDataFilter
  ): ApplicationFormDataConnection

  """
  Reads and enables pagination through a set of `ApplicationGisAssessmentHh`.
  """
  allApplicationGisAssessmentHhs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisAssessmentHh`."""
    orderBy: [ApplicationGisAssessmentHhsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisAssessmentHhCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisAssessmentHhFilter
  ): ApplicationGisAssessmentHhsConnection

  """Reads and enables pagination through a set of `ApplicationGisData`."""
  allApplicationGisData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisDataFilter
  ): ApplicationGisDataConnection

  """
  Reads and enables pagination through a set of `ApplicationInternalDescription`.
  """
  allApplicationInternalDescriptions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationInternalDescription`."""
    orderBy: [ApplicationInternalDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationInternalDescriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationInternalDescriptionFilter
  ): ApplicationInternalDescriptionsConnection

  """
  Reads and enables pagination through a set of `ApplicationMilestoneData`.
  """
  allApplicationMilestoneData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneData`."""
    orderBy: [ApplicationMilestoneDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneDataFilter
  ): ApplicationMilestoneDataConnection

  """
  Reads and enables pagination through a set of `ApplicationMilestoneExcelData`.
  """
  allApplicationMilestoneExcelData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneExcelData`."""
    orderBy: [ApplicationMilestoneExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneExcelDataFilter
  ): ApplicationMilestoneExcelDataConnection

  """Reads and enables pagination through a set of `ApplicationPackage`."""
  allApplicationPackages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPackage`."""
    orderBy: [ApplicationPackagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPackageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPackageFilter
  ): ApplicationPackagesConnection

  """
  Reads and enables pagination through a set of `ApplicationPendingChangeRequest`.
  """
  allApplicationPendingChangeRequests(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPendingChangeRequest`."""
    orderBy: [ApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPendingChangeRequestFilter
  ): ApplicationPendingChangeRequestsConnection

  """
  Reads and enables pagination through a set of `ApplicationProjectType`.
  """
  allApplicationProjectTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationProjectType`."""
    orderBy: [ApplicationProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationProjectTypeFilter
  ): ApplicationProjectTypesConnection

  """Reads and enables pagination through a set of `ApplicationRfiData`."""
  allApplicationRfiData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationRfiData`."""
    orderBy: [ApplicationRfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRfiDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRfiDataFilter
  ): ApplicationRfiDataConnection

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  allApplicationSowData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): ApplicationSowDataConnection

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  allApplicationStatuses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationStatusesConnection

  """Reads and enables pagination through a set of `ApplicationStatusType`."""
  allApplicationStatusTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatusType`."""
    orderBy: [ApplicationStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusTypeFilter
  ): ApplicationStatusTypesConnection

  """Reads and enables pagination through a set of `AssessmentData`."""
  allAssessmentData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection

  """Reads and enables pagination through a set of `AssessmentType`."""
  allAssessmentTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentType`."""
    orderBy: [AssessmentTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentTypeFilter
  ): AssessmentTypesConnection

  """Reads and enables pagination through a set of `Attachment`."""
  allAttachments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection

  """Reads and enables pagination through a set of `Cbc`."""
  allCbcs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcFilter
  ): CbcsConnection

  """
  Reads and enables pagination through a set of `CbcApplicationPendingChangeRequest`.
  """
  allCbcApplicationPendingChangeRequests(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcApplicationPendingChangeRequest`."""
    orderBy: [CbcApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcApplicationPendingChangeRequestFilter
  ): CbcApplicationPendingChangeRequestsConnection

  """Reads and enables pagination through a set of `CbcData`."""
  allCbcData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CbcDataConnection

  """Reads and enables pagination through a set of `CbcDataChangeReason`."""
  allCbcDataChangeReasons(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcDataChangeReason`."""
    orderBy: [CbcDataChangeReasonsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataChangeReasonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataChangeReasonFilter
  ): CbcDataChangeReasonsConnection

  """Reads and enables pagination through a set of `CbcProject`."""
  allCbcProjects(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProject`."""
    orderBy: [CbcProjectsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectFilter
  ): CbcProjectsConnection

  """Reads and enables pagination through a set of `CbcProjectCommunity`."""
  allCbcProjectCommunities(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCommunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectCommunityFilter
  ): CbcProjectCommunitiesConnection

  """Reads and enables pagination through a set of `CcbcUser`."""
  allCcbcUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUsersConnection

  """Reads and enables pagination through a set of `ChangeRequestData`."""
  allChangeRequestData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChangeRequestData`."""
    orderBy: [ChangeRequestDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeRequestDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeRequestDataFilter
  ): ChangeRequestDataConnection

  """Reads and enables pagination through a set of `CommunitiesSourceData`."""
  allCommunitiesSourceData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CommunitiesSourceData`."""
    orderBy: [CommunitiesSourceDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommunitiesSourceDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommunitiesSourceDataFilter
  ): CommunitiesSourceDataConnection

  """
  Reads and enables pagination through a set of `ConditionalApprovalData`.
  """
  allConditionalApprovalData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ConditionalApprovalData`."""
    orderBy: [ConditionalApprovalDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConditionalApprovalDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConditionalApprovalDataFilter
  ): ConditionalApprovalDataConnection

  """Reads and enables pagination through a set of `EmailRecord`."""
  allEmailRecords(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EmailRecord`."""
    orderBy: [EmailRecordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmailRecordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmailRecordFilter
  ): EmailRecordsConnection

  """Reads and enables pagination through a set of `Form`."""
  allForms(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormFilter
  ): FormsConnection

  """Reads and enables pagination through a set of `FormData`."""
  allFormData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): FormDataConnection

  """Reads and enables pagination through a set of `FormDataStatusType`."""
  allFormDataStatusTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormDataStatusType`."""
    orderBy: [FormDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataStatusTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataStatusTypeFilter
  ): FormDataStatusTypesConnection

  """Reads and enables pagination through a set of `FormType`."""
  allFormTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormType`."""
    orderBy: [FormTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormTypeFilter
  ): FormTypesConnection

  """Reads and enables pagination through a set of `GaplessCounter`."""
  allGaplessCounters(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GaplessCounter`."""
    orderBy: [GaplessCountersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GaplessCounterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GaplessCounterFilter
  ): GaplessCountersConnection

  """Reads and enables pagination through a set of `GisData`."""
  allGisData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GisData`."""
    orderBy: [GisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GisDataFilter
  ): GisDataConnection

  """Reads and enables pagination through a set of `HistoryItem`."""
  allHistoryItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `HistoryItem`."""
    orderBy: [HistoryItemsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HistoryItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: HistoryItemFilter
  ): HistoryItemsConnection

  """Reads and enables pagination through a set of `Intake`."""
  allIntakes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IntakeFilter
  ): IntakesConnection

  """Reads and enables pagination through a set of `Notification`."""
  allNotifications(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection

  """
  Reads and enables pagination through a set of `ProjectInformationData`.
  """
  allProjectInformationData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProjectInformationData`."""
    orderBy: [ProjectInformationDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectInformationDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectInformationDataFilter
  ): ProjectInformationDataConnection

  """Reads and enables pagination through a set of `RecordVersion`."""
  allRecordVersions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RecordVersion`."""
    orderBy: [RecordVersionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RecordVersionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RecordVersionFilter
  ): RecordVersionsConnection

  """Reads and enables pagination through a set of `RfiData`."""
  allRfiData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RfiDataFilter
  ): RfiDataConnection

  """Reads and enables pagination through a set of `RfiDataStatusType`."""
  allRfiDataStatusTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiDataStatusType`."""
    orderBy: [RfiDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataStatusTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RfiDataStatusTypeFilter
  ): RfiDataStatusTypesConnection

  """Reads and enables pagination through a set of `SowTab1`."""
  allSowTab1S(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab1`."""
    orderBy: [SowTab1SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab1Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab1Filter
  ): SowTab1SConnection

  """Reads and enables pagination through a set of `SowTab2`."""
  allSowTab2S(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab2`."""
    orderBy: [SowTab2SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab2Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab2Filter
  ): SowTab2SConnection

  """Reads and enables pagination through a set of `SowTab7`."""
  allSowTab7S(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab7`."""
    orderBy: [SowTab7SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab7Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab7Filter
  ): SowTab7SConnection

  """Reads and enables pagination through a set of `SowTab8`."""
  allSowTab8S(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab8`."""
    orderBy: [SowTab8SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab8Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab8Filter
  ): SowTab8SConnection
  analystByRowId(rowId: Int!): Analyst
  announcementByRowId(rowId: Int!): Announcement
  applicationByRowId(rowId: Int!): Application
  applicationAnalystLeadByRowId(rowId: Int!): ApplicationAnalystLead
  applicationAnnouncedByRowId(rowId: Int!): ApplicationAnnounced
  applicationAnnouncementByAnnouncementIdAndApplicationId(announcementId: Int!, applicationId: Int!): ApplicationAnnouncement
  applicationClaimsDataByRowId(rowId: Int!): ApplicationClaimsData
  applicationClaimsExcelDataByRowId(rowId: Int!): ApplicationClaimsExcelData
  applicationCommunityProgressReportDataByRowId(rowId: Int!): ApplicationCommunityProgressReportData
  applicationCommunityReportExcelDataByRowId(rowId: Int!): ApplicationCommunityReportExcelData
  applicationFormDataByFormDataIdAndApplicationId(formDataId: Int!, applicationId: Int!): ApplicationFormData
  applicationGisAssessmentHhByRowId(rowId: Int!): ApplicationGisAssessmentHh
  applicationGisDataByRowId(rowId: Int!): ApplicationGisData
  applicationInternalDescriptionByRowId(rowId: Int!): ApplicationInternalDescription
  applicationMilestoneDataByRowId(rowId: Int!): ApplicationMilestoneData
  applicationMilestoneExcelDataByRowId(rowId: Int!): ApplicationMilestoneExcelData
  applicationPackageByRowId(rowId: Int!): ApplicationPackage
  applicationPendingChangeRequestByRowId(rowId: Int!): ApplicationPendingChangeRequest
  applicationProjectTypeByRowId(rowId: Int!): ApplicationProjectType
  applicationRfiDataByRfiDataIdAndApplicationId(rfiDataId: Int!, applicationId: Int!): ApplicationRfiData
  applicationSowDataByRowId(rowId: Int!): ApplicationSowData
  applicationStatusByRowId(rowId: Int!): ApplicationStatus
  applicationStatusTypeByName(name: String!): ApplicationStatusType
  applicationStatusTypeByStatusOrder(statusOrder: Int!): ApplicationStatusType
  assessmentDataByRowId(rowId: Int!): AssessmentData
  assessmentTypeByName(name: String!): AssessmentType
  attachmentByRowId(rowId: Int!): Attachment
  cbcByRowId(rowId: Int!): Cbc
  cbcByProjectNumber(projectNumber: Int!): Cbc
  cbcApplicationPendingChangeRequestByRowId(rowId: Int!): CbcApplicationPendingChangeRequest
  cbcDataByRowId(rowId: Int!): CbcData
  cbcDataChangeReasonByRowId(rowId: Int!): CbcDataChangeReason
  cbcProjectByRowId(rowId: Int!): CbcProject
  cbcProjectCommunityByRowId(rowId: Int!): CbcProjectCommunity
  ccbcUserByRowId(rowId: Int!): CcbcUser
  changeRequestDataByRowId(rowId: Int!): ChangeRequestData
  communitiesSourceDataByRowId(rowId: Int!): CommunitiesSourceData
  communitiesSourceDataByGeographicNameId(geographicNameId: Int!): CommunitiesSourceData
  conditionalApprovalDataByRowId(rowId: Int!): ConditionalApprovalData
  emailRecordByRowId(rowId: Int!): EmailRecord
  formByRowId(rowId: Int!): Form
  formBySlug(slug: String!): Form
  formDataByRowId(rowId: Int!): FormData
  formDataStatusTypeByName(name: String!): FormDataStatusType
  formTypeByName(name: String!): FormType
  gaplessCounterByRowId(rowId: Int!): GaplessCounter
  gisDataByRowId(rowId: Int!): GisData
  intakeByRowId(rowId: Int!): Intake
  intakeByApplicationNumberSeqName(applicationNumberSeqName: String!): Intake
  notificationByRowId(rowId: Int!): Notification
  projectInformationDataByRowId(rowId: Int!): ProjectInformationData
  recordVersionByRowId(rowId: BigInt!): RecordVersion
  rfiDataByRowId(rowId: Int!): RfiData
  rfiDataStatusTypeByName(name: String!): RfiDataStatusType
  sowTab1ByRowId(rowId: Int!): SowTab1
  sowTab2ByRowId(rowId: Int!): SowTab2
  sowTab7ByRowId(rowId: Int!): SowTab7
  sowTab8ByRowId(rowId: Int!): SowTab8

  """Reads and enables pagination through a set of `GisDataCount`."""
  gisDataCounts(
    batchid: Int!

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GisDataCountFilter
  ): GisDataCountsConnection

  """Returns the next intake if any"""
  nextIntake: Intake

  """Returns the current hidden open intake"""
  openHiddenIntake(code: String!): Intake

  """Returns the current open intake"""
  openIntake: Intake
  session: KeycloakJwt

  """Reads a single `Analyst` using its globally unique `ID`."""
  analyst(
    """The globally unique `ID` to be used in selecting a single `Analyst`."""
    id: ID!
  ): Analyst

  """Reads a single `Announcement` using its globally unique `ID`."""
  announcement(
    """
    The globally unique `ID` to be used in selecting a single `Announcement`.
    """
    id: ID!
  ): Announcement

  """Reads a single `Application` using its globally unique `ID`."""
  application(
    """
    The globally unique `ID` to be used in selecting a single `Application`.
    """
    id: ID!
  ): Application

  """
  Reads a single `ApplicationAnalystLead` using its globally unique `ID`.
  """
  applicationAnalystLead(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationAnalystLead`.
    """
    id: ID!
  ): ApplicationAnalystLead

  """Reads a single `ApplicationAnnounced` using its globally unique `ID`."""
  applicationAnnounced(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationAnnounced`.
    """
    id: ID!
  ): ApplicationAnnounced

  """
  Reads a single `ApplicationAnnouncement` using its globally unique `ID`.
  """
  applicationAnnouncement(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationAnnouncement`.
    """
    id: ID!
  ): ApplicationAnnouncement

  """Reads a single `ApplicationClaimsData` using its globally unique `ID`."""
  applicationClaimsData(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationClaimsData`.
    """
    id: ID!
  ): ApplicationClaimsData

  """
  Reads a single `ApplicationClaimsExcelData` using its globally unique `ID`.
  """
  applicationClaimsExcelData(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationClaimsExcelData`.
    """
    id: ID!
  ): ApplicationClaimsExcelData

  """
  Reads a single `ApplicationCommunityProgressReportData` using its globally unique `ID`.
  """
  applicationCommunityProgressReportData(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationCommunityProgressReportData`.
    """
    id: ID!
  ): ApplicationCommunityProgressReportData

  """
  Reads a single `ApplicationCommunityReportExcelData` using its globally unique `ID`.
  """
  applicationCommunityReportExcelData(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationCommunityReportExcelData`.
    """
    id: ID!
  ): ApplicationCommunityReportExcelData

  """Reads a single `ApplicationFormData` using its globally unique `ID`."""
  applicationFormData(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationFormData`.
    """
    id: ID!
  ): ApplicationFormData

  """
  Reads a single `ApplicationGisAssessmentHh` using its globally unique `ID`.
  """
  applicationGisAssessmentHh(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationGisAssessmentHh`.
    """
    id: ID!
  ): ApplicationGisAssessmentHh

  """Reads a single `ApplicationGisData` using its globally unique `ID`."""
  applicationGisData(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationGisData`.
    """
    id: ID!
  ): ApplicationGisData

  """
  Reads a single `ApplicationInternalDescription` using its globally unique `ID`.
  """
  applicationInternalDescription(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationInternalDescription`.
    """
    id: ID!
  ): ApplicationInternalDescription

  """
  Reads a single `ApplicationMilestoneData` using its globally unique `ID`.
  """
  applicationMilestoneData(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationMilestoneData`.
    """
    id: ID!
  ): ApplicationMilestoneData

  """
  Reads a single `ApplicationMilestoneExcelData` using its globally unique `ID`.
  """
  applicationMilestoneExcelData(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationMilestoneExcelData`.
    """
    id: ID!
  ): ApplicationMilestoneExcelData

  """Reads a single `ApplicationPackage` using its globally unique `ID`."""
  applicationPackage(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationPackage`.
    """
    id: ID!
  ): ApplicationPackage

  """
  Reads a single `ApplicationPendingChangeRequest` using its globally unique `ID`.
  """
  applicationPendingChangeRequest(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationPendingChangeRequest`.
    """
    id: ID!
  ): ApplicationPendingChangeRequest

  """
  Reads a single `ApplicationProjectType` using its globally unique `ID`.
  """
  applicationProjectType(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationProjectType`.
    """
    id: ID!
  ): ApplicationProjectType

  """Reads a single `ApplicationRfiData` using its globally unique `ID`."""
  applicationRfiData(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationRfiData`.
    """
    id: ID!
  ): ApplicationRfiData

  """Reads a single `ApplicationSowData` using its globally unique `ID`."""
  applicationSowData(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationSowData`.
    """
    id: ID!
  ): ApplicationSowData

  """Reads a single `ApplicationStatus` using its globally unique `ID`."""
  applicationStatus(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationStatus`.
    """
    id: ID!
  ): ApplicationStatus

  """Reads a single `ApplicationStatusType` using its globally unique `ID`."""
  applicationStatusType(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationStatusType`.
    """
    id: ID!
  ): ApplicationStatusType

  """Reads a single `AssessmentData` using its globally unique `ID`."""
  assessmentData(
    """
    The globally unique `ID` to be used in selecting a single `AssessmentData`.
    """
    id: ID!
  ): AssessmentData

  """Reads a single `AssessmentType` using its globally unique `ID`."""
  assessmentType(
    """
    The globally unique `ID` to be used in selecting a single `AssessmentType`.
    """
    id: ID!
  ): AssessmentType

  """Reads a single `Attachment` using its globally unique `ID`."""
  attachment(
    """
    The globally unique `ID` to be used in selecting a single `Attachment`.
    """
    id: ID!
  ): Attachment

  """Reads a single `Cbc` using its globally unique `ID`."""
  cbc(
    """The globally unique `ID` to be used in selecting a single `Cbc`."""
    id: ID!
  ): Cbc

  """
  Reads a single `CbcApplicationPendingChangeRequest` using its globally unique `ID`.
  """
  cbcApplicationPendingChangeRequest(
    """
    The globally unique `ID` to be used in selecting a single `CbcApplicationPendingChangeRequest`.
    """
    id: ID!
  ): CbcApplicationPendingChangeRequest

  """Reads a single `CbcData` using its globally unique `ID`."""
  cbcData(
    """The globally unique `ID` to be used in selecting a single `CbcData`."""
    id: ID!
  ): CbcData

  """Reads a single `CbcDataChangeReason` using its globally unique `ID`."""
  cbcDataChangeReason(
    """
    The globally unique `ID` to be used in selecting a single `CbcDataChangeReason`.
    """
    id: ID!
  ): CbcDataChangeReason

  """Reads a single `CbcProject` using its globally unique `ID`."""
  cbcProject(
    """
    The globally unique `ID` to be used in selecting a single `CbcProject`.
    """
    id: ID!
  ): CbcProject

  """Reads a single `CbcProjectCommunity` using its globally unique `ID`."""
  cbcProjectCommunity(
    """
    The globally unique `ID` to be used in selecting a single `CbcProjectCommunity`.
    """
    id: ID!
  ): CbcProjectCommunity

  """Reads a single `CcbcUser` using its globally unique `ID`."""
  ccbcUser(
    """The globally unique `ID` to be used in selecting a single `CcbcUser`."""
    id: ID!
  ): CcbcUser

  """Reads a single `ChangeRequestData` using its globally unique `ID`."""
  changeRequestData(
    """
    The globally unique `ID` to be used in selecting a single `ChangeRequestData`.
    """
    id: ID!
  ): ChangeRequestData

  """Reads a single `CommunitiesSourceData` using its globally unique `ID`."""
  communitiesSourceData(
    """
    The globally unique `ID` to be used in selecting a single `CommunitiesSourceData`.
    """
    id: ID!
  ): CommunitiesSourceData

  """
  Reads a single `ConditionalApprovalData` using its globally unique `ID`.
  """
  conditionalApprovalData(
    """
    The globally unique `ID` to be used in selecting a single `ConditionalApprovalData`.
    """
    id: ID!
  ): ConditionalApprovalData

  """Reads a single `EmailRecord` using its globally unique `ID`."""
  emailRecord(
    """
    The globally unique `ID` to be used in selecting a single `EmailRecord`.
    """
    id: ID!
  ): EmailRecord

  """Reads a single `Form` using its globally unique `ID`."""
  form(
    """The globally unique `ID` to be used in selecting a single `Form`."""
    id: ID!
  ): Form

  """Reads a single `FormData` using its globally unique `ID`."""
  formData(
    """The globally unique `ID` to be used in selecting a single `FormData`."""
    id: ID!
  ): FormData

  """Reads a single `FormDataStatusType` using its globally unique `ID`."""
  formDataStatusType(
    """
    The globally unique `ID` to be used in selecting a single `FormDataStatusType`.
    """
    id: ID!
  ): FormDataStatusType

  """Reads a single `FormType` using its globally unique `ID`."""
  formType(
    """The globally unique `ID` to be used in selecting a single `FormType`."""
    id: ID!
  ): FormType

  """Reads a single `GaplessCounter` using its globally unique `ID`."""
  gaplessCounter(
    """
    The globally unique `ID` to be used in selecting a single `GaplessCounter`.
    """
    id: ID!
  ): GaplessCounter

  """Reads a single `GisData` using its globally unique `ID`."""
  gisData(
    """The globally unique `ID` to be used in selecting a single `GisData`."""
    id: ID!
  ): GisData

  """Reads a single `Intake` using its globally unique `ID`."""
  intake(
    """The globally unique `ID` to be used in selecting a single `Intake`."""
    id: ID!
  ): Intake

  """Reads a single `Notification` using its globally unique `ID`."""
  notification(
    """
    The globally unique `ID` to be used in selecting a single `Notification`.
    """
    id: ID!
  ): Notification

  """
  Reads a single `ProjectInformationData` using its globally unique `ID`.
  """
  projectInformationData(
    """
    The globally unique `ID` to be used in selecting a single `ProjectInformationData`.
    """
    id: ID!
  ): ProjectInformationData

  """Reads a single `RecordVersion` using its globally unique `ID`."""
  recordVersion(
    """
    The globally unique `ID` to be used in selecting a single `RecordVersion`.
    """
    id: ID!
  ): RecordVersion

  """Reads a single `RfiData` using its globally unique `ID`."""
  rfiData(
    """The globally unique `ID` to be used in selecting a single `RfiData`."""
    id: ID!
  ): RfiData

  """Reads a single `RfiDataStatusType` using its globally unique `ID`."""
  rfiDataStatusType(
    """
    The globally unique `ID` to be used in selecting a single `RfiDataStatusType`.
    """
    id: ID!
  ): RfiDataStatusType

  """Reads a single `SowTab1` using its globally unique `ID`."""
  sowTab1(
    """The globally unique `ID` to be used in selecting a single `SowTab1`."""
    id: ID!
  ): SowTab1

  """Reads a single `SowTab2` using its globally unique `ID`."""
  sowTab2(
    """The globally unique `ID` to be used in selecting a single `SowTab2`."""
    id: ID!
  ): SowTab2

  """Reads a single `SowTab7` using its globally unique `ID`."""
  sowTab7(
    """The globally unique `ID` to be used in selecting a single `SowTab7`."""
    id: ID!
  ): SowTab7

  """Reads a single `SowTab8` using its globally unique `ID`."""
  sowTab8(
    """The globally unique `ID` to be used in selecting a single `SowTab8`."""
    id: ID!
  ): SowTab8
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""A connection to a list of `Analyst` values."""
type AnalystsConnection {
  """A list of `Analyst` objects."""
  nodes: [Analyst]!

  """
  A list of edges which contains the `Analyst` and cursor to aid in pagination.
  """
  edges: [AnalystsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Analyst` you could get from the connection."""
  totalCount: Int!
}

"""Table containing list of analysts"""
type Analyst implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the analyst"""
  rowId: Int!

  """Analyst's first name"""
  givenName: String

  """Analyst's last name"""
  familyName: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Boolean column indicating whether the analyst is active or not."""
  active: Boolean

  """Analyst's email address"""
  email: String

  """Reads a single `CcbcUser` that is related to this `Analyst`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Analyst`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Analyst`."""
  ccbcUserByArchivedBy: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByAnalystId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnalystLeadFilter
  ): ApplicationAnalystLeadsConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationAnalystLeadAnalystIdAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): AnalystApplicationsByApplicationAnalystLeadAnalystIdAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnalystLeadAnalystIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): AnalystCcbcUsersByApplicationAnalystLeadAnalystIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnalystLeadAnalystIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): AnalystCcbcUsersByApplicationAnalystLeadAnalystIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnalystLeadAnalystIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): AnalystCcbcUsersByApplicationAnalystLeadAnalystIdAndArchivedByManyToManyConnection!
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
Table containing information about the application's users, this is business contact information not personally identifiable information
"""
type CcbcUser implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the user"""
  rowId: Int!

  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  sessionSub: String

  """User's first name"""
  givenName: String

  """User's last name"""
  familyName: String

  """User's email address"""
  emailAddress: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """User is an external analyst"""
  externalAnalyst: Boolean

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUsersConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUsersConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUsersConnection!

  """Reads and enables pagination through a set of `Intake`."""
  intakesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IntakeFilter
  ): IntakesConnection!

  """Reads and enables pagination through a set of `Intake`."""
  intakesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IntakeFilter
  ): IntakesConnection!

  """Reads and enables pagination through a set of `Intake`."""
  intakesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IntakeFilter
  ): IntakesConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): ApplicationsConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): ApplicationsConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): ApplicationsConnection!

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationStatusesConnection!

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationStatusesConnection!

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationStatusesConnection!

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection!

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection!

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection!

  """Reads and enables pagination through a set of `FormData`."""
  formDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): FormDataConnection!

  """Reads and enables pagination through a set of `FormData`."""
  formDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): FormDataConnection!

  """Reads and enables pagination through a set of `FormData`."""
  formDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): FormDataConnection!

  """Reads and enables pagination through a set of `Analyst`."""
  analystsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnalystFilter
  ): AnalystsConnection!

  """Reads and enables pagination through a set of `Analyst`."""
  analystsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnalystFilter
  ): AnalystsConnection!

  """Reads and enables pagination through a set of `Analyst`."""
  analystsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnalystFilter
  ): AnalystsConnection!

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnalystLeadFilter
  ): ApplicationAnalystLeadsConnection!

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnalystLeadFilter
  ): ApplicationAnalystLeadsConnection!

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnalystLeadFilter
  ): ApplicationAnalystLeadsConnection!

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RfiDataFilter
  ): RfiDataConnection!

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RfiDataFilter
  ): RfiDataConnection!

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RfiDataFilter
  ): RfiDataConnection!

  """Reads and enables pagination through a set of `AssessmentData`."""
  assessmentDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection!

  """Reads and enables pagination through a set of `AssessmentData`."""
  assessmentDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection!

  """Reads and enables pagination through a set of `AssessmentData`."""
  assessmentDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection!

  """Reads and enables pagination through a set of `ApplicationPackage`."""
  applicationPackagesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPackage`."""
    orderBy: [ApplicationPackagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPackageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPackageFilter
  ): ApplicationPackagesConnection!

  """Reads and enables pagination through a set of `ApplicationPackage`."""
  applicationPackagesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPackage`."""
    orderBy: [ApplicationPackagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPackageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPackageFilter
  ): ApplicationPackagesConnection!

  """Reads and enables pagination through a set of `ApplicationPackage`."""
  applicationPackagesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPackage`."""
    orderBy: [ApplicationPackagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPackageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPackageFilter
  ): ApplicationPackagesConnection!

  """Reads and enables pagination through a set of `RecordVersion`."""
  recordVersionsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RecordVersion`."""
    orderBy: [RecordVersionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RecordVersionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RecordVersionFilter
  ): RecordVersionsConnection!

  """
  Reads and enables pagination through a set of `ConditionalApprovalData`.
  """
  conditionalApprovalDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ConditionalApprovalData`."""
    orderBy: [ConditionalApprovalDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConditionalApprovalDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConditionalApprovalDataFilter
  ): ConditionalApprovalDataConnection!

  """
  Reads and enables pagination through a set of `ConditionalApprovalData`.
  """
  conditionalApprovalDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ConditionalApprovalData`."""
    orderBy: [ConditionalApprovalDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConditionalApprovalDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConditionalApprovalDataFilter
  ): ConditionalApprovalDataConnection!

  """
  Reads and enables pagination through a set of `ConditionalApprovalData`.
  """
  conditionalApprovalDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ConditionalApprovalData`."""
    orderBy: [ConditionalApprovalDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConditionalApprovalDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConditionalApprovalDataFilter
  ): ConditionalApprovalDataConnection!

  """Reads and enables pagination through a set of `GisData`."""
  gisDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GisData`."""
    orderBy: [GisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GisDataFilter
  ): GisDataConnection!

  """Reads and enables pagination through a set of `GisData`."""
  gisDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GisData`."""
    orderBy: [GisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GisDataFilter
  ): GisDataConnection!

  """Reads and enables pagination through a set of `GisData`."""
  gisDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GisData`."""
    orderBy: [GisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GisDataFilter
  ): GisDataConnection!

  """Reads and enables pagination through a set of `ApplicationGisData`."""
  applicationGisDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisDataFilter
  ): ApplicationGisDataConnection!

  """Reads and enables pagination through a set of `ApplicationGisData`."""
  applicationGisDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisDataFilter
  ): ApplicationGisDataConnection!

  """Reads and enables pagination through a set of `ApplicationGisData`."""
  applicationGisDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisDataFilter
  ): ApplicationGisDataConnection!

  """Reads and enables pagination through a set of `Announcement`."""
  announcementsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Announcement`."""
    orderBy: [AnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnnouncementFilter
  ): AnnouncementsConnection!

  """Reads and enables pagination through a set of `Announcement`."""
  announcementsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Announcement`."""
    orderBy: [AnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnnouncementFilter
  ): AnnouncementsConnection!

  """Reads and enables pagination through a set of `Announcement`."""
  announcementsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Announcement`."""
    orderBy: [AnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnnouncementFilter
  ): AnnouncementsConnection!

  """
  Reads and enables pagination through a set of `ApplicationAnnouncement`.
  """
  applicationAnnouncementsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncementFilter
  ): ApplicationAnnouncementsConnection!

  """
  Reads and enables pagination through a set of `ApplicationAnnouncement`.
  """
  applicationAnnouncementsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncementFilter
  ): ApplicationAnnouncementsConnection!

  """
  Reads and enables pagination through a set of `ApplicationAnnouncement`.
  """
  applicationAnnouncementsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncementFilter
  ): ApplicationAnnouncementsConnection!

  """
  Reads and enables pagination through a set of `ApplicationGisAssessmentHh`.
  """
  applicationGisAssessmentHhsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisAssessmentHh`."""
    orderBy: [ApplicationGisAssessmentHhsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisAssessmentHhCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisAssessmentHhFilter
  ): ApplicationGisAssessmentHhsConnection!

  """
  Reads and enables pagination through a set of `ApplicationGisAssessmentHh`.
  """
  applicationGisAssessmentHhsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisAssessmentHh`."""
    orderBy: [ApplicationGisAssessmentHhsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisAssessmentHhCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisAssessmentHhFilter
  ): ApplicationGisAssessmentHhsConnection!

  """
  Reads and enables pagination through a set of `ApplicationGisAssessmentHh`.
  """
  applicationGisAssessmentHhsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisAssessmentHh`."""
    orderBy: [ApplicationGisAssessmentHhsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisAssessmentHhCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisAssessmentHhFilter
  ): ApplicationGisAssessmentHhsConnection!

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): ApplicationSowDataConnection!

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): ApplicationSowDataConnection!

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): ApplicationSowDataConnection!

  """Reads and enables pagination through a set of `SowTab2`."""
  sowTab2SByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab2`."""
    orderBy: [SowTab2SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab2Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab2Filter
  ): SowTab2SConnection!

  """Reads and enables pagination through a set of `SowTab2`."""
  sowTab2SByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab2`."""
    orderBy: [SowTab2SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab2Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab2Filter
  ): SowTab2SConnection!

  """Reads and enables pagination through a set of `SowTab2`."""
  sowTab2SByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab2`."""
    orderBy: [SowTab2SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab2Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab2Filter
  ): SowTab2SConnection!

  """Reads and enables pagination through a set of `SowTab1`."""
  sowTab1SByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab1`."""
    orderBy: [SowTab1SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab1Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab1Filter
  ): SowTab1SConnection!

  """Reads and enables pagination through a set of `SowTab1`."""
  sowTab1SByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab1`."""
    orderBy: [SowTab1SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab1Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab1Filter
  ): SowTab1SConnection!

  """Reads and enables pagination through a set of `SowTab1`."""
  sowTab1SByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab1`."""
    orderBy: [SowTab1SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab1Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab1Filter
  ): SowTab1SConnection!

  """
  Reads and enables pagination through a set of `ProjectInformationData`.
  """
  projectInformationDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProjectInformationData`."""
    orderBy: [ProjectInformationDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectInformationDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectInformationDataFilter
  ): ProjectInformationDataConnection!

  """
  Reads and enables pagination through a set of `ProjectInformationData`.
  """
  projectInformationDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProjectInformationData`."""
    orderBy: [ProjectInformationDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectInformationDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectInformationDataFilter
  ): ProjectInformationDataConnection!

  """
  Reads and enables pagination through a set of `ProjectInformationData`.
  """
  projectInformationDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProjectInformationData`."""
    orderBy: [ProjectInformationDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectInformationDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectInformationDataFilter
  ): ProjectInformationDataConnection!

  """Reads and enables pagination through a set of `SowTab7`."""
  sowTab7SByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab7`."""
    orderBy: [SowTab7SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab7Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab7Filter
  ): SowTab7SConnection!

  """Reads and enables pagination through a set of `SowTab7`."""
  sowTab7SByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab7`."""
    orderBy: [SowTab7SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab7Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab7Filter
  ): SowTab7SConnection!

  """Reads and enables pagination through a set of `SowTab7`."""
  sowTab7SByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab7`."""
    orderBy: [SowTab7SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab7Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab7Filter
  ): SowTab7SConnection!

  """Reads and enables pagination through a set of `SowTab8`."""
  sowTab8SByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab8`."""
    orderBy: [SowTab8SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab8Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab8Filter
  ): SowTab8SConnection!

  """Reads and enables pagination through a set of `SowTab8`."""
  sowTab8SByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab8`."""
    orderBy: [SowTab8SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab8Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab8Filter
  ): SowTab8SConnection!

  """Reads and enables pagination through a set of `SowTab8`."""
  sowTab8SByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab8`."""
    orderBy: [SowTab8SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab8Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab8Filter
  ): SowTab8SConnection!

  """Reads and enables pagination through a set of `ChangeRequestData`."""
  changeRequestDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChangeRequestData`."""
    orderBy: [ChangeRequestDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeRequestDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeRequestDataFilter
  ): ChangeRequestDataConnection!

  """Reads and enables pagination through a set of `ChangeRequestData`."""
  changeRequestDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChangeRequestData`."""
    orderBy: [ChangeRequestDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeRequestDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeRequestDataFilter
  ): ChangeRequestDataConnection!

  """Reads and enables pagination through a set of `ChangeRequestData`."""
  changeRequestDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChangeRequestData`."""
    orderBy: [ChangeRequestDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeRequestDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeRequestDataFilter
  ): ChangeRequestDataConnection!

  """
  Reads and enables pagination through a set of `ApplicationCommunityProgressReportData`.
  """
  applicationCommunityProgressReportDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    The method to use when ordering `ApplicationCommunityProgressReportData`.
    """
    orderBy: [ApplicationCommunityProgressReportDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityProgressReportDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityProgressReportDataFilter
  ): ApplicationCommunityProgressReportDataConnection!

  """
  Reads and enables pagination through a set of `ApplicationCommunityProgressReportData`.
  """
  applicationCommunityProgressReportDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    The method to use when ordering `ApplicationCommunityProgressReportData`.
    """
    orderBy: [ApplicationCommunityProgressReportDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityProgressReportDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityProgressReportDataFilter
  ): ApplicationCommunityProgressReportDataConnection!

  """
  Reads and enables pagination through a set of `ApplicationCommunityProgressReportData`.
  """
  applicationCommunityProgressReportDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    The method to use when ordering `ApplicationCommunityProgressReportData`.
    """
    orderBy: [ApplicationCommunityProgressReportDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityProgressReportDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityProgressReportDataFilter
  ): ApplicationCommunityProgressReportDataConnection!

  """
  Reads and enables pagination through a set of `ApplicationCommunityReportExcelData`.
  """
  applicationCommunityReportExcelDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationCommunityReportExcelData`."""
    orderBy: [ApplicationCommunityReportExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityReportExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityReportExcelDataFilter
  ): ApplicationCommunityReportExcelDataConnection!

  """
  Reads and enables pagination through a set of `ApplicationCommunityReportExcelData`.
  """
  applicationCommunityReportExcelDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationCommunityReportExcelData`."""
    orderBy: [ApplicationCommunityReportExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityReportExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityReportExcelDataFilter
  ): ApplicationCommunityReportExcelDataConnection!

  """
  Reads and enables pagination through a set of `ApplicationCommunityReportExcelData`.
  """
  applicationCommunityReportExcelDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationCommunityReportExcelData`."""
    orderBy: [ApplicationCommunityReportExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityReportExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityReportExcelDataFilter
  ): ApplicationCommunityReportExcelDataConnection!

  """Reads and enables pagination through a set of `ApplicationClaimsData`."""
  applicationClaimsDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsData`."""
    orderBy: [ApplicationClaimsDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsDataFilter
  ): ApplicationClaimsDataConnection!

  """Reads and enables pagination through a set of `ApplicationClaimsData`."""
  applicationClaimsDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsData`."""
    orderBy: [ApplicationClaimsDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsDataFilter
  ): ApplicationClaimsDataConnection!

  """Reads and enables pagination through a set of `ApplicationClaimsData`."""
  applicationClaimsDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsData`."""
    orderBy: [ApplicationClaimsDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsDataFilter
  ): ApplicationClaimsDataConnection!

  """
  Reads and enables pagination through a set of `ApplicationClaimsExcelData`.
  """
  applicationClaimsExcelDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsExcelData`."""
    orderBy: [ApplicationClaimsExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsExcelDataFilter
  ): ApplicationClaimsExcelDataConnection!

  """
  Reads and enables pagination through a set of `ApplicationClaimsExcelData`.
  """
  applicationClaimsExcelDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsExcelData`."""
    orderBy: [ApplicationClaimsExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsExcelDataFilter
  ): ApplicationClaimsExcelDataConnection!

  """
  Reads and enables pagination through a set of `ApplicationClaimsExcelData`.
  """
  applicationClaimsExcelDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsExcelData`."""
    orderBy: [ApplicationClaimsExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsExcelDataFilter
  ): ApplicationClaimsExcelDataConnection!

  """
  Reads and enables pagination through a set of `ApplicationMilestoneData`.
  """
  applicationMilestoneDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneData`."""
    orderBy: [ApplicationMilestoneDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneDataFilter
  ): ApplicationMilestoneDataConnection!

  """
  Reads and enables pagination through a set of `ApplicationMilestoneData`.
  """
  applicationMilestoneDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneData`."""
    orderBy: [ApplicationMilestoneDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneDataFilter
  ): ApplicationMilestoneDataConnection!

  """
  Reads and enables pagination through a set of `ApplicationMilestoneData`.
  """
  applicationMilestoneDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneData`."""
    orderBy: [ApplicationMilestoneDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneDataFilter
  ): ApplicationMilestoneDataConnection!

  """
  Reads and enables pagination through a set of `ApplicationMilestoneExcelData`.
  """
  applicationMilestoneExcelDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneExcelData`."""
    orderBy: [ApplicationMilestoneExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneExcelDataFilter
  ): ApplicationMilestoneExcelDataConnection!

  """
  Reads and enables pagination through a set of `ApplicationMilestoneExcelData`.
  """
  applicationMilestoneExcelDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneExcelData`."""
    orderBy: [ApplicationMilestoneExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneExcelDataFilter
  ): ApplicationMilestoneExcelDataConnection!

  """
  Reads and enables pagination through a set of `ApplicationMilestoneExcelData`.
  """
  applicationMilestoneExcelDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneExcelData`."""
    orderBy: [ApplicationMilestoneExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneExcelDataFilter
  ): ApplicationMilestoneExcelDataConnection!

  """Reads and enables pagination through a set of `CbcProject`."""
  cbcProjectsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProject`."""
    orderBy: [CbcProjectsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectFilter
  ): CbcProjectsConnection!

  """Reads and enables pagination through a set of `CbcProject`."""
  cbcProjectsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProject`."""
    orderBy: [CbcProjectsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectFilter
  ): CbcProjectsConnection!

  """Reads and enables pagination through a set of `CbcProject`."""
  cbcProjectsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProject`."""
    orderBy: [CbcProjectsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectFilter
  ): CbcProjectsConnection!

  """
  Reads and enables pagination through a set of `ApplicationInternalDescription`.
  """
  applicationInternalDescriptionsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationInternalDescription`."""
    orderBy: [ApplicationInternalDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationInternalDescriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationInternalDescriptionFilter
  ): ApplicationInternalDescriptionsConnection!

  """
  Reads and enables pagination through a set of `ApplicationInternalDescription`.
  """
  applicationInternalDescriptionsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationInternalDescription`."""
    orderBy: [ApplicationInternalDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationInternalDescriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationInternalDescriptionFilter
  ): ApplicationInternalDescriptionsConnection!

  """
  Reads and enables pagination through a set of `ApplicationInternalDescription`.
  """
  applicationInternalDescriptionsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationInternalDescription`."""
    orderBy: [ApplicationInternalDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationInternalDescriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationInternalDescriptionFilter
  ): ApplicationInternalDescriptionsConnection!

  """
  Reads and enables pagination through a set of `ApplicationProjectType`.
  """
  applicationProjectTypesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationProjectType`."""
    orderBy: [ApplicationProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationProjectTypeFilter
  ): ApplicationProjectTypesConnection!

  """
  Reads and enables pagination through a set of `ApplicationProjectType`.
  """
  applicationProjectTypesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationProjectType`."""
    orderBy: [ApplicationProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationProjectTypeFilter
  ): ApplicationProjectTypesConnection!

  """
  Reads and enables pagination through a set of `ApplicationProjectType`.
  """
  applicationProjectTypesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationProjectType`."""
    orderBy: [ApplicationProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationProjectTypeFilter
  ): ApplicationProjectTypesConnection!

  """Reads and enables pagination through a set of `EmailRecord`."""
  emailRecordsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EmailRecord`."""
    orderBy: [EmailRecordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmailRecordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmailRecordFilter
  ): EmailRecordsConnection!

  """Reads and enables pagination through a set of `EmailRecord`."""
  emailRecordsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EmailRecord`."""
    orderBy: [EmailRecordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmailRecordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmailRecordFilter
  ): EmailRecordsConnection!

  """Reads and enables pagination through a set of `EmailRecord`."""
  emailRecordsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EmailRecord`."""
    orderBy: [EmailRecordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmailRecordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmailRecordFilter
  ): EmailRecordsConnection!

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!

  """
  Reads and enables pagination through a set of `ApplicationPendingChangeRequest`.
  """
  applicationPendingChangeRequestsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPendingChangeRequest`."""
    orderBy: [ApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPendingChangeRequestFilter
  ): ApplicationPendingChangeRequestsConnection!

  """
  Reads and enables pagination through a set of `ApplicationPendingChangeRequest`.
  """
  applicationPendingChangeRequestsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPendingChangeRequest`."""
    orderBy: [ApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPendingChangeRequestFilter
  ): ApplicationPendingChangeRequestsConnection!

  """
  Reads and enables pagination through a set of `ApplicationPendingChangeRequest`.
  """
  applicationPendingChangeRequestsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPendingChangeRequest`."""
    orderBy: [ApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPendingChangeRequestFilter
  ): ApplicationPendingChangeRequestsConnection!

  """Reads and enables pagination through a set of `Cbc`."""
  cbcsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcFilter
  ): CbcsConnection!

  """Reads and enables pagination through a set of `Cbc`."""
  cbcsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcFilter
  ): CbcsConnection!

  """Reads and enables pagination through a set of `Cbc`."""
  cbcsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcFilter
  ): CbcsConnection!

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CbcDataConnection!

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CbcDataConnection!

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CbcDataConnection!

  """
  Reads and enables pagination through a set of `CbcApplicationPendingChangeRequest`.
  """
  cbcApplicationPendingChangeRequestsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcApplicationPendingChangeRequest`."""
    orderBy: [CbcApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcApplicationPendingChangeRequestFilter
  ): CbcApplicationPendingChangeRequestsConnection!

  """
  Reads and enables pagination through a set of `CbcApplicationPendingChangeRequest`.
  """
  cbcApplicationPendingChangeRequestsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcApplicationPendingChangeRequest`."""
    orderBy: [CbcApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcApplicationPendingChangeRequestFilter
  ): CbcApplicationPendingChangeRequestsConnection!

  """
  Reads and enables pagination through a set of `CbcApplicationPendingChangeRequest`.
  """
  cbcApplicationPendingChangeRequestsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcApplicationPendingChangeRequest`."""
    orderBy: [CbcApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcApplicationPendingChangeRequestFilter
  ): CbcApplicationPendingChangeRequestsConnection!

  """Reads and enables pagination through a set of `CbcDataChangeReason`."""
  cbcDataChangeReasonsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcDataChangeReason`."""
    orderBy: [CbcDataChangeReasonsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataChangeReasonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataChangeReasonFilter
  ): CbcDataChangeReasonsConnection!

  """Reads and enables pagination through a set of `CbcDataChangeReason`."""
  cbcDataChangeReasonsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcDataChangeReason`."""
    orderBy: [CbcDataChangeReasonsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataChangeReasonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataChangeReasonFilter
  ): CbcDataChangeReasonsConnection!

  """Reads and enables pagination through a set of `CbcDataChangeReason`."""
  cbcDataChangeReasonsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcDataChangeReason`."""
    orderBy: [CbcDataChangeReasonsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataChangeReasonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataChangeReasonFilter
  ): CbcDataChangeReasonsConnection!

  """Reads and enables pagination through a set of `CommunitiesSourceData`."""
  communitiesSourceDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CommunitiesSourceData`."""
    orderBy: [CommunitiesSourceDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommunitiesSourceDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommunitiesSourceDataFilter
  ): CommunitiesSourceDataConnection!

  """Reads and enables pagination through a set of `CommunitiesSourceData`."""
  communitiesSourceDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CommunitiesSourceData`."""
    orderBy: [CommunitiesSourceDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommunitiesSourceDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommunitiesSourceDataFilter
  ): CommunitiesSourceDataConnection!

  """Reads and enables pagination through a set of `CommunitiesSourceData`."""
  communitiesSourceDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CommunitiesSourceData`."""
    orderBy: [CommunitiesSourceDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommunitiesSourceDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommunitiesSourceDataFilter
  ): CommunitiesSourceDataConnection!

  """Reads and enables pagination through a set of `CbcProjectCommunity`."""
  cbcProjectCommunitiesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCommunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectCommunityFilter
  ): CbcProjectCommunitiesConnection!

  """Reads and enables pagination through a set of `CbcProjectCommunity`."""
  cbcProjectCommunitiesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCommunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectCommunityFilter
  ): CbcProjectCommunitiesConnection!

  """Reads and enables pagination through a set of `CbcProjectCommunity`."""
  cbcProjectCommunitiesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCommunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectCommunityFilter
  ): CbcProjectCommunitiesConnection!

  """Reads and enables pagination through a set of `ApplicationAnnounced`."""
  applicationAnnouncedsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnounced`."""
    orderBy: [ApplicationAnnouncedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncedCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncedFilter
  ): ApplicationAnnouncedsConnection!

  """Reads and enables pagination through a set of `ApplicationAnnounced`."""
  applicationAnnouncedsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnounced`."""
    orderBy: [ApplicationAnnouncedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncedCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncedFilter
  ): ApplicationAnnouncedsConnection!

  """Reads and enables pagination through a set of `ApplicationAnnounced`."""
  applicationAnnouncedsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnounced`."""
    orderBy: [ApplicationAnnouncedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncedCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncedFilter
  ): ApplicationAnnouncedsConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCcbcUserCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCcbcUserCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCcbcUserCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCcbcUserCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCcbcUserUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCcbcUserUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCcbcUserUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCcbcUserUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCcbcUserArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCcbcUserArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCcbcUserArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCcbcUserArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByIntakeCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByIntakeCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByIntakeCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByIntakeCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `GaplessCounter`."""
  gaplessCountersByIntakeCreatedByAndCounterId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GaplessCounter`."""
    orderBy: [GaplessCountersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GaplessCounterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GaplessCounterFilter
  ): CcbcUserGaplessCountersByIntakeCreatedByAndCounterIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByIntakeUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByIntakeUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByIntakeUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByIntakeUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `GaplessCounter`."""
  gaplessCountersByIntakeUpdatedByAndCounterId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GaplessCounter`."""
    orderBy: [GaplessCountersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GaplessCounterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GaplessCounterFilter
  ): CcbcUserGaplessCountersByIntakeUpdatedByAndCounterIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByIntakeArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByIntakeArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByIntakeArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByIntakeArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `GaplessCounter`."""
  gaplessCountersByIntakeArchivedByAndCounterId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GaplessCounter`."""
    orderBy: [GaplessCountersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GaplessCounterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GaplessCounterFilter
  ): CcbcUserGaplessCountersByIntakeArchivedByAndCounterIdManyToManyConnection!

  """Reads and enables pagination through a set of `Intake`."""
  intakesByApplicationCreatedByAndIntakeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IntakeFilter
  ): CcbcUserIntakesByApplicationCreatedByAndIntakeIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Intake`."""
  intakesByApplicationUpdatedByAndIntakeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IntakeFilter
  ): CcbcUserIntakesByApplicationUpdatedByAndIntakeIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Intake`."""
  intakesByApplicationArchivedByAndIntakeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IntakeFilter
  ): CcbcUserIntakesByApplicationArchivedByAndIntakeIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationStatusCreatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationStatusCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `ApplicationStatusType`."""
  applicationStatusTypesByApplicationStatusCreatedByAndStatus(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatusType`."""
    orderBy: [ApplicationStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusTypeFilter
  ): CcbcUserApplicationStatusTypesByApplicationStatusCreatedByAndStatusManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationStatusCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationStatusCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationStatusCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationStatusCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationStatusArchivedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationStatusArchivedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `ApplicationStatusType`."""
  applicationStatusTypesByApplicationStatusArchivedByAndStatus(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatusType`."""
    orderBy: [ApplicationStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusTypeFilter
  ): CcbcUserApplicationStatusTypesByApplicationStatusArchivedByAndStatusManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationStatusArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationStatusArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationStatusArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationStatusArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationStatusUpdatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationStatusUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `ApplicationStatusType`."""
  applicationStatusTypesByApplicationStatusUpdatedByAndStatus(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatusType`."""
    orderBy: [ApplicationStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusTypeFilter
  ): CcbcUserApplicationStatusTypesByApplicationStatusUpdatedByAndStatusManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationStatusUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationStatusUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationStatusUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationStatusUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByAttachmentCreatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByAttachmentCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByAttachmentCreatedByAndApplicationStatusId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): CcbcUserApplicationStatusesByAttachmentCreatedByAndApplicationStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAttachmentCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByAttachmentCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAttachmentCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByAttachmentCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByAttachmentUpdatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByAttachmentUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByAttachmentUpdatedByAndApplicationStatusId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): CcbcUserApplicationStatusesByAttachmentUpdatedByAndApplicationStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAttachmentUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByAttachmentUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAttachmentUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByAttachmentUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByAttachmentArchivedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByAttachmentArchivedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByAttachmentArchivedByAndApplicationStatusId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): CcbcUserApplicationStatusesByAttachmentArchivedByAndApplicationStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAttachmentArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByAttachmentArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAttachmentArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByAttachmentArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `FormDataStatusType`."""
  formDataStatusTypesByFormDataCreatedByAndFormDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormDataStatusType`."""
    orderBy: [FormDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataStatusTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataStatusTypeFilter
  ): CcbcUserFormDataStatusTypesByFormDataCreatedByAndFormDataStatusTypeIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByFormDataCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByFormDataCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByFormDataCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByFormDataCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Form`."""
  formsByFormDataCreatedByAndFormSchemaId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormFilter
  ): CcbcUserFormsByFormDataCreatedByAndFormSchemaIdManyToManyConnection!

  """Reads and enables pagination through a set of `FormDataStatusType`."""
  formDataStatusTypesByFormDataUpdatedByAndFormDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormDataStatusType`."""
    orderBy: [FormDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataStatusTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataStatusTypeFilter
  ): CcbcUserFormDataStatusTypesByFormDataUpdatedByAndFormDataStatusTypeIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByFormDataUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByFormDataUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByFormDataUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByFormDataUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Form`."""
  formsByFormDataUpdatedByAndFormSchemaId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormFilter
  ): CcbcUserFormsByFormDataUpdatedByAndFormSchemaIdManyToManyConnection!

  """Reads and enables pagination through a set of `FormDataStatusType`."""
  formDataStatusTypesByFormDataArchivedByAndFormDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormDataStatusType`."""
    orderBy: [FormDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataStatusTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataStatusTypeFilter
  ): CcbcUserFormDataStatusTypesByFormDataArchivedByAndFormDataStatusTypeIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByFormDataArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByFormDataArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByFormDataArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByFormDataArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Form`."""
  formsByFormDataArchivedByAndFormSchemaId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormFilter
  ): CcbcUserFormsByFormDataArchivedByAndFormSchemaIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAnalystCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByAnalystCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAnalystCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByAnalystCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAnalystUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByAnalystUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAnalystUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByAnalystUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAnalystArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByAnalystArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAnalystArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByAnalystArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationAnalystLeadCreatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationAnalystLeadCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `Analyst`."""
  analystsByApplicationAnalystLeadCreatedByAndAnalystId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnalystFilter
  ): CcbcUserAnalystsByApplicationAnalystLeadCreatedByAndAnalystIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnalystLeadCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationAnalystLeadCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnalystLeadCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationAnalystLeadCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationAnalystLeadUpdatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationAnalystLeadUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `Analyst`."""
  analystsByApplicationAnalystLeadUpdatedByAndAnalystId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnalystFilter
  ): CcbcUserAnalystsByApplicationAnalystLeadUpdatedByAndAnalystIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnalystLeadUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationAnalystLeadUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnalystLeadUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationAnalystLeadUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationAnalystLeadArchivedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationAnalystLeadArchivedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `Analyst`."""
  analystsByApplicationAnalystLeadArchivedByAndAnalystId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnalystFilter
  ): CcbcUserAnalystsByApplicationAnalystLeadArchivedByAndAnalystIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnalystLeadArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationAnalystLeadArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnalystLeadArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationAnalystLeadArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `RfiDataStatusType`."""
  rfiDataStatusTypesByRfiDataCreatedByAndRfiDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiDataStatusType`."""
    orderBy: [RfiDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataStatusTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RfiDataStatusTypeFilter
  ): CcbcUserRfiDataStatusTypesByRfiDataCreatedByAndRfiDataStatusTypeIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByRfiDataCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByRfiDataCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByRfiDataCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByRfiDataCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `RfiDataStatusType`."""
  rfiDataStatusTypesByRfiDataUpdatedByAndRfiDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiDataStatusType`."""
    orderBy: [RfiDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataStatusTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RfiDataStatusTypeFilter
  ): CcbcUserRfiDataStatusTypesByRfiDataUpdatedByAndRfiDataStatusTypeIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByRfiDataUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByRfiDataUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByRfiDataUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByRfiDataUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `RfiDataStatusType`."""
  rfiDataStatusTypesByRfiDataArchivedByAndRfiDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiDataStatusType`."""
    orderBy: [RfiDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataStatusTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RfiDataStatusTypeFilter
  ): CcbcUserRfiDataStatusTypesByRfiDataArchivedByAndRfiDataStatusTypeIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByRfiDataArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByRfiDataArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByRfiDataArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByRfiDataArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByAssessmentDataCreatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByAssessmentDataCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `AssessmentType`."""
  assessmentTypesByAssessmentDataCreatedByAndAssessmentDataType(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentType`."""
    orderBy: [AssessmentTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentTypeFilter
  ): CcbcUserAssessmentTypesByAssessmentDataCreatedByAndAssessmentDataTypeManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAssessmentDataCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByAssessmentDataCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAssessmentDataCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByAssessmentDataCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByAssessmentDataUpdatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByAssessmentDataUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `AssessmentType`."""
  assessmentTypesByAssessmentDataUpdatedByAndAssessmentDataType(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentType`."""
    orderBy: [AssessmentTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentTypeFilter
  ): CcbcUserAssessmentTypesByAssessmentDataUpdatedByAndAssessmentDataTypeManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAssessmentDataUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByAssessmentDataUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAssessmentDataUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByAssessmentDataUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByAssessmentDataArchivedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByAssessmentDataArchivedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `AssessmentType`."""
  assessmentTypesByAssessmentDataArchivedByAndAssessmentDataType(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentType`."""
    orderBy: [AssessmentTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentTypeFilter
  ): CcbcUserAssessmentTypesByAssessmentDataArchivedByAndAssessmentDataTypeManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAssessmentDataArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByAssessmentDataArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAssessmentDataArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByAssessmentDataArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationPackageCreatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationPackageCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationPackageCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationPackageCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationPackageCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationPackageCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationPackageUpdatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationPackageUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationPackageUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationPackageUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationPackageUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationPackageUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationPackageArchivedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationPackageArchivedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationPackageArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationPackageArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationPackageArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationPackageArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByConditionalApprovalDataCreatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByConditionalApprovalDataCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByConditionalApprovalDataCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByConditionalApprovalDataCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByConditionalApprovalDataCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByConditionalApprovalDataCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByConditionalApprovalDataUpdatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByConditionalApprovalDataUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByConditionalApprovalDataUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByConditionalApprovalDataUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByConditionalApprovalDataUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByConditionalApprovalDataUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByConditionalApprovalDataArchivedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByConditionalApprovalDataArchivedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByConditionalApprovalDataArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByConditionalApprovalDataArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByConditionalApprovalDataArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByConditionalApprovalDataArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByGisDataCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByGisDataCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByGisDataCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByGisDataCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByGisDataUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByGisDataUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByGisDataUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByGisDataUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByGisDataArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByGisDataArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByGisDataArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByGisDataArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `GisData`."""
  gisDataByApplicationGisDataCreatedByAndBatchId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GisData`."""
    orderBy: [GisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GisDataFilter
  ): CcbcUserGisDataByApplicationGisDataCreatedByAndBatchIdManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationGisDataCreatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationGisDataCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationGisDataCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationGisDataCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationGisDataCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationGisDataCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `GisData`."""
  gisDataByApplicationGisDataUpdatedByAndBatchId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GisData`."""
    orderBy: [GisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GisDataFilter
  ): CcbcUserGisDataByApplicationGisDataUpdatedByAndBatchIdManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationGisDataUpdatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationGisDataUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationGisDataUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationGisDataUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationGisDataUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationGisDataUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `GisData`."""
  gisDataByApplicationGisDataArchivedByAndBatchId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GisData`."""
    orderBy: [GisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GisDataFilter
  ): CcbcUserGisDataByApplicationGisDataArchivedByAndBatchIdManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationGisDataArchivedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationGisDataArchivedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationGisDataArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationGisDataArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationGisDataArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationGisDataArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAnnouncementCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByAnnouncementCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAnnouncementCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByAnnouncementCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAnnouncementUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByAnnouncementUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAnnouncementUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByAnnouncementUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAnnouncementArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByAnnouncementArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAnnouncementArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByAnnouncementArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Announcement`."""
  announcementsByApplicationAnnouncementCreatedByAndAnnouncementId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Announcement`."""
    orderBy: [AnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnnouncementFilter
  ): CcbcUserAnnouncementsByApplicationAnnouncementCreatedByAndAnnouncementIdManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationAnnouncementCreatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationAnnouncementCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnnouncementCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationAnnouncementCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnnouncementCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationAnnouncementCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Announcement`."""
  announcementsByApplicationAnnouncementUpdatedByAndAnnouncementId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Announcement`."""
    orderBy: [AnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnnouncementFilter
  ): CcbcUserAnnouncementsByApplicationAnnouncementUpdatedByAndAnnouncementIdManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationAnnouncementUpdatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationAnnouncementUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnnouncementUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationAnnouncementUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnnouncementUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationAnnouncementUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Announcement`."""
  announcementsByApplicationAnnouncementArchivedByAndAnnouncementId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Announcement`."""
    orderBy: [AnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnnouncementFilter
  ): CcbcUserAnnouncementsByApplicationAnnouncementArchivedByAndAnnouncementIdManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationAnnouncementArchivedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationAnnouncementArchivedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnnouncementArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationAnnouncementArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnnouncementArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationAnnouncementArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationGisAssessmentHhCreatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationGisAssessmentHhCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationGisAssessmentHhCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationGisAssessmentHhCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationGisAssessmentHhCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationGisAssessmentHhCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationGisAssessmentHhUpdatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationGisAssessmentHhUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationGisAssessmentHhUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationGisAssessmentHhUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationGisAssessmentHhUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationGisAssessmentHhUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationGisAssessmentHhArchivedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationGisAssessmentHhArchivedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationGisAssessmentHhArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationGisAssessmentHhArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationGisAssessmentHhArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationGisAssessmentHhArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationSowDataCreatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationSowDataCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationSowDataCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationSowDataCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationSowDataCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationSowDataCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationSowDataUpdatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationSowDataUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationSowDataUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationSowDataUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationSowDataUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationSowDataUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationSowDataArchivedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationSowDataArchivedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationSowDataArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationSowDataArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationSowDataArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationSowDataArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataBySowTab2CreatedByAndSowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): CcbcUserApplicationSowDataBySowTab2CreatedByAndSowIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab2CreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersBySowTab2CreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab2CreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersBySowTab2CreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataBySowTab2UpdatedByAndSowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): CcbcUserApplicationSowDataBySowTab2UpdatedByAndSowIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab2UpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersBySowTab2UpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab2UpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersBySowTab2UpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataBySowTab2ArchivedByAndSowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): CcbcUserApplicationSowDataBySowTab2ArchivedByAndSowIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab2ArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersBySowTab2ArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab2ArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersBySowTab2ArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataBySowTab1CreatedByAndSowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): CcbcUserApplicationSowDataBySowTab1CreatedByAndSowIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab1CreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersBySowTab1CreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab1CreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersBySowTab1CreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataBySowTab1UpdatedByAndSowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): CcbcUserApplicationSowDataBySowTab1UpdatedByAndSowIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab1UpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersBySowTab1UpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab1UpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersBySowTab1UpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataBySowTab1ArchivedByAndSowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): CcbcUserApplicationSowDataBySowTab1ArchivedByAndSowIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab1ArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersBySowTab1ArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab1ArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersBySowTab1ArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByProjectInformationDataCreatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByProjectInformationDataCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByProjectInformationDataCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByProjectInformationDataCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByProjectInformationDataCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByProjectInformationDataCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByProjectInformationDataUpdatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByProjectInformationDataUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByProjectInformationDataUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByProjectInformationDataUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByProjectInformationDataUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByProjectInformationDataUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByProjectInformationDataArchivedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByProjectInformationDataArchivedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByProjectInformationDataArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByProjectInformationDataArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByProjectInformationDataArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByProjectInformationDataArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataBySowTab7CreatedByAndSowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): CcbcUserApplicationSowDataBySowTab7CreatedByAndSowIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab7CreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersBySowTab7CreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab7CreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersBySowTab7CreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataBySowTab7UpdatedByAndSowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): CcbcUserApplicationSowDataBySowTab7UpdatedByAndSowIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab7UpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersBySowTab7UpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab7UpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersBySowTab7UpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataBySowTab7ArchivedByAndSowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): CcbcUserApplicationSowDataBySowTab7ArchivedByAndSowIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab7ArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersBySowTab7ArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab7ArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersBySowTab7ArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataBySowTab8CreatedByAndSowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): CcbcUserApplicationSowDataBySowTab8CreatedByAndSowIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab8CreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersBySowTab8CreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab8CreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersBySowTab8CreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataBySowTab8UpdatedByAndSowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): CcbcUserApplicationSowDataBySowTab8UpdatedByAndSowIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab8UpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersBySowTab8UpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab8UpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersBySowTab8UpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataBySowTab8ArchivedByAndSowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): CcbcUserApplicationSowDataBySowTab8ArchivedByAndSowIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab8ArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersBySowTab8ArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab8ArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersBySowTab8ArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByChangeRequestDataCreatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByChangeRequestDataCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByChangeRequestDataCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByChangeRequestDataCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByChangeRequestDataCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByChangeRequestDataCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByChangeRequestDataUpdatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByChangeRequestDataUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByChangeRequestDataUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByChangeRequestDataUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByChangeRequestDataUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByChangeRequestDataUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByChangeRequestDataArchivedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByChangeRequestDataArchivedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByChangeRequestDataArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByChangeRequestDataArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByChangeRequestDataArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByChangeRequestDataArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationCommunityProgressReportDataCreatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationCommunityProgressReportDataCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationCommunityProgressReportDataCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationCommunityProgressReportDataCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationCommunityProgressReportDataCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationCommunityProgressReportDataCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationCommunityProgressReportDataUpdatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationCommunityProgressReportDataUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationCommunityProgressReportDataUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationCommunityProgressReportDataUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationCommunityProgressReportDataUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationCommunityProgressReportDataUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationCommunityProgressReportDataArchivedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationCommunityProgressReportDataArchivedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationCommunityProgressReportDataArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationCommunityProgressReportDataArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationCommunityProgressReportDataArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationCommunityProgressReportDataArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationCommunityReportExcelDataCreatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationCommunityReportExcelDataCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationCommunityReportExcelDataCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationCommunityReportExcelDataCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationCommunityReportExcelDataCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationCommunityReportExcelDataCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationCommunityReportExcelDataUpdatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationCommunityReportExcelDataUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationCommunityReportExcelDataUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationCommunityReportExcelDataUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationCommunityReportExcelDataUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationCommunityReportExcelDataUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationCommunityReportExcelDataArchivedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationCommunityReportExcelDataArchivedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationCommunityReportExcelDataArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationCommunityReportExcelDataArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationCommunityReportExcelDataArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationCommunityReportExcelDataArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationClaimsDataCreatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationClaimsDataCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationClaimsDataCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationClaimsDataCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationClaimsDataCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationClaimsDataCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationClaimsDataUpdatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationClaimsDataUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationClaimsDataUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationClaimsDataUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationClaimsDataUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationClaimsDataUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationClaimsDataArchivedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationClaimsDataArchivedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationClaimsDataArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationClaimsDataArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationClaimsDataArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationClaimsDataArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationClaimsExcelDataCreatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationClaimsExcelDataCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationClaimsExcelDataCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationClaimsExcelDataCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationClaimsExcelDataCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationClaimsExcelDataCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationClaimsExcelDataUpdatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationClaimsExcelDataUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationClaimsExcelDataUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationClaimsExcelDataUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationClaimsExcelDataUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationClaimsExcelDataUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationClaimsExcelDataArchivedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationClaimsExcelDataArchivedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationClaimsExcelDataArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationClaimsExcelDataArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationClaimsExcelDataArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationClaimsExcelDataArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationMilestoneDataCreatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationMilestoneDataCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationMilestoneDataCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationMilestoneDataCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationMilestoneDataCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationMilestoneDataCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationMilestoneDataUpdatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationMilestoneDataUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationMilestoneDataUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationMilestoneDataUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationMilestoneDataUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationMilestoneDataUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationMilestoneDataArchivedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationMilestoneDataArchivedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationMilestoneDataArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationMilestoneDataArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationMilestoneDataArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationMilestoneDataArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationMilestoneExcelDataCreatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationMilestoneExcelDataCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationMilestoneExcelDataCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationMilestoneExcelDataCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationMilestoneExcelDataCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationMilestoneExcelDataCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationMilestoneExcelDataUpdatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationMilestoneExcelDataUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationMilestoneExcelDataUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationMilestoneExcelDataUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationMilestoneExcelDataUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationMilestoneExcelDataUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationMilestoneExcelDataArchivedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationMilestoneExcelDataArchivedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationMilestoneExcelDataArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationMilestoneExcelDataArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationMilestoneExcelDataArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationMilestoneExcelDataArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcProjectCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcProjectCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcProjectCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcProjectCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcProjectUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcProjectUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcProjectUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcProjectUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcProjectArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcProjectArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcProjectArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcProjectArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationInternalDescriptionCreatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationInternalDescriptionCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationInternalDescriptionCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationInternalDescriptionCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationInternalDescriptionCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationInternalDescriptionCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationInternalDescriptionUpdatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationInternalDescriptionUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationInternalDescriptionUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationInternalDescriptionUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationInternalDescriptionUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationInternalDescriptionUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationInternalDescriptionArchivedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationInternalDescriptionArchivedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationInternalDescriptionArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationInternalDescriptionArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationInternalDescriptionArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationInternalDescriptionArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationProjectTypeCreatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationProjectTypeCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationProjectTypeCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationProjectTypeCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationProjectTypeCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationProjectTypeCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationProjectTypeUpdatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationProjectTypeUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationProjectTypeUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationProjectTypeUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationProjectTypeUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationProjectTypeUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationProjectTypeArchivedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationProjectTypeArchivedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationProjectTypeArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationProjectTypeArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationProjectTypeArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationProjectTypeArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByEmailRecordCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByEmailRecordCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByEmailRecordCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByEmailRecordCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByEmailRecordUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByEmailRecordUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByEmailRecordUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByEmailRecordUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByEmailRecordArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByEmailRecordArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByEmailRecordArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByEmailRecordArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByNotificationCreatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByNotificationCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `EmailRecord`."""
  emailRecordsByNotificationCreatedByAndEmailRecordId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EmailRecord`."""
    orderBy: [EmailRecordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmailRecordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmailRecordFilter
  ): CcbcUserEmailRecordsByNotificationCreatedByAndEmailRecordIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByNotificationCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByNotificationCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByNotificationCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByNotificationCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByNotificationUpdatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByNotificationUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `EmailRecord`."""
  emailRecordsByNotificationUpdatedByAndEmailRecordId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EmailRecord`."""
    orderBy: [EmailRecordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmailRecordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmailRecordFilter
  ): CcbcUserEmailRecordsByNotificationUpdatedByAndEmailRecordIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByNotificationUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByNotificationUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByNotificationUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByNotificationUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByNotificationArchivedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByNotificationArchivedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `EmailRecord`."""
  emailRecordsByNotificationArchivedByAndEmailRecordId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EmailRecord`."""
    orderBy: [EmailRecordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmailRecordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmailRecordFilter
  ): CcbcUserEmailRecordsByNotificationArchivedByAndEmailRecordIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByNotificationArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByNotificationArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByNotificationArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByNotificationArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationPendingChangeRequestCreatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationPendingChangeRequestCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationPendingChangeRequestCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationPendingChangeRequestCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationPendingChangeRequestCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationPendingChangeRequestCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationPendingChangeRequestUpdatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationPendingChangeRequestUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationPendingChangeRequestUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationPendingChangeRequestUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationPendingChangeRequestUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationPendingChangeRequestUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationPendingChangeRequestArchivedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationPendingChangeRequestArchivedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationPendingChangeRequestArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationPendingChangeRequestArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationPendingChangeRequestArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationPendingChangeRequestArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Cbc`."""
  cbcsByCbcDataCreatedByAndCbcId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcFilter
  ): CcbcUserCbcsByCbcDataCreatedByAndCbcIdManyToManyConnection!

  """Reads and enables pagination through a set of `Cbc`."""
  cbcsByCbcDataCreatedByAndProjectNumber(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcFilter
  ): CcbcUserCbcsByCbcDataCreatedByAndProjectNumberManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcDataCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcDataCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcDataCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcDataCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Cbc`."""
  cbcsByCbcDataUpdatedByAndCbcId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcFilter
  ): CcbcUserCbcsByCbcDataUpdatedByAndCbcIdManyToManyConnection!

  """Reads and enables pagination through a set of `Cbc`."""
  cbcsByCbcDataUpdatedByAndProjectNumber(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcFilter
  ): CcbcUserCbcsByCbcDataUpdatedByAndProjectNumberManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcDataUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcDataUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcDataUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcDataUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Cbc`."""
  cbcsByCbcDataArchivedByAndCbcId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcFilter
  ): CcbcUserCbcsByCbcDataArchivedByAndCbcIdManyToManyConnection!

  """Reads and enables pagination through a set of `Cbc`."""
  cbcsByCbcDataArchivedByAndProjectNumber(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcFilter
  ): CcbcUserCbcsByCbcDataArchivedByAndProjectNumberManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcDataArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcDataArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcDataArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcDataArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Cbc`."""
  cbcsByCbcApplicationPendingChangeRequestCreatedByAndCbcId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcFilter
  ): CcbcUserCbcsByCbcApplicationPendingChangeRequestCreatedByAndCbcIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcApplicationPendingChangeRequestCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcApplicationPendingChangeRequestCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcApplicationPendingChangeRequestCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcApplicationPendingChangeRequestCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Cbc`."""
  cbcsByCbcApplicationPendingChangeRequestUpdatedByAndCbcId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcFilter
  ): CcbcUserCbcsByCbcApplicationPendingChangeRequestUpdatedByAndCbcIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcApplicationPendingChangeRequestUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcApplicationPendingChangeRequestUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcApplicationPendingChangeRequestUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcApplicationPendingChangeRequestUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Cbc`."""
  cbcsByCbcApplicationPendingChangeRequestArchivedByAndCbcId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcFilter
  ): CcbcUserCbcsByCbcApplicationPendingChangeRequestArchivedByAndCbcIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcApplicationPendingChangeRequestArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcApplicationPendingChangeRequestArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcApplicationPendingChangeRequestArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcApplicationPendingChangeRequestArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByCbcDataChangeReasonCreatedByAndCbcDataId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CcbcUserCbcDataByCbcDataChangeReasonCreatedByAndCbcDataIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcDataChangeReasonCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcDataChangeReasonCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcDataChangeReasonCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcDataChangeReasonCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByCbcDataChangeReasonUpdatedByAndCbcDataId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CcbcUserCbcDataByCbcDataChangeReasonUpdatedByAndCbcDataIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcDataChangeReasonUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcDataChangeReasonUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcDataChangeReasonUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcDataChangeReasonUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByCbcDataChangeReasonArchivedByAndCbcDataId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CcbcUserCbcDataByCbcDataChangeReasonArchivedByAndCbcDataIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcDataChangeReasonArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcDataChangeReasonArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcDataChangeReasonArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcDataChangeReasonArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCommunitiesSourceDataCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCommunitiesSourceDataCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCommunitiesSourceDataCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCommunitiesSourceDataCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCommunitiesSourceDataUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCommunitiesSourceDataUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCommunitiesSourceDataUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCommunitiesSourceDataUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCommunitiesSourceDataArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCommunitiesSourceDataArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCommunitiesSourceDataArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCommunitiesSourceDataArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Cbc`."""
  cbcsByCbcProjectCommunityCreatedByAndCbcId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcFilter
  ): CcbcUserCbcsByCbcProjectCommunityCreatedByAndCbcIdManyToManyConnection!

  """Reads and enables pagination through a set of `CommunitiesSourceData`."""
  communitiesSourceDataByCbcProjectCommunityCreatedByAndCommunitiesSourceDataId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CommunitiesSourceData`."""
    orderBy: [CommunitiesSourceDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommunitiesSourceDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommunitiesSourceDataFilter
  ): CcbcUserCommunitiesSourceDataByCbcProjectCommunityCreatedByAndCommunitiesSourceDataIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcProjectCommunityCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcProjectCommunityCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcProjectCommunityCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcProjectCommunityCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Cbc`."""
  cbcsByCbcProjectCommunityUpdatedByAndCbcId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcFilter
  ): CcbcUserCbcsByCbcProjectCommunityUpdatedByAndCbcIdManyToManyConnection!

  """Reads and enables pagination through a set of `CommunitiesSourceData`."""
  communitiesSourceDataByCbcProjectCommunityUpdatedByAndCommunitiesSourceDataId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CommunitiesSourceData`."""
    orderBy: [CommunitiesSourceDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommunitiesSourceDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommunitiesSourceDataFilter
  ): CcbcUserCommunitiesSourceDataByCbcProjectCommunityUpdatedByAndCommunitiesSourceDataIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcProjectCommunityUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcProjectCommunityUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcProjectCommunityUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcProjectCommunityUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Cbc`."""
  cbcsByCbcProjectCommunityArchivedByAndCbcId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcFilter
  ): CcbcUserCbcsByCbcProjectCommunityArchivedByAndCbcIdManyToManyConnection!

  """Reads and enables pagination through a set of `CommunitiesSourceData`."""
  communitiesSourceDataByCbcProjectCommunityArchivedByAndCommunitiesSourceDataId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CommunitiesSourceData`."""
    orderBy: [CommunitiesSourceDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommunitiesSourceDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommunitiesSourceDataFilter
  ): CcbcUserCommunitiesSourceDataByCbcProjectCommunityArchivedByAndCommunitiesSourceDataIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcProjectCommunityArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcProjectCommunityArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcProjectCommunityArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByCbcProjectCommunityArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationAnnouncedCreatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationAnnouncedCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnnouncedCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationAnnouncedCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnnouncedCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationAnnouncedCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationAnnouncedUpdatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationAnnouncedUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnnouncedUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationAnnouncedUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnnouncedUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationAnnouncedUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationAnnouncedArchivedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): CcbcUserApplicationsByApplicationAnnouncedArchivedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnnouncedArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationAnnouncedArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnnouncedArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUserCcbcUsersByApplicationAnnouncedArchivedByAndUpdatedByManyToManyConnection!
}

"""A connection to a list of `CcbcUser` values."""
type CcbcUsersConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser` and cursor to aid in pagination.
  """
  edges: [CcbcUsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection."""
type CcbcUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `CcbcUser`."""
enum CcbcUsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SESSION_SUB_ASC
  SESSION_SUB_DESC
  GIVEN_NAME_ASC
  GIVEN_NAME_DESC
  FAMILY_NAME_ASC
  FAMILY_NAME_DESC
  EMAIL_ADDRESS_ASC
  EMAIL_ADDRESS_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  EXTERNAL_ANALYST_ASC
  EXTERNAL_ANALYST_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CcbcUser` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CcbcUserCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `sessionSub` field."""
  sessionSub: String

  """Checks for equality with the object’s `givenName` field."""
  givenName: String

  """Checks for equality with the object’s `familyName` field."""
  familyName: String

  """Checks for equality with the object’s `emailAddress` field."""
  emailAddress: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `externalAnalyst` field."""
  externalAnalyst: Boolean
}

"""
A filter to be used against `CcbcUser` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `sessionSub` field."""
  sessionSub: StringFilter

  """Filter by the object’s `givenName` field."""
  givenName: StringFilter

  """Filter by the object’s `familyName` field."""
  familyName: StringFilter

  """Filter by the object’s `emailAddress` field."""
  emailAddress: StringFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `externalAnalyst` field."""
  externalAnalyst: BooleanFilter

  """Filter by the object’s `ccbcUsersByCreatedBy` relation."""
  ccbcUsersByCreatedBy: CcbcUserToManyCcbcUserFilter

  """Some related `ccbcUsersByCreatedBy` exist."""
  ccbcUsersByCreatedByExist: Boolean

  """Filter by the object’s `ccbcUsersByUpdatedBy` relation."""
  ccbcUsersByUpdatedBy: CcbcUserToManyCcbcUserFilter

  """Some related `ccbcUsersByUpdatedBy` exist."""
  ccbcUsersByUpdatedByExist: Boolean

  """Filter by the object’s `ccbcUsersByArchivedBy` relation."""
  ccbcUsersByArchivedBy: CcbcUserToManyCcbcUserFilter

  """Some related `ccbcUsersByArchivedBy` exist."""
  ccbcUsersByArchivedByExist: Boolean

  """Filter by the object’s `intakesByCreatedBy` relation."""
  intakesByCreatedBy: CcbcUserToManyIntakeFilter

  """Some related `intakesByCreatedBy` exist."""
  intakesByCreatedByExist: Boolean

  """Filter by the object’s `intakesByUpdatedBy` relation."""
  intakesByUpdatedBy: CcbcUserToManyIntakeFilter

  """Some related `intakesByUpdatedBy` exist."""
  intakesByUpdatedByExist: Boolean

  """Filter by the object’s `intakesByArchivedBy` relation."""
  intakesByArchivedBy: CcbcUserToManyIntakeFilter

  """Some related `intakesByArchivedBy` exist."""
  intakesByArchivedByExist: Boolean

  """Filter by the object’s `applicationsByCreatedBy` relation."""
  applicationsByCreatedBy: CcbcUserToManyApplicationFilter

  """Some related `applicationsByCreatedBy` exist."""
  applicationsByCreatedByExist: Boolean

  """Filter by the object’s `applicationsByUpdatedBy` relation."""
  applicationsByUpdatedBy: CcbcUserToManyApplicationFilter

  """Some related `applicationsByUpdatedBy` exist."""
  applicationsByUpdatedByExist: Boolean

  """Filter by the object’s `applicationsByArchivedBy` relation."""
  applicationsByArchivedBy: CcbcUserToManyApplicationFilter

  """Some related `applicationsByArchivedBy` exist."""
  applicationsByArchivedByExist: Boolean

  """Filter by the object’s `applicationStatusesByCreatedBy` relation."""
  applicationStatusesByCreatedBy: CcbcUserToManyApplicationStatusFilter

  """Some related `applicationStatusesByCreatedBy` exist."""
  applicationStatusesByCreatedByExist: Boolean

  """Filter by the object’s `applicationStatusesByArchivedBy` relation."""
  applicationStatusesByArchivedBy: CcbcUserToManyApplicationStatusFilter

  """Some related `applicationStatusesByArchivedBy` exist."""
  applicationStatusesByArchivedByExist: Boolean

  """Filter by the object’s `applicationStatusesByUpdatedBy` relation."""
  applicationStatusesByUpdatedBy: CcbcUserToManyApplicationStatusFilter

  """Some related `applicationStatusesByUpdatedBy` exist."""
  applicationStatusesByUpdatedByExist: Boolean

  """Filter by the object’s `attachmentsByCreatedBy` relation."""
  attachmentsByCreatedBy: CcbcUserToManyAttachmentFilter

  """Some related `attachmentsByCreatedBy` exist."""
  attachmentsByCreatedByExist: Boolean

  """Filter by the object’s `attachmentsByUpdatedBy` relation."""
  attachmentsByUpdatedBy: CcbcUserToManyAttachmentFilter

  """Some related `attachmentsByUpdatedBy` exist."""
  attachmentsByUpdatedByExist: Boolean

  """Filter by the object’s `attachmentsByArchivedBy` relation."""
  attachmentsByArchivedBy: CcbcUserToManyAttachmentFilter

  """Some related `attachmentsByArchivedBy` exist."""
  attachmentsByArchivedByExist: Boolean

  """Filter by the object’s `formDataByCreatedBy` relation."""
  formDataByCreatedBy: CcbcUserToManyFormDataFilter

  """Some related `formDataByCreatedBy` exist."""
  formDataByCreatedByExist: Boolean

  """Filter by the object’s `formDataByUpdatedBy` relation."""
  formDataByUpdatedBy: CcbcUserToManyFormDataFilter

  """Some related `formDataByUpdatedBy` exist."""
  formDataByUpdatedByExist: Boolean

  """Filter by the object’s `formDataByArchivedBy` relation."""
  formDataByArchivedBy: CcbcUserToManyFormDataFilter

  """Some related `formDataByArchivedBy` exist."""
  formDataByArchivedByExist: Boolean

  """Filter by the object’s `analystsByCreatedBy` relation."""
  analystsByCreatedBy: CcbcUserToManyAnalystFilter

  """Some related `analystsByCreatedBy` exist."""
  analystsByCreatedByExist: Boolean

  """Filter by the object’s `analystsByUpdatedBy` relation."""
  analystsByUpdatedBy: CcbcUserToManyAnalystFilter

  """Some related `analystsByUpdatedBy` exist."""
  analystsByUpdatedByExist: Boolean

  """Filter by the object’s `analystsByArchivedBy` relation."""
  analystsByArchivedBy: CcbcUserToManyAnalystFilter

  """Some related `analystsByArchivedBy` exist."""
  analystsByArchivedByExist: Boolean

  """Filter by the object’s `applicationAnalystLeadsByCreatedBy` relation."""
  applicationAnalystLeadsByCreatedBy: CcbcUserToManyApplicationAnalystLeadFilter

  """Some related `applicationAnalystLeadsByCreatedBy` exist."""
  applicationAnalystLeadsByCreatedByExist: Boolean

  """Filter by the object’s `applicationAnalystLeadsByUpdatedBy` relation."""
  applicationAnalystLeadsByUpdatedBy: CcbcUserToManyApplicationAnalystLeadFilter

  """Some related `applicationAnalystLeadsByUpdatedBy` exist."""
  applicationAnalystLeadsByUpdatedByExist: Boolean

  """Filter by the object’s `applicationAnalystLeadsByArchivedBy` relation."""
  applicationAnalystLeadsByArchivedBy: CcbcUserToManyApplicationAnalystLeadFilter

  """Some related `applicationAnalystLeadsByArchivedBy` exist."""
  applicationAnalystLeadsByArchivedByExist: Boolean

  """Filter by the object’s `rfiDataByCreatedBy` relation."""
  rfiDataByCreatedBy: CcbcUserToManyRfiDataFilter

  """Some related `rfiDataByCreatedBy` exist."""
  rfiDataByCreatedByExist: Boolean

  """Filter by the object’s `rfiDataByUpdatedBy` relation."""
  rfiDataByUpdatedBy: CcbcUserToManyRfiDataFilter

  """Some related `rfiDataByUpdatedBy` exist."""
  rfiDataByUpdatedByExist: Boolean

  """Filter by the object’s `rfiDataByArchivedBy` relation."""
  rfiDataByArchivedBy: CcbcUserToManyRfiDataFilter

  """Some related `rfiDataByArchivedBy` exist."""
  rfiDataByArchivedByExist: Boolean

  """Filter by the object’s `assessmentDataByCreatedBy` relation."""
  assessmentDataByCreatedBy: CcbcUserToManyAssessmentDataFilter

  """Some related `assessmentDataByCreatedBy` exist."""
  assessmentDataByCreatedByExist: Boolean

  """Filter by the object’s `assessmentDataByUpdatedBy` relation."""
  assessmentDataByUpdatedBy: CcbcUserToManyAssessmentDataFilter

  """Some related `assessmentDataByUpdatedBy` exist."""
  assessmentDataByUpdatedByExist: Boolean

  """Filter by the object’s `assessmentDataByArchivedBy` relation."""
  assessmentDataByArchivedBy: CcbcUserToManyAssessmentDataFilter

  """Some related `assessmentDataByArchivedBy` exist."""
  assessmentDataByArchivedByExist: Boolean

  """Filter by the object’s `applicationPackagesByCreatedBy` relation."""
  applicationPackagesByCreatedBy: CcbcUserToManyApplicationPackageFilter

  """Some related `applicationPackagesByCreatedBy` exist."""
  applicationPackagesByCreatedByExist: Boolean

  """Filter by the object’s `applicationPackagesByUpdatedBy` relation."""
  applicationPackagesByUpdatedBy: CcbcUserToManyApplicationPackageFilter

  """Some related `applicationPackagesByUpdatedBy` exist."""
  applicationPackagesByUpdatedByExist: Boolean

  """Filter by the object’s `applicationPackagesByArchivedBy` relation."""
  applicationPackagesByArchivedBy: CcbcUserToManyApplicationPackageFilter

  """Some related `applicationPackagesByArchivedBy` exist."""
  applicationPackagesByArchivedByExist: Boolean

  """Filter by the object’s `recordVersionsByCreatedBy` relation."""
  recordVersionsByCreatedBy: CcbcUserToManyRecordVersionFilter

  """Some related `recordVersionsByCreatedBy` exist."""
  recordVersionsByCreatedByExist: Boolean

  """Filter by the object’s `conditionalApprovalDataByCreatedBy` relation."""
  conditionalApprovalDataByCreatedBy: CcbcUserToManyConditionalApprovalDataFilter

  """Some related `conditionalApprovalDataByCreatedBy` exist."""
  conditionalApprovalDataByCreatedByExist: Boolean

  """Filter by the object’s `conditionalApprovalDataByUpdatedBy` relation."""
  conditionalApprovalDataByUpdatedBy: CcbcUserToManyConditionalApprovalDataFilter

  """Some related `conditionalApprovalDataByUpdatedBy` exist."""
  conditionalApprovalDataByUpdatedByExist: Boolean

  """Filter by the object’s `conditionalApprovalDataByArchivedBy` relation."""
  conditionalApprovalDataByArchivedBy: CcbcUserToManyConditionalApprovalDataFilter

  """Some related `conditionalApprovalDataByArchivedBy` exist."""
  conditionalApprovalDataByArchivedByExist: Boolean

  """Filter by the object’s `gisDataByCreatedBy` relation."""
  gisDataByCreatedBy: CcbcUserToManyGisDataFilter

  """Some related `gisDataByCreatedBy` exist."""
  gisDataByCreatedByExist: Boolean

  """Filter by the object’s `gisDataByUpdatedBy` relation."""
  gisDataByUpdatedBy: CcbcUserToManyGisDataFilter

  """Some related `gisDataByUpdatedBy` exist."""
  gisDataByUpdatedByExist: Boolean

  """Filter by the object’s `gisDataByArchivedBy` relation."""
  gisDataByArchivedBy: CcbcUserToManyGisDataFilter

  """Some related `gisDataByArchivedBy` exist."""
  gisDataByArchivedByExist: Boolean

  """Filter by the object’s `applicationGisDataByCreatedBy` relation."""
  applicationGisDataByCreatedBy: CcbcUserToManyApplicationGisDataFilter

  """Some related `applicationGisDataByCreatedBy` exist."""
  applicationGisDataByCreatedByExist: Boolean

  """Filter by the object’s `applicationGisDataByUpdatedBy` relation."""
  applicationGisDataByUpdatedBy: CcbcUserToManyApplicationGisDataFilter

  """Some related `applicationGisDataByUpdatedBy` exist."""
  applicationGisDataByUpdatedByExist: Boolean

  """Filter by the object’s `applicationGisDataByArchivedBy` relation."""
  applicationGisDataByArchivedBy: CcbcUserToManyApplicationGisDataFilter

  """Some related `applicationGisDataByArchivedBy` exist."""
  applicationGisDataByArchivedByExist: Boolean

  """Filter by the object’s `announcementsByCreatedBy` relation."""
  announcementsByCreatedBy: CcbcUserToManyAnnouncementFilter

  """Some related `announcementsByCreatedBy` exist."""
  announcementsByCreatedByExist: Boolean

  """Filter by the object’s `announcementsByUpdatedBy` relation."""
  announcementsByUpdatedBy: CcbcUserToManyAnnouncementFilter

  """Some related `announcementsByUpdatedBy` exist."""
  announcementsByUpdatedByExist: Boolean

  """Filter by the object’s `announcementsByArchivedBy` relation."""
  announcementsByArchivedBy: CcbcUserToManyAnnouncementFilter

  """Some related `announcementsByArchivedBy` exist."""
  announcementsByArchivedByExist: Boolean

  """Filter by the object’s `applicationAnnouncementsByCreatedBy` relation."""
  applicationAnnouncementsByCreatedBy: CcbcUserToManyApplicationAnnouncementFilter

  """Some related `applicationAnnouncementsByCreatedBy` exist."""
  applicationAnnouncementsByCreatedByExist: Boolean

  """Filter by the object’s `applicationAnnouncementsByUpdatedBy` relation."""
  applicationAnnouncementsByUpdatedBy: CcbcUserToManyApplicationAnnouncementFilter

  """Some related `applicationAnnouncementsByUpdatedBy` exist."""
  applicationAnnouncementsByUpdatedByExist: Boolean

  """
  Filter by the object’s `applicationAnnouncementsByArchivedBy` relation.
  """
  applicationAnnouncementsByArchivedBy: CcbcUserToManyApplicationAnnouncementFilter

  """Some related `applicationAnnouncementsByArchivedBy` exist."""
  applicationAnnouncementsByArchivedByExist: Boolean

  """
  Filter by the object’s `applicationGisAssessmentHhsByCreatedBy` relation.
  """
  applicationGisAssessmentHhsByCreatedBy: CcbcUserToManyApplicationGisAssessmentHhFilter

  """Some related `applicationGisAssessmentHhsByCreatedBy` exist."""
  applicationGisAssessmentHhsByCreatedByExist: Boolean

  """
  Filter by the object’s `applicationGisAssessmentHhsByUpdatedBy` relation.
  """
  applicationGisAssessmentHhsByUpdatedBy: CcbcUserToManyApplicationGisAssessmentHhFilter

  """Some related `applicationGisAssessmentHhsByUpdatedBy` exist."""
  applicationGisAssessmentHhsByUpdatedByExist: Boolean

  """
  Filter by the object’s `applicationGisAssessmentHhsByArchivedBy` relation.
  """
  applicationGisAssessmentHhsByArchivedBy: CcbcUserToManyApplicationGisAssessmentHhFilter

  """Some related `applicationGisAssessmentHhsByArchivedBy` exist."""
  applicationGisAssessmentHhsByArchivedByExist: Boolean

  """Filter by the object’s `applicationSowDataByCreatedBy` relation."""
  applicationSowDataByCreatedBy: CcbcUserToManyApplicationSowDataFilter

  """Some related `applicationSowDataByCreatedBy` exist."""
  applicationSowDataByCreatedByExist: Boolean

  """Filter by the object’s `applicationSowDataByUpdatedBy` relation."""
  applicationSowDataByUpdatedBy: CcbcUserToManyApplicationSowDataFilter

  """Some related `applicationSowDataByUpdatedBy` exist."""
  applicationSowDataByUpdatedByExist: Boolean

  """Filter by the object’s `applicationSowDataByArchivedBy` relation."""
  applicationSowDataByArchivedBy: CcbcUserToManyApplicationSowDataFilter

  """Some related `applicationSowDataByArchivedBy` exist."""
  applicationSowDataByArchivedByExist: Boolean

  """Filter by the object’s `sowTab2SByCreatedBy` relation."""
  sowTab2SByCreatedBy: CcbcUserToManySowTab2Filter

  """Some related `sowTab2SByCreatedBy` exist."""
  sowTab2SByCreatedByExist: Boolean

  """Filter by the object’s `sowTab2SByUpdatedBy` relation."""
  sowTab2SByUpdatedBy: CcbcUserToManySowTab2Filter

  """Some related `sowTab2SByUpdatedBy` exist."""
  sowTab2SByUpdatedByExist: Boolean

  """Filter by the object’s `sowTab2SByArchivedBy` relation."""
  sowTab2SByArchivedBy: CcbcUserToManySowTab2Filter

  """Some related `sowTab2SByArchivedBy` exist."""
  sowTab2SByArchivedByExist: Boolean

  """Filter by the object’s `sowTab1SByCreatedBy` relation."""
  sowTab1SByCreatedBy: CcbcUserToManySowTab1Filter

  """Some related `sowTab1SByCreatedBy` exist."""
  sowTab1SByCreatedByExist: Boolean

  """Filter by the object’s `sowTab1SByUpdatedBy` relation."""
  sowTab1SByUpdatedBy: CcbcUserToManySowTab1Filter

  """Some related `sowTab1SByUpdatedBy` exist."""
  sowTab1SByUpdatedByExist: Boolean

  """Filter by the object’s `sowTab1SByArchivedBy` relation."""
  sowTab1SByArchivedBy: CcbcUserToManySowTab1Filter

  """Some related `sowTab1SByArchivedBy` exist."""
  sowTab1SByArchivedByExist: Boolean

  """Filter by the object’s `projectInformationDataByCreatedBy` relation."""
  projectInformationDataByCreatedBy: CcbcUserToManyProjectInformationDataFilter

  """Some related `projectInformationDataByCreatedBy` exist."""
  projectInformationDataByCreatedByExist: Boolean

  """Filter by the object’s `projectInformationDataByUpdatedBy` relation."""
  projectInformationDataByUpdatedBy: CcbcUserToManyProjectInformationDataFilter

  """Some related `projectInformationDataByUpdatedBy` exist."""
  projectInformationDataByUpdatedByExist: Boolean

  """Filter by the object’s `projectInformationDataByArchivedBy` relation."""
  projectInformationDataByArchivedBy: CcbcUserToManyProjectInformationDataFilter

  """Some related `projectInformationDataByArchivedBy` exist."""
  projectInformationDataByArchivedByExist: Boolean

  """Filter by the object’s `sowTab7SByCreatedBy` relation."""
  sowTab7SByCreatedBy: CcbcUserToManySowTab7Filter

  """Some related `sowTab7SByCreatedBy` exist."""
  sowTab7SByCreatedByExist: Boolean

  """Filter by the object’s `sowTab7SByUpdatedBy` relation."""
  sowTab7SByUpdatedBy: CcbcUserToManySowTab7Filter

  """Some related `sowTab7SByUpdatedBy` exist."""
  sowTab7SByUpdatedByExist: Boolean

  """Filter by the object’s `sowTab7SByArchivedBy` relation."""
  sowTab7SByArchivedBy: CcbcUserToManySowTab7Filter

  """Some related `sowTab7SByArchivedBy` exist."""
  sowTab7SByArchivedByExist: Boolean

  """Filter by the object’s `sowTab8SByCreatedBy` relation."""
  sowTab8SByCreatedBy: CcbcUserToManySowTab8Filter

  """Some related `sowTab8SByCreatedBy` exist."""
  sowTab8SByCreatedByExist: Boolean

  """Filter by the object’s `sowTab8SByUpdatedBy` relation."""
  sowTab8SByUpdatedBy: CcbcUserToManySowTab8Filter

  """Some related `sowTab8SByUpdatedBy` exist."""
  sowTab8SByUpdatedByExist: Boolean

  """Filter by the object’s `sowTab8SByArchivedBy` relation."""
  sowTab8SByArchivedBy: CcbcUserToManySowTab8Filter

  """Some related `sowTab8SByArchivedBy` exist."""
  sowTab8SByArchivedByExist: Boolean

  """Filter by the object’s `changeRequestDataByCreatedBy` relation."""
  changeRequestDataByCreatedBy: CcbcUserToManyChangeRequestDataFilter

  """Some related `changeRequestDataByCreatedBy` exist."""
  changeRequestDataByCreatedByExist: Boolean

  """Filter by the object’s `changeRequestDataByUpdatedBy` relation."""
  changeRequestDataByUpdatedBy: CcbcUserToManyChangeRequestDataFilter

  """Some related `changeRequestDataByUpdatedBy` exist."""
  changeRequestDataByUpdatedByExist: Boolean

  """Filter by the object’s `changeRequestDataByArchivedBy` relation."""
  changeRequestDataByArchivedBy: CcbcUserToManyChangeRequestDataFilter

  """Some related `changeRequestDataByArchivedBy` exist."""
  changeRequestDataByArchivedByExist: Boolean

  """
  Filter by the object’s `applicationCommunityProgressReportDataByCreatedBy` relation.
  """
  applicationCommunityProgressReportDataByCreatedBy: CcbcUserToManyApplicationCommunityProgressReportDataFilter

  """
  Some related `applicationCommunityProgressReportDataByCreatedBy` exist.
  """
  applicationCommunityProgressReportDataByCreatedByExist: Boolean

  """
  Filter by the object’s `applicationCommunityProgressReportDataByUpdatedBy` relation.
  """
  applicationCommunityProgressReportDataByUpdatedBy: CcbcUserToManyApplicationCommunityProgressReportDataFilter

  """
  Some related `applicationCommunityProgressReportDataByUpdatedBy` exist.
  """
  applicationCommunityProgressReportDataByUpdatedByExist: Boolean

  """
  Filter by the object’s `applicationCommunityProgressReportDataByArchivedBy` relation.
  """
  applicationCommunityProgressReportDataByArchivedBy: CcbcUserToManyApplicationCommunityProgressReportDataFilter

  """
  Some related `applicationCommunityProgressReportDataByArchivedBy` exist.
  """
  applicationCommunityProgressReportDataByArchivedByExist: Boolean

  """
  Filter by the object’s `applicationCommunityReportExcelDataByCreatedBy` relation.
  """
  applicationCommunityReportExcelDataByCreatedBy: CcbcUserToManyApplicationCommunityReportExcelDataFilter

  """Some related `applicationCommunityReportExcelDataByCreatedBy` exist."""
  applicationCommunityReportExcelDataByCreatedByExist: Boolean

  """
  Filter by the object’s `applicationCommunityReportExcelDataByUpdatedBy` relation.
  """
  applicationCommunityReportExcelDataByUpdatedBy: CcbcUserToManyApplicationCommunityReportExcelDataFilter

  """Some related `applicationCommunityReportExcelDataByUpdatedBy` exist."""
  applicationCommunityReportExcelDataByUpdatedByExist: Boolean

  """
  Filter by the object’s `applicationCommunityReportExcelDataByArchivedBy` relation.
  """
  applicationCommunityReportExcelDataByArchivedBy: CcbcUserToManyApplicationCommunityReportExcelDataFilter

  """Some related `applicationCommunityReportExcelDataByArchivedBy` exist."""
  applicationCommunityReportExcelDataByArchivedByExist: Boolean

  """Filter by the object’s `applicationClaimsDataByCreatedBy` relation."""
  applicationClaimsDataByCreatedBy: CcbcUserToManyApplicationClaimsDataFilter

  """Some related `applicationClaimsDataByCreatedBy` exist."""
  applicationClaimsDataByCreatedByExist: Boolean

  """Filter by the object’s `applicationClaimsDataByUpdatedBy` relation."""
  applicationClaimsDataByUpdatedBy: CcbcUserToManyApplicationClaimsDataFilter

  """Some related `applicationClaimsDataByUpdatedBy` exist."""
  applicationClaimsDataByUpdatedByExist: Boolean

  """Filter by the object’s `applicationClaimsDataByArchivedBy` relation."""
  applicationClaimsDataByArchivedBy: CcbcUserToManyApplicationClaimsDataFilter

  """Some related `applicationClaimsDataByArchivedBy` exist."""
  applicationClaimsDataByArchivedByExist: Boolean

  """
  Filter by the object’s `applicationClaimsExcelDataByCreatedBy` relation.
  """
  applicationClaimsExcelDataByCreatedBy: CcbcUserToManyApplicationClaimsExcelDataFilter

  """Some related `applicationClaimsExcelDataByCreatedBy` exist."""
  applicationClaimsExcelDataByCreatedByExist: Boolean

  """
  Filter by the object’s `applicationClaimsExcelDataByUpdatedBy` relation.
  """
  applicationClaimsExcelDataByUpdatedBy: CcbcUserToManyApplicationClaimsExcelDataFilter

  """Some related `applicationClaimsExcelDataByUpdatedBy` exist."""
  applicationClaimsExcelDataByUpdatedByExist: Boolean

  """
  Filter by the object’s `applicationClaimsExcelDataByArchivedBy` relation.
  """
  applicationClaimsExcelDataByArchivedBy: CcbcUserToManyApplicationClaimsExcelDataFilter

  """Some related `applicationClaimsExcelDataByArchivedBy` exist."""
  applicationClaimsExcelDataByArchivedByExist: Boolean

  """Filter by the object’s `applicationMilestoneDataByCreatedBy` relation."""
  applicationMilestoneDataByCreatedBy: CcbcUserToManyApplicationMilestoneDataFilter

  """Some related `applicationMilestoneDataByCreatedBy` exist."""
  applicationMilestoneDataByCreatedByExist: Boolean

  """Filter by the object’s `applicationMilestoneDataByUpdatedBy` relation."""
  applicationMilestoneDataByUpdatedBy: CcbcUserToManyApplicationMilestoneDataFilter

  """Some related `applicationMilestoneDataByUpdatedBy` exist."""
  applicationMilestoneDataByUpdatedByExist: Boolean

  """
  Filter by the object’s `applicationMilestoneDataByArchivedBy` relation.
  """
  applicationMilestoneDataByArchivedBy: CcbcUserToManyApplicationMilestoneDataFilter

  """Some related `applicationMilestoneDataByArchivedBy` exist."""
  applicationMilestoneDataByArchivedByExist: Boolean

  """
  Filter by the object’s `applicationMilestoneExcelDataByCreatedBy` relation.
  """
  applicationMilestoneExcelDataByCreatedBy: CcbcUserToManyApplicationMilestoneExcelDataFilter

  """Some related `applicationMilestoneExcelDataByCreatedBy` exist."""
  applicationMilestoneExcelDataByCreatedByExist: Boolean

  """
  Filter by the object’s `applicationMilestoneExcelDataByUpdatedBy` relation.
  """
  applicationMilestoneExcelDataByUpdatedBy: CcbcUserToManyApplicationMilestoneExcelDataFilter

  """Some related `applicationMilestoneExcelDataByUpdatedBy` exist."""
  applicationMilestoneExcelDataByUpdatedByExist: Boolean

  """
  Filter by the object’s `applicationMilestoneExcelDataByArchivedBy` relation.
  """
  applicationMilestoneExcelDataByArchivedBy: CcbcUserToManyApplicationMilestoneExcelDataFilter

  """Some related `applicationMilestoneExcelDataByArchivedBy` exist."""
  applicationMilestoneExcelDataByArchivedByExist: Boolean

  """Filter by the object’s `cbcProjectsByCreatedBy` relation."""
  cbcProjectsByCreatedBy: CcbcUserToManyCbcProjectFilter

  """Some related `cbcProjectsByCreatedBy` exist."""
  cbcProjectsByCreatedByExist: Boolean

  """Filter by the object’s `cbcProjectsByUpdatedBy` relation."""
  cbcProjectsByUpdatedBy: CcbcUserToManyCbcProjectFilter

  """Some related `cbcProjectsByUpdatedBy` exist."""
  cbcProjectsByUpdatedByExist: Boolean

  """Filter by the object’s `cbcProjectsByArchivedBy` relation."""
  cbcProjectsByArchivedBy: CcbcUserToManyCbcProjectFilter

  """Some related `cbcProjectsByArchivedBy` exist."""
  cbcProjectsByArchivedByExist: Boolean

  """
  Filter by the object’s `applicationInternalDescriptionsByCreatedBy` relation.
  """
  applicationInternalDescriptionsByCreatedBy: CcbcUserToManyApplicationInternalDescriptionFilter

  """Some related `applicationInternalDescriptionsByCreatedBy` exist."""
  applicationInternalDescriptionsByCreatedByExist: Boolean

  """
  Filter by the object’s `applicationInternalDescriptionsByUpdatedBy` relation.
  """
  applicationInternalDescriptionsByUpdatedBy: CcbcUserToManyApplicationInternalDescriptionFilter

  """Some related `applicationInternalDescriptionsByUpdatedBy` exist."""
  applicationInternalDescriptionsByUpdatedByExist: Boolean

  """
  Filter by the object’s `applicationInternalDescriptionsByArchivedBy` relation.
  """
  applicationInternalDescriptionsByArchivedBy: CcbcUserToManyApplicationInternalDescriptionFilter

  """Some related `applicationInternalDescriptionsByArchivedBy` exist."""
  applicationInternalDescriptionsByArchivedByExist: Boolean

  """Filter by the object’s `applicationProjectTypesByCreatedBy` relation."""
  applicationProjectTypesByCreatedBy: CcbcUserToManyApplicationProjectTypeFilter

  """Some related `applicationProjectTypesByCreatedBy` exist."""
  applicationProjectTypesByCreatedByExist: Boolean

  """Filter by the object’s `applicationProjectTypesByUpdatedBy` relation."""
  applicationProjectTypesByUpdatedBy: CcbcUserToManyApplicationProjectTypeFilter

  """Some related `applicationProjectTypesByUpdatedBy` exist."""
  applicationProjectTypesByUpdatedByExist: Boolean

  """Filter by the object’s `applicationProjectTypesByArchivedBy` relation."""
  applicationProjectTypesByArchivedBy: CcbcUserToManyApplicationProjectTypeFilter

  """Some related `applicationProjectTypesByArchivedBy` exist."""
  applicationProjectTypesByArchivedByExist: Boolean

  """Filter by the object’s `emailRecordsByCreatedBy` relation."""
  emailRecordsByCreatedBy: CcbcUserToManyEmailRecordFilter

  """Some related `emailRecordsByCreatedBy` exist."""
  emailRecordsByCreatedByExist: Boolean

  """Filter by the object’s `emailRecordsByUpdatedBy` relation."""
  emailRecordsByUpdatedBy: CcbcUserToManyEmailRecordFilter

  """Some related `emailRecordsByUpdatedBy` exist."""
  emailRecordsByUpdatedByExist: Boolean

  """Filter by the object’s `emailRecordsByArchivedBy` relation."""
  emailRecordsByArchivedBy: CcbcUserToManyEmailRecordFilter

  """Some related `emailRecordsByArchivedBy` exist."""
  emailRecordsByArchivedByExist: Boolean

  """Filter by the object’s `notificationsByCreatedBy` relation."""
  notificationsByCreatedBy: CcbcUserToManyNotificationFilter

  """Some related `notificationsByCreatedBy` exist."""
  notificationsByCreatedByExist: Boolean

  """Filter by the object’s `notificationsByUpdatedBy` relation."""
  notificationsByUpdatedBy: CcbcUserToManyNotificationFilter

  """Some related `notificationsByUpdatedBy` exist."""
  notificationsByUpdatedByExist: Boolean

  """Filter by the object’s `notificationsByArchivedBy` relation."""
  notificationsByArchivedBy: CcbcUserToManyNotificationFilter

  """Some related `notificationsByArchivedBy` exist."""
  notificationsByArchivedByExist: Boolean

  """
  Filter by the object’s `applicationPendingChangeRequestsByCreatedBy` relation.
  """
  applicationPendingChangeRequestsByCreatedBy: CcbcUserToManyApplicationPendingChangeRequestFilter

  """Some related `applicationPendingChangeRequestsByCreatedBy` exist."""
  applicationPendingChangeRequestsByCreatedByExist: Boolean

  """
  Filter by the object’s `applicationPendingChangeRequestsByUpdatedBy` relation.
  """
  applicationPendingChangeRequestsByUpdatedBy: CcbcUserToManyApplicationPendingChangeRequestFilter

  """Some related `applicationPendingChangeRequestsByUpdatedBy` exist."""
  applicationPendingChangeRequestsByUpdatedByExist: Boolean

  """
  Filter by the object’s `applicationPendingChangeRequestsByArchivedBy` relation.
  """
  applicationPendingChangeRequestsByArchivedBy: CcbcUserToManyApplicationPendingChangeRequestFilter

  """Some related `applicationPendingChangeRequestsByArchivedBy` exist."""
  applicationPendingChangeRequestsByArchivedByExist: Boolean

  """Filter by the object’s `cbcsByCreatedBy` relation."""
  cbcsByCreatedBy: CcbcUserToManyCbcFilter

  """Some related `cbcsByCreatedBy` exist."""
  cbcsByCreatedByExist: Boolean

  """Filter by the object’s `cbcsByUpdatedBy` relation."""
  cbcsByUpdatedBy: CcbcUserToManyCbcFilter

  """Some related `cbcsByUpdatedBy` exist."""
  cbcsByUpdatedByExist: Boolean

  """Filter by the object’s `cbcsByArchivedBy` relation."""
  cbcsByArchivedBy: CcbcUserToManyCbcFilter

  """Some related `cbcsByArchivedBy` exist."""
  cbcsByArchivedByExist: Boolean

  """Filter by the object’s `cbcDataByCreatedBy` relation."""
  cbcDataByCreatedBy: CcbcUserToManyCbcDataFilter

  """Some related `cbcDataByCreatedBy` exist."""
  cbcDataByCreatedByExist: Boolean

  """Filter by the object’s `cbcDataByUpdatedBy` relation."""
  cbcDataByUpdatedBy: CcbcUserToManyCbcDataFilter

  """Some related `cbcDataByUpdatedBy` exist."""
  cbcDataByUpdatedByExist: Boolean

  """Filter by the object’s `cbcDataByArchivedBy` relation."""
  cbcDataByArchivedBy: CcbcUserToManyCbcDataFilter

  """Some related `cbcDataByArchivedBy` exist."""
  cbcDataByArchivedByExist: Boolean

  """
  Filter by the object’s `cbcApplicationPendingChangeRequestsByCreatedBy` relation.
  """
  cbcApplicationPendingChangeRequestsByCreatedBy: CcbcUserToManyCbcApplicationPendingChangeRequestFilter

  """Some related `cbcApplicationPendingChangeRequestsByCreatedBy` exist."""
  cbcApplicationPendingChangeRequestsByCreatedByExist: Boolean

  """
  Filter by the object’s `cbcApplicationPendingChangeRequestsByUpdatedBy` relation.
  """
  cbcApplicationPendingChangeRequestsByUpdatedBy: CcbcUserToManyCbcApplicationPendingChangeRequestFilter

  """Some related `cbcApplicationPendingChangeRequestsByUpdatedBy` exist."""
  cbcApplicationPendingChangeRequestsByUpdatedByExist: Boolean

  """
  Filter by the object’s `cbcApplicationPendingChangeRequestsByArchivedBy` relation.
  """
  cbcApplicationPendingChangeRequestsByArchivedBy: CcbcUserToManyCbcApplicationPendingChangeRequestFilter

  """Some related `cbcApplicationPendingChangeRequestsByArchivedBy` exist."""
  cbcApplicationPendingChangeRequestsByArchivedByExist: Boolean

  """Filter by the object’s `cbcDataChangeReasonsByCreatedBy` relation."""
  cbcDataChangeReasonsByCreatedBy: CcbcUserToManyCbcDataChangeReasonFilter

  """Some related `cbcDataChangeReasonsByCreatedBy` exist."""
  cbcDataChangeReasonsByCreatedByExist: Boolean

  """Filter by the object’s `cbcDataChangeReasonsByUpdatedBy` relation."""
  cbcDataChangeReasonsByUpdatedBy: CcbcUserToManyCbcDataChangeReasonFilter

  """Some related `cbcDataChangeReasonsByUpdatedBy` exist."""
  cbcDataChangeReasonsByUpdatedByExist: Boolean

  """Filter by the object’s `cbcDataChangeReasonsByArchivedBy` relation."""
  cbcDataChangeReasonsByArchivedBy: CcbcUserToManyCbcDataChangeReasonFilter

  """Some related `cbcDataChangeReasonsByArchivedBy` exist."""
  cbcDataChangeReasonsByArchivedByExist: Boolean

  """Filter by the object’s `communitiesSourceDataByCreatedBy` relation."""
  communitiesSourceDataByCreatedBy: CcbcUserToManyCommunitiesSourceDataFilter

  """Some related `communitiesSourceDataByCreatedBy` exist."""
  communitiesSourceDataByCreatedByExist: Boolean

  """Filter by the object’s `communitiesSourceDataByUpdatedBy` relation."""
  communitiesSourceDataByUpdatedBy: CcbcUserToManyCommunitiesSourceDataFilter

  """Some related `communitiesSourceDataByUpdatedBy` exist."""
  communitiesSourceDataByUpdatedByExist: Boolean

  """Filter by the object’s `communitiesSourceDataByArchivedBy` relation."""
  communitiesSourceDataByArchivedBy: CcbcUserToManyCommunitiesSourceDataFilter

  """Some related `communitiesSourceDataByArchivedBy` exist."""
  communitiesSourceDataByArchivedByExist: Boolean

  """Filter by the object’s `cbcProjectCommunitiesByCreatedBy` relation."""
  cbcProjectCommunitiesByCreatedBy: CcbcUserToManyCbcProjectCommunityFilter

  """Some related `cbcProjectCommunitiesByCreatedBy` exist."""
  cbcProjectCommunitiesByCreatedByExist: Boolean

  """Filter by the object’s `cbcProjectCommunitiesByUpdatedBy` relation."""
  cbcProjectCommunitiesByUpdatedBy: CcbcUserToManyCbcProjectCommunityFilter

  """Some related `cbcProjectCommunitiesByUpdatedBy` exist."""
  cbcProjectCommunitiesByUpdatedByExist: Boolean

  """Filter by the object’s `cbcProjectCommunitiesByArchivedBy` relation."""
  cbcProjectCommunitiesByArchivedBy: CcbcUserToManyCbcProjectCommunityFilter

  """Some related `cbcProjectCommunitiesByArchivedBy` exist."""
  cbcProjectCommunitiesByArchivedByExist: Boolean

  """Filter by the object’s `applicationAnnouncedsByCreatedBy` relation."""
  applicationAnnouncedsByCreatedBy: CcbcUserToManyApplicationAnnouncedFilter

  """Some related `applicationAnnouncedsByCreatedBy` exist."""
  applicationAnnouncedsByCreatedByExist: Boolean

  """Filter by the object’s `applicationAnnouncedsByUpdatedBy` relation."""
  applicationAnnouncedsByUpdatedBy: CcbcUserToManyApplicationAnnouncedFilter

  """Some related `applicationAnnouncedsByUpdatedBy` exist."""
  applicationAnnouncedsByUpdatedByExist: Boolean

  """Filter by the object’s `applicationAnnouncedsByArchivedBy` relation."""
  applicationAnnouncedsByArchivedBy: CcbcUserToManyApplicationAnnouncedFilter

  """Some related `applicationAnnouncedsByArchivedBy` exist."""
  applicationAnnouncedsByArchivedByExist: Boolean

  """Filter by the object’s `keycloakJwtsBySub` relation."""
  keycloakJwtsBySub: CcbcUserToManyKeycloakJwtFilter

  """Some related `keycloakJwtsBySub` exist."""
  keycloakJwtsBySubExist: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [CcbcUserFilter!]

  """Checks for any expressions in this list."""
  or: [CcbcUserFilter!]

  """Negates the expression."""
  not: CcbcUserFilter
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String
}

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """Not included in the specified list."""
  notIn: [Datetime!]

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """Not included in the specified list."""
  notIn: [Boolean!]

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean
}

"""
A filter to be used against many `CcbcUser` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyCcbcUserFilter {
  """
  Every related `CcbcUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CcbcUserFilter

  """
  Some related `CcbcUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CcbcUserFilter

  """
  No related `CcbcUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CcbcUserFilter
}

"""
A filter to be used against many `Intake` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyIntakeFilter {
  """
  Every related `Intake` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: IntakeFilter

  """
  Some related `Intake` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: IntakeFilter

  """
  No related `Intake` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: IntakeFilter
}

"""
A filter to be used against `Intake` object types. All fields are combined with a logical ‘and.’
"""
input IntakeFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `openTimestamp` field."""
  openTimestamp: DatetimeFilter

  """Filter by the object’s `closeTimestamp` field."""
  closeTimestamp: DatetimeFilter

  """Filter by the object’s `ccbcIntakeNumber` field."""
  ccbcIntakeNumber: IntFilter

  """Filter by the object’s `applicationNumberSeqName` field."""
  applicationNumberSeqName: StringFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `counterId` field."""
  counterId: IntFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `hidden` field."""
  hidden: BooleanFilter

  """Filter by the object’s `hiddenCode` field."""
  hiddenCode: UUIDFilter

  """Filter by the object’s `rollingIntake` field."""
  rollingIntake: BooleanFilter

  """Filter by the object’s `applicationsByIntakeId` relation."""
  applicationsByIntakeId: IntakeToManyApplicationFilter

  """Some related `applicationsByIntakeId` exist."""
  applicationsByIntakeIdExist: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Filter by the object’s `gaplessCounterByCounterId` relation."""
  gaplessCounterByCounterId: GaplessCounterFilter

  """A related `gaplessCounterByCounterId` exists."""
  gaplessCounterByCounterIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [IntakeFilter!]

  """Checks for any expressions in this list."""
  or: [IntakeFilter!]

  """Negates the expression."""
  not: IntakeFilter
}

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Included in the specified list."""
  in: [UUID!]

  """Not included in the specified list."""
  notIn: [UUID!]

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against many `Application` object types. All fields are combined with a logical ‘and.’
"""
input IntakeToManyApplicationFilter {
  """
  Every related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationFilter

  """
  Some related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationFilter

  """
  No related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationFilter
}

"""
A filter to be used against `Application` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `ccbcNumber` field."""
  ccbcNumber: StringFilter

  """Filter by the object’s `owner` field."""
  owner: StringFilter

  """Filter by the object’s `intakeId` field."""
  intakeId: IntFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `amendmentNumbers` field."""
  amendmentNumbers: StringFilter

  """Filter by the object’s `analystLead` field."""
  analystLead: StringFilter

  """Filter by the object’s `analystStatus` field."""
  analystStatus: StringFilter

  """Filter by the object’s `announced` field."""
  announced: BooleanFilter

  """Filter by the object’s `externalStatus` field."""
  externalStatus: StringFilter

  """Filter by the object’s `hasRfiOpen` field."""
  hasRfiOpen: BooleanFilter

  """Filter by the object’s `intakeNumber` field."""
  intakeNumber: IntFilter

  """Filter by the object’s `internalDescription` field."""
  internalDescription: StringFilter

  """Filter by the object’s `organizationName` field."""
  organizationName: StringFilter

  """Filter by the object’s `package` field."""
  package: IntFilter

  """Filter by the object’s `projectName` field."""
  projectName: StringFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `statusOrder` field."""
  statusOrder: IntFilter

  """Filter by the object’s `statusSortFilter` field."""
  statusSortFilter: StringFilter

  """Filter by the object’s `zone` field."""
  zone: IntFilter

  """Filter by the object’s `zones` field."""
  zones: IntListFilter

  """Filter by the object’s `applicationStatusesByApplicationId` relation."""
  applicationStatusesByApplicationId: ApplicationToManyApplicationStatusFilter

  """Some related `applicationStatusesByApplicationId` exist."""
  applicationStatusesByApplicationIdExist: Boolean

  """Filter by the object’s `attachmentsByApplicationId` relation."""
  attachmentsByApplicationId: ApplicationToManyAttachmentFilter

  """Some related `attachmentsByApplicationId` exist."""
  attachmentsByApplicationIdExist: Boolean

  """Filter by the object’s `applicationFormDataByApplicationId` relation."""
  applicationFormDataByApplicationId: ApplicationToManyApplicationFormDataFilter

  """Some related `applicationFormDataByApplicationId` exist."""
  applicationFormDataByApplicationIdExist: Boolean

  """
  Filter by the object’s `applicationAnalystLeadsByApplicationId` relation.
  """
  applicationAnalystLeadsByApplicationId: ApplicationToManyApplicationAnalystLeadFilter

  """Some related `applicationAnalystLeadsByApplicationId` exist."""
  applicationAnalystLeadsByApplicationIdExist: Boolean

  """Filter by the object’s `applicationRfiDataByApplicationId` relation."""
  applicationRfiDataByApplicationId: ApplicationToManyApplicationRfiDataFilter

  """Some related `applicationRfiDataByApplicationId` exist."""
  applicationRfiDataByApplicationIdExist: Boolean

  """Filter by the object’s `assessmentDataByApplicationId` relation."""
  assessmentDataByApplicationId: ApplicationToManyAssessmentDataFilter

  """Some related `assessmentDataByApplicationId` exist."""
  assessmentDataByApplicationIdExist: Boolean

  """Filter by the object’s `applicationPackagesByApplicationId` relation."""
  applicationPackagesByApplicationId: ApplicationToManyApplicationPackageFilter

  """Some related `applicationPackagesByApplicationId` exist."""
  applicationPackagesByApplicationIdExist: Boolean

  """
  Filter by the object’s `conditionalApprovalDataByApplicationId` relation.
  """
  conditionalApprovalDataByApplicationId: ApplicationToManyConditionalApprovalDataFilter

  """Some related `conditionalApprovalDataByApplicationId` exist."""
  conditionalApprovalDataByApplicationIdExist: Boolean

  """Filter by the object’s `applicationGisDataByApplicationId` relation."""
  applicationGisDataByApplicationId: ApplicationToManyApplicationGisDataFilter

  """Some related `applicationGisDataByApplicationId` exist."""
  applicationGisDataByApplicationIdExist: Boolean

  """
  Filter by the object’s `applicationAnnouncementsByApplicationId` relation.
  """
  applicationAnnouncementsByApplicationId: ApplicationToManyApplicationAnnouncementFilter

  """Some related `applicationAnnouncementsByApplicationId` exist."""
  applicationAnnouncementsByApplicationIdExist: Boolean

  """
  Filter by the object’s `applicationGisAssessmentHhsByApplicationId` relation.
  """
  applicationGisAssessmentHhsByApplicationId: ApplicationToManyApplicationGisAssessmentHhFilter

  """Some related `applicationGisAssessmentHhsByApplicationId` exist."""
  applicationGisAssessmentHhsByApplicationIdExist: Boolean

  """Filter by the object’s `applicationSowDataByApplicationId` relation."""
  applicationSowDataByApplicationId: ApplicationToManyApplicationSowDataFilter

  """Some related `applicationSowDataByApplicationId` exist."""
  applicationSowDataByApplicationIdExist: Boolean

  """
  Filter by the object’s `projectInformationDataByApplicationId` relation.
  """
  projectInformationDataByApplicationId: ApplicationToManyProjectInformationDataFilter

  """Some related `projectInformationDataByApplicationId` exist."""
  projectInformationDataByApplicationIdExist: Boolean

  """Filter by the object’s `changeRequestDataByApplicationId` relation."""
  changeRequestDataByApplicationId: ApplicationToManyChangeRequestDataFilter

  """Some related `changeRequestDataByApplicationId` exist."""
  changeRequestDataByApplicationIdExist: Boolean

  """
  Filter by the object’s `applicationCommunityProgressReportDataByApplicationId` relation.
  """
  applicationCommunityProgressReportDataByApplicationId: ApplicationToManyApplicationCommunityProgressReportDataFilter

  """
  Some related `applicationCommunityProgressReportDataByApplicationId` exist.
  """
  applicationCommunityProgressReportDataByApplicationIdExist: Boolean

  """
  Filter by the object’s `applicationCommunityReportExcelDataByApplicationId` relation.
  """
  applicationCommunityReportExcelDataByApplicationId: ApplicationToManyApplicationCommunityReportExcelDataFilter

  """
  Some related `applicationCommunityReportExcelDataByApplicationId` exist.
  """
  applicationCommunityReportExcelDataByApplicationIdExist: Boolean

  """
  Filter by the object’s `applicationClaimsDataByApplicationId` relation.
  """
  applicationClaimsDataByApplicationId: ApplicationToManyApplicationClaimsDataFilter

  """Some related `applicationClaimsDataByApplicationId` exist."""
  applicationClaimsDataByApplicationIdExist: Boolean

  """
  Filter by the object’s `applicationClaimsExcelDataByApplicationId` relation.
  """
  applicationClaimsExcelDataByApplicationId: ApplicationToManyApplicationClaimsExcelDataFilter

  """Some related `applicationClaimsExcelDataByApplicationId` exist."""
  applicationClaimsExcelDataByApplicationIdExist: Boolean

  """
  Filter by the object’s `applicationMilestoneDataByApplicationId` relation.
  """
  applicationMilestoneDataByApplicationId: ApplicationToManyApplicationMilestoneDataFilter

  """Some related `applicationMilestoneDataByApplicationId` exist."""
  applicationMilestoneDataByApplicationIdExist: Boolean

  """
  Filter by the object’s `applicationMilestoneExcelDataByApplicationId` relation.
  """
  applicationMilestoneExcelDataByApplicationId: ApplicationToManyApplicationMilestoneExcelDataFilter

  """Some related `applicationMilestoneExcelDataByApplicationId` exist."""
  applicationMilestoneExcelDataByApplicationIdExist: Boolean

  """
  Filter by the object’s `applicationInternalDescriptionsByApplicationId` relation.
  """
  applicationInternalDescriptionsByApplicationId: ApplicationToManyApplicationInternalDescriptionFilter

  """Some related `applicationInternalDescriptionsByApplicationId` exist."""
  applicationInternalDescriptionsByApplicationIdExist: Boolean

  """
  Filter by the object’s `applicationProjectTypesByApplicationId` relation.
  """
  applicationProjectTypesByApplicationId: ApplicationToManyApplicationProjectTypeFilter

  """Some related `applicationProjectTypesByApplicationId` exist."""
  applicationProjectTypesByApplicationIdExist: Boolean

  """Filter by the object’s `notificationsByApplicationId` relation."""
  notificationsByApplicationId: ApplicationToManyNotificationFilter

  """Some related `notificationsByApplicationId` exist."""
  notificationsByApplicationIdExist: Boolean

  """
  Filter by the object’s `applicationPendingChangeRequestsByApplicationId` relation.
  """
  applicationPendingChangeRequestsByApplicationId: ApplicationToManyApplicationPendingChangeRequestFilter

  """Some related `applicationPendingChangeRequestsByApplicationId` exist."""
  applicationPendingChangeRequestsByApplicationIdExist: Boolean

  """
  Filter by the object’s `applicationAnnouncedsByApplicationId` relation.
  """
  applicationAnnouncedsByApplicationId: ApplicationToManyApplicationAnnouncedFilter

  """Some related `applicationAnnouncedsByApplicationId` exist."""
  applicationAnnouncedsByApplicationIdExist: Boolean

  """Filter by the object’s `intakeByIntakeId` relation."""
  intakeByIntakeId: IntakeFilter

  """A related `intakeByIntakeId` exists."""
  intakeByIntakeIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [ApplicationFilter!]

  """Checks for any expressions in this list."""
  or: [ApplicationFilter!]

  """Negates the expression."""
  not: ApplicationFilter
}

"""
A filter to be used against Int List fields. All fields are combined with a logical ‘and.’
"""
input IntListFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: [Int]

  """Not equal to the specified value."""
  notEqualTo: [Int]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [Int]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [Int]

  """Less than the specified value."""
  lessThan: [Int]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [Int]

  """Greater than the specified value."""
  greaterThan: [Int]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [Int]

  """Contains the specified list of values."""
  contains: [Int]

  """Contained by the specified list of values."""
  containedBy: [Int]

  """Overlaps the specified list of values."""
  overlaps: [Int]

  """Any array item is equal to the specified value."""
  anyEqualTo: Int

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: Int

  """Any array item is less than the specified value."""
  anyLessThan: Int

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: Int

  """Any array item is greater than the specified value."""
  anyGreaterThan: Int

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: Int
}

"""
A filter to be used against many `ApplicationStatus` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyApplicationStatusFilter {
  """
  Every related `ApplicationStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationStatusFilter

  """
  Some related `ApplicationStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationStatusFilter

  """
  No related `ApplicationStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationStatusFilter
}

"""
A filter to be used against `ApplicationStatus` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationStatusFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `changeReason` field."""
  changeReason: StringFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `attachmentsByApplicationStatusId` relation."""
  attachmentsByApplicationStatusId: ApplicationStatusToManyAttachmentFilter

  """Some related `attachmentsByApplicationStatusId` exist."""
  attachmentsByApplicationStatusIdExist: Boolean

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """A related `applicationByApplicationId` exists."""
  applicationByApplicationIdExists: Boolean

  """Filter by the object’s `applicationStatusTypeByStatus` relation."""
  applicationStatusTypeByStatus: ApplicationStatusTypeFilter

  """A related `applicationStatusTypeByStatus` exists."""
  applicationStatusTypeByStatusExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [ApplicationStatusFilter!]

  """Checks for any expressions in this list."""
  or: [ApplicationStatusFilter!]

  """Negates the expression."""
  not: ApplicationStatusFilter
}

"""
A filter to be used against many `Attachment` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationStatusToManyAttachmentFilter {
  """
  Every related `Attachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AttachmentFilter

  """
  Some related `Attachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AttachmentFilter

  """
  No related `Attachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AttachmentFilter
}

"""
A filter to be used against `Attachment` object types. All fields are combined with a logical ‘and.’
"""
input AttachmentFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `file` field."""
  file: UUIDFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `fileName` field."""
  fileName: StringFilter

  """Filter by the object’s `fileType` field."""
  fileType: StringFilter

  """Filter by the object’s `fileSize` field."""
  fileSize: StringFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `applicationStatusId` field."""
  applicationStatusId: IntFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """
  Filter by the object’s `applicationStatusByApplicationStatusId` relation.
  """
  applicationStatusByApplicationStatusId: ApplicationStatusFilter

  """A related `applicationStatusByApplicationStatusId` exists."""
  applicationStatusByApplicationStatusIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [AttachmentFilter!]

  """Checks for any expressions in this list."""
  or: [AttachmentFilter!]

  """Negates the expression."""
  not: AttachmentFilter
}

"""
A filter to be used against `ApplicationStatusType` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationStatusTypeFilter {
  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `visibleByApplicant` field."""
  visibleByApplicant: BooleanFilter

  """Filter by the object’s `statusOrder` field."""
  statusOrder: IntFilter

  """Filter by the object’s `visibleByAnalyst` field."""
  visibleByAnalyst: BooleanFilter

  """Filter by the object’s `applicationStatusesByStatus` relation."""
  applicationStatusesByStatus: ApplicationStatusTypeToManyApplicationStatusFilter

  """Some related `applicationStatusesByStatus` exist."""
  applicationStatusesByStatusExist: Boolean

  """Checks for all expressions in this list."""
  and: [ApplicationStatusTypeFilter!]

  """Checks for any expressions in this list."""
  or: [ApplicationStatusTypeFilter!]

  """Negates the expression."""
  not: ApplicationStatusTypeFilter
}

"""
A filter to be used against many `ApplicationStatus` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationStatusTypeToManyApplicationStatusFilter {
  """
  Every related `ApplicationStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationStatusFilter

  """
  Some related `ApplicationStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationStatusFilter

  """
  No related `ApplicationStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationStatusFilter
}

"""
A filter to be used against many `Attachment` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyAttachmentFilter {
  """
  Every related `Attachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AttachmentFilter

  """
  Some related `Attachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AttachmentFilter

  """
  No related `Attachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AttachmentFilter
}

"""
A filter to be used against many `ApplicationFormData` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyApplicationFormDataFilter {
  """
  Every related `ApplicationFormData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationFormDataFilter

  """
  Some related `ApplicationFormData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationFormDataFilter

  """
  No related `ApplicationFormData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationFormDataFilter
}

"""
A filter to be used against `ApplicationFormData` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationFormDataFilter {
  """Filter by the object’s `formDataId` field."""
  formDataId: IntFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `formDataByFormDataId` relation."""
  formDataByFormDataId: FormDataFilter

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """Checks for all expressions in this list."""
  and: [ApplicationFormDataFilter!]

  """Checks for any expressions in this list."""
  or: [ApplicationFormDataFilter!]

  """Negates the expression."""
  not: ApplicationFormDataFilter
}

"""
A filter to be used against `FormData` object types. All fields are combined with a logical ‘and.’
"""
input FormDataFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `jsonData` field."""
  jsonData: JSONFilter

  """Filter by the object’s `lastEditedPage` field."""
  lastEditedPage: StringFilter

  """Filter by the object’s `formDataStatusTypeId` field."""
  formDataStatusTypeId: StringFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `formSchemaId` field."""
  formSchemaId: IntFilter

  """Filter by the object’s `reasonForChange` field."""
  reasonForChange: StringFilter

  """Filter by the object’s `isEditable` field."""
  isEditable: BooleanFilter

  """Filter by the object’s `applicationFormDataByFormDataId` relation."""
  applicationFormDataByFormDataId: FormDataToManyApplicationFormDataFilter

  """Some related `applicationFormDataByFormDataId` exist."""
  applicationFormDataByFormDataIdExist: Boolean

  """
  Filter by the object’s `formDataStatusTypeByFormDataStatusTypeId` relation.
  """
  formDataStatusTypeByFormDataStatusTypeId: FormDataStatusTypeFilter

  """A related `formDataStatusTypeByFormDataStatusTypeId` exists."""
  formDataStatusTypeByFormDataStatusTypeIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Filter by the object’s `formByFormSchemaId` relation."""
  formByFormSchemaId: FormFilter

  """A related `formByFormSchemaId` exists."""
  formByFormSchemaIdExists: Boolean

  """Checks for all expressions in this list."""
  and: [FormDataFilter!]

  """Checks for any expressions in this list."""
  or: [FormDataFilter!]

  """Negates the expression."""
  not: FormDataFilter
}

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Included in the specified list."""
  in: [JSON!]

  """Not included in the specified list."""
  notIn: [JSON!]

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains the specified key."""
  containsKey: String

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contained by the specified JSON."""
  containedBy: JSON
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A filter to be used against many `ApplicationFormData` object types. All fields are combined with a logical ‘and.’
"""
input FormDataToManyApplicationFormDataFilter {
  """
  Every related `ApplicationFormData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationFormDataFilter

  """
  Some related `ApplicationFormData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationFormDataFilter

  """
  No related `ApplicationFormData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationFormDataFilter
}

"""
A filter to be used against `FormDataStatusType` object types. All fields are combined with a logical ‘and.’
"""
input FormDataStatusTypeFilter {
  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `formDataByFormDataStatusTypeId` relation."""
  formDataByFormDataStatusTypeId: FormDataStatusTypeToManyFormDataFilter

  """Some related `formDataByFormDataStatusTypeId` exist."""
  formDataByFormDataStatusTypeIdExist: Boolean

  """Checks for all expressions in this list."""
  and: [FormDataStatusTypeFilter!]

  """Checks for any expressions in this list."""
  or: [FormDataStatusTypeFilter!]

  """Negates the expression."""
  not: FormDataStatusTypeFilter
}

"""
A filter to be used against many `FormData` object types. All fields are combined with a logical ‘and.’
"""
input FormDataStatusTypeToManyFormDataFilter {
  """
  Every related `FormData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FormDataFilter

  """
  Some related `FormData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FormDataFilter

  """
  No related `FormData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FormDataFilter
}

"""
A filter to be used against `Form` object types. All fields are combined with a logical ‘and.’
"""
input FormFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `slug` field."""
  slug: StringFilter

  """Filter by the object’s `jsonSchema` field."""
  jsonSchema: JSONFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `formType` field."""
  formType: StringFilter

  """Filter by the object’s `formDataByFormSchemaId` relation."""
  formDataByFormSchemaId: FormToManyFormDataFilter

  """Some related `formDataByFormSchemaId` exist."""
  formDataByFormSchemaIdExist: Boolean

  """Filter by the object’s `formTypeByFormType` relation."""
  formTypeByFormType: FormTypeFilter

  """A related `formTypeByFormType` exists."""
  formTypeByFormTypeExists: Boolean

  """Checks for all expressions in this list."""
  and: [FormFilter!]

  """Checks for any expressions in this list."""
  or: [FormFilter!]

  """Negates the expression."""
  not: FormFilter
}

"""
A filter to be used against many `FormData` object types. All fields are combined with a logical ‘and.’
"""
input FormToManyFormDataFilter {
  """
  Every related `FormData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FormDataFilter

  """
  Some related `FormData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FormDataFilter

  """
  No related `FormData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FormDataFilter
}

"""
A filter to be used against `FormType` object types. All fields are combined with a logical ‘and.’
"""
input FormTypeFilter {
  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `formsByFormType` relation."""
  formsByFormType: FormTypeToManyFormFilter

  """Some related `formsByFormType` exist."""
  formsByFormTypeExist: Boolean

  """Checks for all expressions in this list."""
  and: [FormTypeFilter!]

  """Checks for any expressions in this list."""
  or: [FormTypeFilter!]

  """Negates the expression."""
  not: FormTypeFilter
}

"""
A filter to be used against many `Form` object types. All fields are combined with a logical ‘and.’
"""
input FormTypeToManyFormFilter {
  """
  Every related `Form` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FormFilter

  """
  Some related `Form` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FormFilter

  """
  No related `Form` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FormFilter
}

"""
A filter to be used against many `ApplicationAnalystLead` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyApplicationAnalystLeadFilter {
  """
  Every related `ApplicationAnalystLead` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationAnalystLeadFilter

  """
  Some related `ApplicationAnalystLead` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationAnalystLeadFilter

  """
  No related `ApplicationAnalystLead` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationAnalystLeadFilter
}

"""
A filter to be used against `ApplicationAnalystLead` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationAnalystLeadFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `analystId` field."""
  analystId: IntFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """A related `applicationByApplicationId` exists."""
  applicationByApplicationIdExists: Boolean

  """Filter by the object’s `analystByAnalystId` relation."""
  analystByAnalystId: AnalystFilter

  """A related `analystByAnalystId` exists."""
  analystByAnalystIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [ApplicationAnalystLeadFilter!]

  """Checks for any expressions in this list."""
  or: [ApplicationAnalystLeadFilter!]

  """Negates the expression."""
  not: ApplicationAnalystLeadFilter
}

"""
A filter to be used against `Analyst` object types. All fields are combined with a logical ‘and.’
"""
input AnalystFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `givenName` field."""
  givenName: StringFilter

  """Filter by the object’s `familyName` field."""
  familyName: StringFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `active` field."""
  active: BooleanFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `applicationAnalystLeadsByAnalystId` relation."""
  applicationAnalystLeadsByAnalystId: AnalystToManyApplicationAnalystLeadFilter

  """Some related `applicationAnalystLeadsByAnalystId` exist."""
  applicationAnalystLeadsByAnalystIdExist: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [AnalystFilter!]

  """Checks for any expressions in this list."""
  or: [AnalystFilter!]

  """Negates the expression."""
  not: AnalystFilter
}

"""
A filter to be used against many `ApplicationAnalystLead` object types. All fields are combined with a logical ‘and.’
"""
input AnalystToManyApplicationAnalystLeadFilter {
  """
  Every related `ApplicationAnalystLead` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationAnalystLeadFilter

  """
  Some related `ApplicationAnalystLead` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationAnalystLeadFilter

  """
  No related `ApplicationAnalystLead` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationAnalystLeadFilter
}

"""
A filter to be used against many `ApplicationRfiData` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyApplicationRfiDataFilter {
  """
  Every related `ApplicationRfiData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationRfiDataFilter

  """
  Some related `ApplicationRfiData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationRfiDataFilter

  """
  No related `ApplicationRfiData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationRfiDataFilter
}

"""
A filter to be used against `ApplicationRfiData` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationRfiDataFilter {
  """Filter by the object’s `rfiDataId` field."""
  rfiDataId: IntFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `rfiDataByRfiDataId` relation."""
  rfiDataByRfiDataId: RfiDataFilter

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """Checks for all expressions in this list."""
  and: [ApplicationRfiDataFilter!]

  """Checks for any expressions in this list."""
  or: [ApplicationRfiDataFilter!]

  """Negates the expression."""
  not: ApplicationRfiDataFilter
}

"""
A filter to be used against `RfiData` object types. All fields are combined with a logical ‘and.’
"""
input RfiDataFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `rfiNumber` field."""
  rfiNumber: StringFilter

  """Filter by the object’s `jsonData` field."""
  jsonData: JSONFilter

  """Filter by the object’s `rfiDataStatusTypeId` field."""
  rfiDataStatusTypeId: StringFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `applicationRfiDataByRfiDataId` relation."""
  applicationRfiDataByRfiDataId: RfiDataToManyApplicationRfiDataFilter

  """Some related `applicationRfiDataByRfiDataId` exist."""
  applicationRfiDataByRfiDataIdExist: Boolean

  """
  Filter by the object’s `rfiDataStatusTypeByRfiDataStatusTypeId` relation.
  """
  rfiDataStatusTypeByRfiDataStatusTypeId: RfiDataStatusTypeFilter

  """A related `rfiDataStatusTypeByRfiDataStatusTypeId` exists."""
  rfiDataStatusTypeByRfiDataStatusTypeIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [RfiDataFilter!]

  """Checks for any expressions in this list."""
  or: [RfiDataFilter!]

  """Negates the expression."""
  not: RfiDataFilter
}

"""
A filter to be used against many `ApplicationRfiData` object types. All fields are combined with a logical ‘and.’
"""
input RfiDataToManyApplicationRfiDataFilter {
  """
  Every related `ApplicationRfiData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationRfiDataFilter

  """
  Some related `ApplicationRfiData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationRfiDataFilter

  """
  No related `ApplicationRfiData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationRfiDataFilter
}

"""
A filter to be used against `RfiDataStatusType` object types. All fields are combined with a logical ‘and.’
"""
input RfiDataStatusTypeFilter {
  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `rfiDataByRfiDataStatusTypeId` relation."""
  rfiDataByRfiDataStatusTypeId: RfiDataStatusTypeToManyRfiDataFilter

  """Some related `rfiDataByRfiDataStatusTypeId` exist."""
  rfiDataByRfiDataStatusTypeIdExist: Boolean

  """Checks for all expressions in this list."""
  and: [RfiDataStatusTypeFilter!]

  """Checks for any expressions in this list."""
  or: [RfiDataStatusTypeFilter!]

  """Negates the expression."""
  not: RfiDataStatusTypeFilter
}

"""
A filter to be used against many `RfiData` object types. All fields are combined with a logical ‘and.’
"""
input RfiDataStatusTypeToManyRfiDataFilter {
  """
  Every related `RfiData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RfiDataFilter

  """
  Some related `RfiData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RfiDataFilter

  """
  No related `RfiData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RfiDataFilter
}

"""
A filter to be used against many `AssessmentData` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyAssessmentDataFilter {
  """
  Every related `AssessmentData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AssessmentDataFilter

  """
  Some related `AssessmentData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AssessmentDataFilter

  """
  No related `AssessmentData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AssessmentDataFilter
}

"""
A filter to be used against `AssessmentData` object types. All fields are combined with a logical ‘and.’
"""
input AssessmentDataFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `jsonData` field."""
  jsonData: JSONFilter

  """Filter by the object’s `assessmentDataType` field."""
  assessmentDataType: StringFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """Filter by the object’s `assessmentTypeByAssessmentDataType` relation."""
  assessmentTypeByAssessmentDataType: AssessmentTypeFilter

  """A related `assessmentTypeByAssessmentDataType` exists."""
  assessmentTypeByAssessmentDataTypeExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [AssessmentDataFilter!]

  """Checks for any expressions in this list."""
  or: [AssessmentDataFilter!]

  """Negates the expression."""
  not: AssessmentDataFilter
}

"""
A filter to be used against `AssessmentType` object types. All fields are combined with a logical ‘and.’
"""
input AssessmentTypeFilter {
  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `assessmentDataByAssessmentDataType` relation."""
  assessmentDataByAssessmentDataType: AssessmentTypeToManyAssessmentDataFilter

  """Some related `assessmentDataByAssessmentDataType` exist."""
  assessmentDataByAssessmentDataTypeExist: Boolean

  """Checks for all expressions in this list."""
  and: [AssessmentTypeFilter!]

  """Checks for any expressions in this list."""
  or: [AssessmentTypeFilter!]

  """Negates the expression."""
  not: AssessmentTypeFilter
}

"""
A filter to be used against many `AssessmentData` object types. All fields are combined with a logical ‘and.’
"""
input AssessmentTypeToManyAssessmentDataFilter {
  """
  Every related `AssessmentData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AssessmentDataFilter

  """
  Some related `AssessmentData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AssessmentDataFilter

  """
  No related `AssessmentData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AssessmentDataFilter
}

"""
A filter to be used against many `ApplicationPackage` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyApplicationPackageFilter {
  """
  Every related `ApplicationPackage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationPackageFilter

  """
  Some related `ApplicationPackage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationPackageFilter

  """
  No related `ApplicationPackage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationPackageFilter
}

"""
A filter to be used against `ApplicationPackage` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationPackageFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `package` field."""
  package: IntFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """A related `applicationByApplicationId` exists."""
  applicationByApplicationIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [ApplicationPackageFilter!]

  """Checks for any expressions in this list."""
  or: [ApplicationPackageFilter!]

  """Negates the expression."""
  not: ApplicationPackageFilter
}

"""
A filter to be used against many `ConditionalApprovalData` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyConditionalApprovalDataFilter {
  """
  Every related `ConditionalApprovalData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ConditionalApprovalDataFilter

  """
  Some related `ConditionalApprovalData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ConditionalApprovalDataFilter

  """
  No related `ConditionalApprovalData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ConditionalApprovalDataFilter
}

"""
A filter to be used against `ConditionalApprovalData` object types. All fields are combined with a logical ‘and.’
"""
input ConditionalApprovalDataFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `jsonData` field."""
  jsonData: JSONFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """A related `applicationByApplicationId` exists."""
  applicationByApplicationIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [ConditionalApprovalDataFilter!]

  """Checks for any expressions in this list."""
  or: [ConditionalApprovalDataFilter!]

  """Negates the expression."""
  not: ConditionalApprovalDataFilter
}

"""
A filter to be used against many `ApplicationGisData` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyApplicationGisDataFilter {
  """
  Every related `ApplicationGisData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationGisDataFilter

  """
  Some related `ApplicationGisData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationGisDataFilter

  """
  No related `ApplicationGisData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationGisDataFilter
}

"""
A filter to be used against `ApplicationGisData` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationGisDataFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `batchId` field."""
  batchId: IntFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `jsonData` field."""
  jsonData: JSONFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `gisDataByBatchId` relation."""
  gisDataByBatchId: GisDataFilter

  """A related `gisDataByBatchId` exists."""
  gisDataByBatchIdExists: Boolean

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """A related `applicationByApplicationId` exists."""
  applicationByApplicationIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [ApplicationGisDataFilter!]

  """Checks for any expressions in this list."""
  or: [ApplicationGisDataFilter!]

  """Negates the expression."""
  not: ApplicationGisDataFilter
}

"""
A filter to be used against `GisData` object types. All fields are combined with a logical ‘and.’
"""
input GisDataFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `jsonData` field."""
  jsonData: JSONFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `applicationGisDataByBatchId` relation."""
  applicationGisDataByBatchId: GisDataToManyApplicationGisDataFilter

  """Some related `applicationGisDataByBatchId` exist."""
  applicationGisDataByBatchIdExist: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [GisDataFilter!]

  """Checks for any expressions in this list."""
  or: [GisDataFilter!]

  """Negates the expression."""
  not: GisDataFilter
}

"""
A filter to be used against many `ApplicationGisData` object types. All fields are combined with a logical ‘and.’
"""
input GisDataToManyApplicationGisDataFilter {
  """
  Every related `ApplicationGisData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationGisDataFilter

  """
  Some related `ApplicationGisData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationGisDataFilter

  """
  No related `ApplicationGisData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationGisDataFilter
}

"""
A filter to be used against many `ApplicationAnnouncement` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyApplicationAnnouncementFilter {
  """
  Every related `ApplicationAnnouncement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationAnnouncementFilter

  """
  Some related `ApplicationAnnouncement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationAnnouncementFilter

  """
  No related `ApplicationAnnouncement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationAnnouncementFilter
}

"""
A filter to be used against `ApplicationAnnouncement` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationAnnouncementFilter {
  """Filter by the object’s `announcementId` field."""
  announcementId: IntFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `isPrimary` field."""
  isPrimary: BooleanFilter

  """Filter by the object’s `historyOperation` field."""
  historyOperation: StringFilter

  """Filter by the object’s `announcementByAnnouncementId` relation."""
  announcementByAnnouncementId: AnnouncementFilter

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [ApplicationAnnouncementFilter!]

  """Checks for any expressions in this list."""
  or: [ApplicationAnnouncementFilter!]

  """Negates the expression."""
  not: ApplicationAnnouncementFilter
}

"""
A filter to be used against `Announcement` object types. All fields are combined with a logical ‘and.’
"""
input AnnouncementFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `ccbcNumbers` field."""
  ccbcNumbers: StringFilter

  """Filter by the object’s `jsonData` field."""
  jsonData: JSONFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """
  Filter by the object’s `applicationAnnouncementsByAnnouncementId` relation.
  """
  applicationAnnouncementsByAnnouncementId: AnnouncementToManyApplicationAnnouncementFilter

  """Some related `applicationAnnouncementsByAnnouncementId` exist."""
  applicationAnnouncementsByAnnouncementIdExist: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [AnnouncementFilter!]

  """Checks for any expressions in this list."""
  or: [AnnouncementFilter!]

  """Negates the expression."""
  not: AnnouncementFilter
}

"""
A filter to be used against many `ApplicationAnnouncement` object types. All fields are combined with a logical ‘and.’
"""
input AnnouncementToManyApplicationAnnouncementFilter {
  """
  Every related `ApplicationAnnouncement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationAnnouncementFilter

  """
  Some related `ApplicationAnnouncement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationAnnouncementFilter

  """
  No related `ApplicationAnnouncement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationAnnouncementFilter
}

"""
A filter to be used against many `ApplicationGisAssessmentHh` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyApplicationGisAssessmentHhFilter {
  """
  Every related `ApplicationGisAssessmentHh` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationGisAssessmentHhFilter

  """
  Some related `ApplicationGisAssessmentHh` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationGisAssessmentHhFilter

  """
  No related `ApplicationGisAssessmentHh` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationGisAssessmentHhFilter
}

"""
A filter to be used against `ApplicationGisAssessmentHh` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationGisAssessmentHhFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `eligible` field."""
  eligible: FloatFilter

  """Filter by the object’s `eligibleIndigenous` field."""
  eligibleIndigenous: FloatFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [ApplicationGisAssessmentHhFilter!]

  """Checks for any expressions in this list."""
  or: [ApplicationGisAssessmentHhFilter!]

  """Negates the expression."""
  not: ApplicationGisAssessmentHhFilter
}

"""
A filter to be used against Float fields. All fields are combined with a logical ‘and.’
"""
input FloatFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Float

  """Not equal to the specified value."""
  notEqualTo: Float

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Float

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Float

  """Included in the specified list."""
  in: [Float!]

  """Not included in the specified list."""
  notIn: [Float!]

  """Less than the specified value."""
  lessThan: Float

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Float

  """Greater than the specified value."""
  greaterThan: Float

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Float
}

"""
A filter to be used against many `ApplicationSowData` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyApplicationSowDataFilter {
  """
  Every related `ApplicationSowData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationSowDataFilter

  """
  Some related `ApplicationSowData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationSowDataFilter

  """
  No related `ApplicationSowData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationSowDataFilter
}

"""
A filter to be used against `ApplicationSowData` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationSowDataFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `jsonData` field."""
  jsonData: JSONFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `amendmentNumber` field."""
  amendmentNumber: IntFilter

  """Filter by the object’s `isAmendment` field."""
  isAmendment: BooleanFilter

  """Filter by the object’s `sowTab2SBySowId` relation."""
  sowTab2SBySowId: ApplicationSowDataToManySowTab2Filter

  """Some related `sowTab2SBySowId` exist."""
  sowTab2SBySowIdExist: Boolean

  """Filter by the object’s `sowTab1SBySowId` relation."""
  sowTab1SBySowId: ApplicationSowDataToManySowTab1Filter

  """Some related `sowTab1SBySowId` exist."""
  sowTab1SBySowIdExist: Boolean

  """Filter by the object’s `sowTab7SBySowId` relation."""
  sowTab7SBySowId: ApplicationSowDataToManySowTab7Filter

  """Some related `sowTab7SBySowId` exist."""
  sowTab7SBySowIdExist: Boolean

  """Filter by the object’s `sowTab8SBySowId` relation."""
  sowTab8SBySowId: ApplicationSowDataToManySowTab8Filter

  """Some related `sowTab8SBySowId` exist."""
  sowTab8SBySowIdExist: Boolean

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """A related `applicationByApplicationId` exists."""
  applicationByApplicationIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [ApplicationSowDataFilter!]

  """Checks for any expressions in this list."""
  or: [ApplicationSowDataFilter!]

  """Negates the expression."""
  not: ApplicationSowDataFilter
}

"""
A filter to be used against many `SowTab2` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationSowDataToManySowTab2Filter {
  """
  Every related `SowTab2` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SowTab2Filter

  """
  Some related `SowTab2` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SowTab2Filter

  """
  No related `SowTab2` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SowTab2Filter
}

"""
A filter to be used against `SowTab2` object types. All fields are combined with a logical ‘and.’
"""
input SowTab2Filter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `sowId` field."""
  sowId: IntFilter

  """Filter by the object’s `jsonData` field."""
  jsonData: JSONFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `applicationSowDataBySowId` relation."""
  applicationSowDataBySowId: ApplicationSowDataFilter

  """A related `applicationSowDataBySowId` exists."""
  applicationSowDataBySowIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [SowTab2Filter!]

  """Checks for any expressions in this list."""
  or: [SowTab2Filter!]

  """Negates the expression."""
  not: SowTab2Filter
}

"""
A filter to be used against many `SowTab1` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationSowDataToManySowTab1Filter {
  """
  Every related `SowTab1` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SowTab1Filter

  """
  Some related `SowTab1` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SowTab1Filter

  """
  No related `SowTab1` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SowTab1Filter
}

"""
A filter to be used against `SowTab1` object types. All fields are combined with a logical ‘and.’
"""
input SowTab1Filter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `sowId` field."""
  sowId: IntFilter

  """Filter by the object’s `jsonData` field."""
  jsonData: JSONFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `applicationSowDataBySowId` relation."""
  applicationSowDataBySowId: ApplicationSowDataFilter

  """A related `applicationSowDataBySowId` exists."""
  applicationSowDataBySowIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [SowTab1Filter!]

  """Checks for any expressions in this list."""
  or: [SowTab1Filter!]

  """Negates the expression."""
  not: SowTab1Filter
}

"""
A filter to be used against many `SowTab7` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationSowDataToManySowTab7Filter {
  """
  Every related `SowTab7` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SowTab7Filter

  """
  Some related `SowTab7` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SowTab7Filter

  """
  No related `SowTab7` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SowTab7Filter
}

"""
A filter to be used against `SowTab7` object types. All fields are combined with a logical ‘and.’
"""
input SowTab7Filter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `sowId` field."""
  sowId: IntFilter

  """Filter by the object’s `jsonData` field."""
  jsonData: JSONFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `applicationSowDataBySowId` relation."""
  applicationSowDataBySowId: ApplicationSowDataFilter

  """A related `applicationSowDataBySowId` exists."""
  applicationSowDataBySowIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [SowTab7Filter!]

  """Checks for any expressions in this list."""
  or: [SowTab7Filter!]

  """Negates the expression."""
  not: SowTab7Filter
}

"""
A filter to be used against many `SowTab8` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationSowDataToManySowTab8Filter {
  """
  Every related `SowTab8` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SowTab8Filter

  """
  Some related `SowTab8` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SowTab8Filter

  """
  No related `SowTab8` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SowTab8Filter
}

"""
A filter to be used against `SowTab8` object types. All fields are combined with a logical ‘and.’
"""
input SowTab8Filter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `sowId` field."""
  sowId: IntFilter

  """Filter by the object’s `jsonData` field."""
  jsonData: JSONFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `applicationSowDataBySowId` relation."""
  applicationSowDataBySowId: ApplicationSowDataFilter

  """A related `applicationSowDataBySowId` exists."""
  applicationSowDataBySowIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [SowTab8Filter!]

  """Checks for any expressions in this list."""
  or: [SowTab8Filter!]

  """Negates the expression."""
  not: SowTab8Filter
}

"""
A filter to be used against many `ProjectInformationData` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyProjectInformationDataFilter {
  """
  Every related `ProjectInformationData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectInformationDataFilter

  """
  Some related `ProjectInformationData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectInformationDataFilter

  """
  No related `ProjectInformationData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectInformationDataFilter
}

"""
A filter to be used against `ProjectInformationData` object types. All fields are combined with a logical ‘and.’
"""
input ProjectInformationDataFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `jsonData` field."""
  jsonData: JSONFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """A related `applicationByApplicationId` exists."""
  applicationByApplicationIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [ProjectInformationDataFilter!]

  """Checks for any expressions in this list."""
  or: [ProjectInformationDataFilter!]

  """Negates the expression."""
  not: ProjectInformationDataFilter
}

"""
A filter to be used against many `ChangeRequestData` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyChangeRequestDataFilter {
  """
  Every related `ChangeRequestData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ChangeRequestDataFilter

  """
  Some related `ChangeRequestData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ChangeRequestDataFilter

  """
  No related `ChangeRequestData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ChangeRequestDataFilter
}

"""
A filter to be used against `ChangeRequestData` object types. All fields are combined with a logical ‘and.’
"""
input ChangeRequestDataFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `jsonData` field."""
  jsonData: JSONFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `amendmentNumber` field."""
  amendmentNumber: IntFilter

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """A related `applicationByApplicationId` exists."""
  applicationByApplicationIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [ChangeRequestDataFilter!]

  """Checks for any expressions in this list."""
  or: [ChangeRequestDataFilter!]

  """Negates the expression."""
  not: ChangeRequestDataFilter
}

"""
A filter to be used against many `ApplicationCommunityProgressReportData` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyApplicationCommunityProgressReportDataFilter {
  """
  Every related `ApplicationCommunityProgressReportData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationCommunityProgressReportDataFilter

  """
  Some related `ApplicationCommunityProgressReportData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationCommunityProgressReportDataFilter

  """
  No related `ApplicationCommunityProgressReportData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationCommunityProgressReportDataFilter
}

"""
A filter to be used against `ApplicationCommunityProgressReportData` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationCommunityProgressReportDataFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `jsonData` field."""
  jsonData: JSONFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `excelDataId` field."""
  excelDataId: IntFilter

  """Filter by the object’s `historyOperation` field."""
  historyOperation: StringFilter

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """A related `applicationByApplicationId` exists."""
  applicationByApplicationIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [ApplicationCommunityProgressReportDataFilter!]

  """Checks for any expressions in this list."""
  or: [ApplicationCommunityProgressReportDataFilter!]

  """Negates the expression."""
  not: ApplicationCommunityProgressReportDataFilter
}

"""
A filter to be used against many `ApplicationCommunityReportExcelData` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyApplicationCommunityReportExcelDataFilter {
  """
  Every related `ApplicationCommunityReportExcelData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationCommunityReportExcelDataFilter

  """
  Some related `ApplicationCommunityReportExcelData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationCommunityReportExcelDataFilter

  """
  No related `ApplicationCommunityReportExcelData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationCommunityReportExcelDataFilter
}

"""
A filter to be used against `ApplicationCommunityReportExcelData` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationCommunityReportExcelDataFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `jsonData` field."""
  jsonData: JSONFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """A related `applicationByApplicationId` exists."""
  applicationByApplicationIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [ApplicationCommunityReportExcelDataFilter!]

  """Checks for any expressions in this list."""
  or: [ApplicationCommunityReportExcelDataFilter!]

  """Negates the expression."""
  not: ApplicationCommunityReportExcelDataFilter
}

"""
A filter to be used against many `ApplicationClaimsData` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyApplicationClaimsDataFilter {
  """
  Every related `ApplicationClaimsData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationClaimsDataFilter

  """
  Some related `ApplicationClaimsData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationClaimsDataFilter

  """
  No related `ApplicationClaimsData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationClaimsDataFilter
}

"""
A filter to be used against `ApplicationClaimsData` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationClaimsDataFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `jsonData` field."""
  jsonData: JSONFilter

  """Filter by the object’s `excelDataId` field."""
  excelDataId: IntFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `historyOperation` field."""
  historyOperation: StringFilter

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """A related `applicationByApplicationId` exists."""
  applicationByApplicationIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [ApplicationClaimsDataFilter!]

  """Checks for any expressions in this list."""
  or: [ApplicationClaimsDataFilter!]

  """Negates the expression."""
  not: ApplicationClaimsDataFilter
}

"""
A filter to be used against many `ApplicationClaimsExcelData` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyApplicationClaimsExcelDataFilter {
  """
  Every related `ApplicationClaimsExcelData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationClaimsExcelDataFilter

  """
  Some related `ApplicationClaimsExcelData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationClaimsExcelDataFilter

  """
  No related `ApplicationClaimsExcelData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationClaimsExcelDataFilter
}

"""
A filter to be used against `ApplicationClaimsExcelData` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationClaimsExcelDataFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `jsonData` field."""
  jsonData: JSONFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """A related `applicationByApplicationId` exists."""
  applicationByApplicationIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [ApplicationClaimsExcelDataFilter!]

  """Checks for any expressions in this list."""
  or: [ApplicationClaimsExcelDataFilter!]

  """Negates the expression."""
  not: ApplicationClaimsExcelDataFilter
}

"""
A filter to be used against many `ApplicationMilestoneData` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyApplicationMilestoneDataFilter {
  """
  Every related `ApplicationMilestoneData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationMilestoneDataFilter

  """
  Some related `ApplicationMilestoneData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationMilestoneDataFilter

  """
  No related `ApplicationMilestoneData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationMilestoneDataFilter
}

"""
A filter to be used against `ApplicationMilestoneData` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationMilestoneDataFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `jsonData` field."""
  jsonData: JSONFilter

  """Filter by the object’s `excelDataId` field."""
  excelDataId: IntFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `historyOperation` field."""
  historyOperation: StringFilter

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """A related `applicationByApplicationId` exists."""
  applicationByApplicationIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [ApplicationMilestoneDataFilter!]

  """Checks for any expressions in this list."""
  or: [ApplicationMilestoneDataFilter!]

  """Negates the expression."""
  not: ApplicationMilestoneDataFilter
}

"""
A filter to be used against many `ApplicationMilestoneExcelData` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyApplicationMilestoneExcelDataFilter {
  """
  Every related `ApplicationMilestoneExcelData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationMilestoneExcelDataFilter

  """
  Some related `ApplicationMilestoneExcelData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationMilestoneExcelDataFilter

  """
  No related `ApplicationMilestoneExcelData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationMilestoneExcelDataFilter
}

"""
A filter to be used against `ApplicationMilestoneExcelData` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationMilestoneExcelDataFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `jsonData` field."""
  jsonData: JSONFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """A related `applicationByApplicationId` exists."""
  applicationByApplicationIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [ApplicationMilestoneExcelDataFilter!]

  """Checks for any expressions in this list."""
  or: [ApplicationMilestoneExcelDataFilter!]

  """Negates the expression."""
  not: ApplicationMilestoneExcelDataFilter
}

"""
A filter to be used against many `ApplicationInternalDescription` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyApplicationInternalDescriptionFilter {
  """
  Every related `ApplicationInternalDescription` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationInternalDescriptionFilter

  """
  Some related `ApplicationInternalDescription` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationInternalDescriptionFilter

  """
  No related `ApplicationInternalDescription` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationInternalDescriptionFilter
}

"""
A filter to be used against `ApplicationInternalDescription` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationInternalDescriptionFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """A related `applicationByApplicationId` exists."""
  applicationByApplicationIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [ApplicationInternalDescriptionFilter!]

  """Checks for any expressions in this list."""
  or: [ApplicationInternalDescriptionFilter!]

  """Negates the expression."""
  not: ApplicationInternalDescriptionFilter
}

"""
A filter to be used against many `ApplicationProjectType` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyApplicationProjectTypeFilter {
  """
  Every related `ApplicationProjectType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationProjectTypeFilter

  """
  Some related `ApplicationProjectType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationProjectTypeFilter

  """
  No related `ApplicationProjectType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationProjectTypeFilter
}

"""
A filter to be used against `ApplicationProjectType` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationProjectTypeFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `projectType` field."""
  projectType: StringFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """A related `applicationByApplicationId` exists."""
  applicationByApplicationIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [ApplicationProjectTypeFilter!]

  """Checks for any expressions in this list."""
  or: [ApplicationProjectTypeFilter!]

  """Negates the expression."""
  not: ApplicationProjectTypeFilter
}

"""
A filter to be used against many `Notification` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyNotificationFilter {
  """
  Every related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: NotificationFilter

  """
  Some related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: NotificationFilter

  """
  No related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: NotificationFilter
}

"""
A filter to be used against `Notification` object types. All fields are combined with a logical ‘and.’
"""
input NotificationFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `notificationType` field."""
  notificationType: StringFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `jsonData` field."""
  jsonData: JSONFilter

  """Filter by the object’s `emailRecordId` field."""
  emailRecordId: IntFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """A related `applicationByApplicationId` exists."""
  applicationByApplicationIdExists: Boolean

  """Filter by the object’s `emailRecordByEmailRecordId` relation."""
  emailRecordByEmailRecordId: EmailRecordFilter

  """A related `emailRecordByEmailRecordId` exists."""
  emailRecordByEmailRecordIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [NotificationFilter!]

  """Checks for any expressions in this list."""
  or: [NotificationFilter!]

  """Negates the expression."""
  not: NotificationFilter
}

"""
A filter to be used against `EmailRecord` object types. All fields are combined with a logical ‘and.’
"""
input EmailRecordFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `toEmail` field."""
  toEmail: StringFilter

  """Filter by the object’s `ccEmail` field."""
  ccEmail: StringFilter

  """Filter by the object’s `subject` field."""
  subject: StringFilter

  """Filter by the object’s `body` field."""
  body: StringFilter

  """Filter by the object’s `messageId` field."""
  messageId: StringFilter

  """Filter by the object’s `jsonData` field."""
  jsonData: JSONFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `notificationsByEmailRecordId` relation."""
  notificationsByEmailRecordId: EmailRecordToManyNotificationFilter

  """Some related `notificationsByEmailRecordId` exist."""
  notificationsByEmailRecordIdExist: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [EmailRecordFilter!]

  """Checks for any expressions in this list."""
  or: [EmailRecordFilter!]

  """Negates the expression."""
  not: EmailRecordFilter
}

"""
A filter to be used against many `Notification` object types. All fields are combined with a logical ‘and.’
"""
input EmailRecordToManyNotificationFilter {
  """
  Every related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: NotificationFilter

  """
  Some related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: NotificationFilter

  """
  No related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: NotificationFilter
}

"""
A filter to be used against many `ApplicationPendingChangeRequest` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyApplicationPendingChangeRequestFilter {
  """
  Every related `ApplicationPendingChangeRequest` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationPendingChangeRequestFilter

  """
  Some related `ApplicationPendingChangeRequest` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationPendingChangeRequestFilter

  """
  No related `ApplicationPendingChangeRequest` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationPendingChangeRequestFilter
}

"""
A filter to be used against `ApplicationPendingChangeRequest` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationPendingChangeRequestFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `isPending` field."""
  isPending: BooleanFilter

  """Filter by the object’s `comment` field."""
  comment: StringFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """A related `applicationByApplicationId` exists."""
  applicationByApplicationIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [ApplicationPendingChangeRequestFilter!]

  """Checks for any expressions in this list."""
  or: [ApplicationPendingChangeRequestFilter!]

  """Negates the expression."""
  not: ApplicationPendingChangeRequestFilter
}

"""
A filter to be used against many `ApplicationAnnounced` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationToManyApplicationAnnouncedFilter {
  """
  Every related `ApplicationAnnounced` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationAnnouncedFilter

  """
  Some related `ApplicationAnnounced` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationAnnouncedFilter

  """
  No related `ApplicationAnnounced` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationAnnouncedFilter
}

"""
A filter to be used against `ApplicationAnnounced` object types. All fields are combined with a logical ‘and.’
"""
input ApplicationAnnouncedFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `announced` field."""
  announced: BooleanFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `applicationByApplicationId` relation."""
  applicationByApplicationId: ApplicationFilter

  """A related `applicationByApplicationId` exists."""
  applicationByApplicationIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [ApplicationAnnouncedFilter!]

  """Checks for any expressions in this list."""
  or: [ApplicationAnnouncedFilter!]

  """Negates the expression."""
  not: ApplicationAnnouncedFilter
}

"""
A filter to be used against `GaplessCounter` object types. All fields are combined with a logical ‘and.’
"""
input GaplessCounterFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `counter` field."""
  counter: IntFilter

  """Filter by the object’s `intakesByCounterId` relation."""
  intakesByCounterId: GaplessCounterToManyIntakeFilter

  """Some related `intakesByCounterId` exist."""
  intakesByCounterIdExist: Boolean

  """Checks for all expressions in this list."""
  and: [GaplessCounterFilter!]

  """Checks for any expressions in this list."""
  or: [GaplessCounterFilter!]

  """Negates the expression."""
  not: GaplessCounterFilter
}

"""
A filter to be used against many `Intake` object types. All fields are combined with a logical ‘and.’
"""
input GaplessCounterToManyIntakeFilter {
  """
  Every related `Intake` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: IntakeFilter

  """
  Some related `Intake` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: IntakeFilter

  """
  No related `Intake` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: IntakeFilter
}

"""
A filter to be used against many `Application` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyApplicationFilter {
  """
  Every related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationFilter

  """
  Some related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationFilter

  """
  No related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationFilter
}

"""
A filter to be used against many `ApplicationStatus` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyApplicationStatusFilter {
  """
  Every related `ApplicationStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationStatusFilter

  """
  Some related `ApplicationStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationStatusFilter

  """
  No related `ApplicationStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationStatusFilter
}

"""
A filter to be used against many `Attachment` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyAttachmentFilter {
  """
  Every related `Attachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AttachmentFilter

  """
  Some related `Attachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AttachmentFilter

  """
  No related `Attachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AttachmentFilter
}

"""
A filter to be used against many `FormData` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyFormDataFilter {
  """
  Every related `FormData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FormDataFilter

  """
  Some related `FormData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FormDataFilter

  """
  No related `FormData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FormDataFilter
}

"""
A filter to be used against many `Analyst` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyAnalystFilter {
  """
  Every related `Analyst` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AnalystFilter

  """
  Some related `Analyst` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AnalystFilter

  """
  No related `Analyst` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AnalystFilter
}

"""
A filter to be used against many `ApplicationAnalystLead` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyApplicationAnalystLeadFilter {
  """
  Every related `ApplicationAnalystLead` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationAnalystLeadFilter

  """
  Some related `ApplicationAnalystLead` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationAnalystLeadFilter

  """
  No related `ApplicationAnalystLead` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationAnalystLeadFilter
}

"""
A filter to be used against many `RfiData` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyRfiDataFilter {
  """
  Every related `RfiData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RfiDataFilter

  """
  Some related `RfiData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RfiDataFilter

  """
  No related `RfiData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RfiDataFilter
}

"""
A filter to be used against many `AssessmentData` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyAssessmentDataFilter {
  """
  Every related `AssessmentData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AssessmentDataFilter

  """
  Some related `AssessmentData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AssessmentDataFilter

  """
  No related `AssessmentData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AssessmentDataFilter
}

"""
A filter to be used against many `ApplicationPackage` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyApplicationPackageFilter {
  """
  Every related `ApplicationPackage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationPackageFilter

  """
  Some related `ApplicationPackage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationPackageFilter

  """
  No related `ApplicationPackage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationPackageFilter
}

"""
A filter to be used against many `RecordVersion` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyRecordVersionFilter {
  """
  Every related `RecordVersion` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RecordVersionFilter

  """
  Some related `RecordVersion` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RecordVersionFilter

  """
  No related `RecordVersion` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RecordVersionFilter
}

"""
A filter to be used against `RecordVersion` object types. All fields are combined with a logical ‘and.’
"""
input RecordVersionFilter {
  """Filter by the object’s `rowId` field."""
  rowId: BigIntFilter

  """Filter by the object’s `recordId` field."""
  recordId: UUIDFilter

  """Filter by the object’s `oldRecordId` field."""
  oldRecordId: UUIDFilter

  """Filter by the object’s `op` field."""
  op: OperationFilter

  """Filter by the object’s `ts` field."""
  ts: DatetimeFilter

  """Filter by the object’s `tableOid` field."""
  tableOid: BigFloatFilter

  """Filter by the object’s `tableSchema` field."""
  tableSchema: StringFilter

  """Filter by the object’s `tableName` field."""
  tableName: StringFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `record` field."""
  record: JSONFilter

  """Filter by the object’s `oldRecord` field."""
  oldRecord: JSONFilter

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [RecordVersionFilter!]

  """Checks for any expressions in this list."""
  or: [RecordVersionFilter!]

  """Negates the expression."""
  not: RecordVersionFilter
}

"""
A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’
"""
input BigIntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BigInt

  """Not equal to the specified value."""
  notEqualTo: BigInt

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigInt

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigInt

  """Included in the specified list."""
  in: [BigInt!]

  """Not included in the specified list."""
  notIn: [BigInt!]

  """Less than the specified value."""
  lessThan: BigInt

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigInt

  """Greater than the specified value."""
  greaterThan: BigInt

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigInt
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""
A filter to be used against Operation fields. All fields are combined with a logical ‘and.’
"""
input OperationFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Operation

  """Not equal to the specified value."""
  notEqualTo: Operation

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Operation

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Operation

  """Included in the specified list."""
  in: [Operation!]

  """Not included in the specified list."""
  notIn: [Operation!]

  """Less than the specified value."""
  lessThan: Operation

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Operation

  """Greater than the specified value."""
  greaterThan: Operation

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Operation
}

enum Operation {
  INSERT
  UPDATE
  DELETE
  TRUNCATE
}

"""
A filter to be used against BigFloat fields. All fields are combined with a logical ‘and.’
"""
input BigFloatFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BigFloat

  """Not equal to the specified value."""
  notEqualTo: BigFloat

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigFloat

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigFloat

  """Included in the specified list."""
  in: [BigFloat!]

  """Not included in the specified list."""
  notIn: [BigFloat!]

  """Less than the specified value."""
  lessThan: BigFloat

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigFloat

  """Greater than the specified value."""
  greaterThan: BigFloat

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigFloat
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""
A filter to be used against many `ConditionalApprovalData` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyConditionalApprovalDataFilter {
  """
  Every related `ConditionalApprovalData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ConditionalApprovalDataFilter

  """
  Some related `ConditionalApprovalData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ConditionalApprovalDataFilter

  """
  No related `ConditionalApprovalData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ConditionalApprovalDataFilter
}

"""
A filter to be used against many `GisData` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyGisDataFilter {
  """
  Every related `GisData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: GisDataFilter

  """
  Some related `GisData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: GisDataFilter

  """
  No related `GisData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: GisDataFilter
}

"""
A filter to be used against many `ApplicationGisData` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyApplicationGisDataFilter {
  """
  Every related `ApplicationGisData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationGisDataFilter

  """
  Some related `ApplicationGisData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationGisDataFilter

  """
  No related `ApplicationGisData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationGisDataFilter
}

"""
A filter to be used against many `Announcement` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyAnnouncementFilter {
  """
  Every related `Announcement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AnnouncementFilter

  """
  Some related `Announcement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AnnouncementFilter

  """
  No related `Announcement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AnnouncementFilter
}

"""
A filter to be used against many `ApplicationAnnouncement` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyApplicationAnnouncementFilter {
  """
  Every related `ApplicationAnnouncement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationAnnouncementFilter

  """
  Some related `ApplicationAnnouncement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationAnnouncementFilter

  """
  No related `ApplicationAnnouncement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationAnnouncementFilter
}

"""
A filter to be used against many `ApplicationGisAssessmentHh` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyApplicationGisAssessmentHhFilter {
  """
  Every related `ApplicationGisAssessmentHh` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationGisAssessmentHhFilter

  """
  Some related `ApplicationGisAssessmentHh` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationGisAssessmentHhFilter

  """
  No related `ApplicationGisAssessmentHh` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationGisAssessmentHhFilter
}

"""
A filter to be used against many `ApplicationSowData` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyApplicationSowDataFilter {
  """
  Every related `ApplicationSowData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationSowDataFilter

  """
  Some related `ApplicationSowData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationSowDataFilter

  """
  No related `ApplicationSowData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationSowDataFilter
}

"""
A filter to be used against many `SowTab2` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManySowTab2Filter {
  """
  Every related `SowTab2` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SowTab2Filter

  """
  Some related `SowTab2` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SowTab2Filter

  """
  No related `SowTab2` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SowTab2Filter
}

"""
A filter to be used against many `SowTab1` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManySowTab1Filter {
  """
  Every related `SowTab1` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SowTab1Filter

  """
  Some related `SowTab1` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SowTab1Filter

  """
  No related `SowTab1` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SowTab1Filter
}

"""
A filter to be used against many `ProjectInformationData` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyProjectInformationDataFilter {
  """
  Every related `ProjectInformationData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectInformationDataFilter

  """
  Some related `ProjectInformationData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectInformationDataFilter

  """
  No related `ProjectInformationData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectInformationDataFilter
}

"""
A filter to be used against many `SowTab7` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManySowTab7Filter {
  """
  Every related `SowTab7` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SowTab7Filter

  """
  Some related `SowTab7` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SowTab7Filter

  """
  No related `SowTab7` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SowTab7Filter
}

"""
A filter to be used against many `SowTab8` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManySowTab8Filter {
  """
  Every related `SowTab8` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SowTab8Filter

  """
  Some related `SowTab8` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SowTab8Filter

  """
  No related `SowTab8` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SowTab8Filter
}

"""
A filter to be used against many `ChangeRequestData` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyChangeRequestDataFilter {
  """
  Every related `ChangeRequestData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ChangeRequestDataFilter

  """
  Some related `ChangeRequestData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ChangeRequestDataFilter

  """
  No related `ChangeRequestData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ChangeRequestDataFilter
}

"""
A filter to be used against many `ApplicationCommunityProgressReportData` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyApplicationCommunityProgressReportDataFilter {
  """
  Every related `ApplicationCommunityProgressReportData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationCommunityProgressReportDataFilter

  """
  Some related `ApplicationCommunityProgressReportData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationCommunityProgressReportDataFilter

  """
  No related `ApplicationCommunityProgressReportData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationCommunityProgressReportDataFilter
}

"""
A filter to be used against many `ApplicationCommunityReportExcelData` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyApplicationCommunityReportExcelDataFilter {
  """
  Every related `ApplicationCommunityReportExcelData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationCommunityReportExcelDataFilter

  """
  Some related `ApplicationCommunityReportExcelData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationCommunityReportExcelDataFilter

  """
  No related `ApplicationCommunityReportExcelData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationCommunityReportExcelDataFilter
}

"""
A filter to be used against many `ApplicationClaimsData` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyApplicationClaimsDataFilter {
  """
  Every related `ApplicationClaimsData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationClaimsDataFilter

  """
  Some related `ApplicationClaimsData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationClaimsDataFilter

  """
  No related `ApplicationClaimsData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationClaimsDataFilter
}

"""
A filter to be used against many `ApplicationClaimsExcelData` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyApplicationClaimsExcelDataFilter {
  """
  Every related `ApplicationClaimsExcelData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationClaimsExcelDataFilter

  """
  Some related `ApplicationClaimsExcelData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationClaimsExcelDataFilter

  """
  No related `ApplicationClaimsExcelData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationClaimsExcelDataFilter
}

"""
A filter to be used against many `ApplicationMilestoneData` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyApplicationMilestoneDataFilter {
  """
  Every related `ApplicationMilestoneData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationMilestoneDataFilter

  """
  Some related `ApplicationMilestoneData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationMilestoneDataFilter

  """
  No related `ApplicationMilestoneData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationMilestoneDataFilter
}

"""
A filter to be used against many `ApplicationMilestoneExcelData` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyApplicationMilestoneExcelDataFilter {
  """
  Every related `ApplicationMilestoneExcelData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationMilestoneExcelDataFilter

  """
  Some related `ApplicationMilestoneExcelData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationMilestoneExcelDataFilter

  """
  No related `ApplicationMilestoneExcelData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationMilestoneExcelDataFilter
}

"""
A filter to be used against many `CbcProject` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyCbcProjectFilter {
  """
  Every related `CbcProject` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CbcProjectFilter

  """
  Some related `CbcProject` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CbcProjectFilter

  """
  No related `CbcProject` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CbcProjectFilter
}

"""
A filter to be used against `CbcProject` object types. All fields are combined with a logical ‘and.’
"""
input CbcProjectFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `jsonData` field."""
  jsonData: JSONFilter

  """Filter by the object’s `sharepointTimestamp` field."""
  sharepointTimestamp: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [CbcProjectFilter!]

  """Checks for any expressions in this list."""
  or: [CbcProjectFilter!]

  """Negates the expression."""
  not: CbcProjectFilter
}

"""
A filter to be used against many `ApplicationInternalDescription` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyApplicationInternalDescriptionFilter {
  """
  Every related `ApplicationInternalDescription` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationInternalDescriptionFilter

  """
  Some related `ApplicationInternalDescription` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationInternalDescriptionFilter

  """
  No related `ApplicationInternalDescription` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationInternalDescriptionFilter
}

"""
A filter to be used against many `ApplicationProjectType` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyApplicationProjectTypeFilter {
  """
  Every related `ApplicationProjectType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationProjectTypeFilter

  """
  Some related `ApplicationProjectType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationProjectTypeFilter

  """
  No related `ApplicationProjectType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationProjectTypeFilter
}

"""
A filter to be used against many `EmailRecord` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyEmailRecordFilter {
  """
  Every related `EmailRecord` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EmailRecordFilter

  """
  Some related `EmailRecord` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EmailRecordFilter

  """
  No related `EmailRecord` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EmailRecordFilter
}

"""
A filter to be used against many `Notification` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyNotificationFilter {
  """
  Every related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: NotificationFilter

  """
  Some related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: NotificationFilter

  """
  No related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: NotificationFilter
}

"""
A filter to be used against many `ApplicationPendingChangeRequest` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyApplicationPendingChangeRequestFilter {
  """
  Every related `ApplicationPendingChangeRequest` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationPendingChangeRequestFilter

  """
  Some related `ApplicationPendingChangeRequest` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationPendingChangeRequestFilter

  """
  No related `ApplicationPendingChangeRequest` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationPendingChangeRequestFilter
}

"""
A filter to be used against many `Cbc` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyCbcFilter {
  """
  Every related `Cbc` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CbcFilter

  """
  Some related `Cbc` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CbcFilter

  """
  No related `Cbc` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CbcFilter
}

"""
A filter to be used against `Cbc` object types. All fields are combined with a logical ‘and.’
"""
input CbcFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `projectNumber` field."""
  projectNumber: IntFilter

  """Filter by the object’s `sharepointTimestamp` field."""
  sharepointTimestamp: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `cbcDataByCbcId` relation."""
  cbcDataByCbcId: CbcToManyCbcDataFilter

  """Some related `cbcDataByCbcId` exist."""
  cbcDataByCbcIdExist: Boolean

  """Filter by the object’s `cbcDataByProjectNumber` relation."""
  cbcDataByProjectNumber: CbcToManyCbcDataFilter

  """Some related `cbcDataByProjectNumber` exist."""
  cbcDataByProjectNumberExist: Boolean

  """
  Filter by the object’s `cbcApplicationPendingChangeRequestsByCbcId` relation.
  """
  cbcApplicationPendingChangeRequestsByCbcId: CbcToManyCbcApplicationPendingChangeRequestFilter

  """Some related `cbcApplicationPendingChangeRequestsByCbcId` exist."""
  cbcApplicationPendingChangeRequestsByCbcIdExist: Boolean

  """Filter by the object’s `cbcProjectCommunitiesByCbcId` relation."""
  cbcProjectCommunitiesByCbcId: CbcToManyCbcProjectCommunityFilter

  """Some related `cbcProjectCommunitiesByCbcId` exist."""
  cbcProjectCommunitiesByCbcIdExist: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [CbcFilter!]

  """Checks for any expressions in this list."""
  or: [CbcFilter!]

  """Negates the expression."""
  not: CbcFilter
}

"""
A filter to be used against many `CbcData` object types. All fields are combined with a logical ‘and.’
"""
input CbcToManyCbcDataFilter {
  """
  Every related `CbcData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CbcDataFilter

  """
  Some related `CbcData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CbcDataFilter

  """
  No related `CbcData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CbcDataFilter
}

"""
A filter to be used against `CbcData` object types. All fields are combined with a logical ‘and.’
"""
input CbcDataFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `cbcId` field."""
  cbcId: IntFilter

  """Filter by the object’s `projectNumber` field."""
  projectNumber: IntFilter

  """Filter by the object’s `jsonData` field."""
  jsonData: JSONFilter

  """Filter by the object’s `sharepointTimestamp` field."""
  sharepointTimestamp: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `cbcDataChangeReasonsByCbcDataId` relation."""
  cbcDataChangeReasonsByCbcDataId: CbcDataToManyCbcDataChangeReasonFilter

  """Some related `cbcDataChangeReasonsByCbcDataId` exist."""
  cbcDataChangeReasonsByCbcDataIdExist: Boolean

  """Filter by the object’s `cbcByCbcId` relation."""
  cbcByCbcId: CbcFilter

  """A related `cbcByCbcId` exists."""
  cbcByCbcIdExists: Boolean

  """Filter by the object’s `cbcByProjectNumber` relation."""
  cbcByProjectNumber: CbcFilter

  """A related `cbcByProjectNumber` exists."""
  cbcByProjectNumberExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [CbcDataFilter!]

  """Checks for any expressions in this list."""
  or: [CbcDataFilter!]

  """Negates the expression."""
  not: CbcDataFilter
}

"""
A filter to be used against many `CbcDataChangeReason` object types. All fields are combined with a logical ‘and.’
"""
input CbcDataToManyCbcDataChangeReasonFilter {
  """
  Every related `CbcDataChangeReason` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CbcDataChangeReasonFilter

  """
  Some related `CbcDataChangeReason` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CbcDataChangeReasonFilter

  """
  No related `CbcDataChangeReason` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CbcDataChangeReasonFilter
}

"""
A filter to be used against `CbcDataChangeReason` object types. All fields are combined with a logical ‘and.’
"""
input CbcDataChangeReasonFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `cbcDataId` field."""
  cbcDataId: IntFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `cbcDataByCbcDataId` relation."""
  cbcDataByCbcDataId: CbcDataFilter

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [CbcDataChangeReasonFilter!]

  """Checks for any expressions in this list."""
  or: [CbcDataChangeReasonFilter!]

  """Negates the expression."""
  not: CbcDataChangeReasonFilter
}

"""
A filter to be used against many `CbcApplicationPendingChangeRequest` object types. All fields are combined with a logical ‘and.’
"""
input CbcToManyCbcApplicationPendingChangeRequestFilter {
  """
  Every related `CbcApplicationPendingChangeRequest` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CbcApplicationPendingChangeRequestFilter

  """
  Some related `CbcApplicationPendingChangeRequest` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CbcApplicationPendingChangeRequestFilter

  """
  No related `CbcApplicationPendingChangeRequest` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CbcApplicationPendingChangeRequestFilter
}

"""
A filter to be used against `CbcApplicationPendingChangeRequest` object types. All fields are combined with a logical ‘and.’
"""
input CbcApplicationPendingChangeRequestFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `cbcId` field."""
  cbcId: IntFilter

  """Filter by the object’s `isPending` field."""
  isPending: BooleanFilter

  """Filter by the object’s `comment` field."""
  comment: StringFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `cbcByCbcId` relation."""
  cbcByCbcId: CbcFilter

  """A related `cbcByCbcId` exists."""
  cbcByCbcIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [CbcApplicationPendingChangeRequestFilter!]

  """Checks for any expressions in this list."""
  or: [CbcApplicationPendingChangeRequestFilter!]

  """Negates the expression."""
  not: CbcApplicationPendingChangeRequestFilter
}

"""
A filter to be used against many `CbcProjectCommunity` object types. All fields are combined with a logical ‘and.’
"""
input CbcToManyCbcProjectCommunityFilter {
  """
  Every related `CbcProjectCommunity` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CbcProjectCommunityFilter

  """
  Some related `CbcProjectCommunity` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CbcProjectCommunityFilter

  """
  No related `CbcProjectCommunity` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CbcProjectCommunityFilter
}

"""
A filter to be used against `CbcProjectCommunity` object types. All fields are combined with a logical ‘and.’
"""
input CbcProjectCommunityFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `cbcId` field."""
  cbcId: IntFilter

  """Filter by the object’s `communitiesSourceDataId` field."""
  communitiesSourceDataId: IntFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `cbcByCbcId` relation."""
  cbcByCbcId: CbcFilter

  """A related `cbcByCbcId` exists."""
  cbcByCbcIdExists: Boolean

  """
  Filter by the object’s `communitiesSourceDataByCommunitiesSourceDataId` relation.
  """
  communitiesSourceDataByCommunitiesSourceDataId: CommunitiesSourceDataFilter

  """A related `communitiesSourceDataByCommunitiesSourceDataId` exists."""
  communitiesSourceDataByCommunitiesSourceDataIdExists: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [CbcProjectCommunityFilter!]

  """Checks for any expressions in this list."""
  or: [CbcProjectCommunityFilter!]

  """Negates the expression."""
  not: CbcProjectCommunityFilter
}

"""
A filter to be used against `CommunitiesSourceData` object types. All fields are combined with a logical ‘and.’
"""
input CommunitiesSourceDataFilter {
  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `geographicNameId` field."""
  geographicNameId: IntFilter

  """Filter by the object’s `bcGeographicName` field."""
  bcGeographicName: StringFilter

  """Filter by the object’s `geographicType` field."""
  geographicType: StringFilter

  """Filter by the object’s `regionalDistrict` field."""
  regionalDistrict: StringFilter

  """Filter by the object’s `economicRegion` field."""
  economicRegion: StringFilter

  """Filter by the object’s `latitude` field."""
  latitude: FloatFilter

  """Filter by the object’s `longitude` field."""
  longitude: FloatFilter

  """Filter by the object’s `mapLink` field."""
  mapLink: StringFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """
  Filter by the object’s `cbcProjectCommunitiesByCommunitiesSourceDataId` relation.
  """
  cbcProjectCommunitiesByCommunitiesSourceDataId: CommunitiesSourceDataToManyCbcProjectCommunityFilter

  """Some related `cbcProjectCommunitiesByCommunitiesSourceDataId` exist."""
  cbcProjectCommunitiesByCommunitiesSourceDataIdExist: Boolean

  """Filter by the object’s `ccbcUserByCreatedBy` relation."""
  ccbcUserByCreatedBy: CcbcUserFilter

  """A related `ccbcUserByCreatedBy` exists."""
  ccbcUserByCreatedByExists: Boolean

  """Filter by the object’s `ccbcUserByUpdatedBy` relation."""
  ccbcUserByUpdatedBy: CcbcUserFilter

  """A related `ccbcUserByUpdatedBy` exists."""
  ccbcUserByUpdatedByExists: Boolean

  """Filter by the object’s `ccbcUserByArchivedBy` relation."""
  ccbcUserByArchivedBy: CcbcUserFilter

  """A related `ccbcUserByArchivedBy` exists."""
  ccbcUserByArchivedByExists: Boolean

  """Checks for all expressions in this list."""
  and: [CommunitiesSourceDataFilter!]

  """Checks for any expressions in this list."""
  or: [CommunitiesSourceDataFilter!]

  """Negates the expression."""
  not: CommunitiesSourceDataFilter
}

"""
A filter to be used against many `CbcProjectCommunity` object types. All fields are combined with a logical ‘and.’
"""
input CommunitiesSourceDataToManyCbcProjectCommunityFilter {
  """
  Every related `CbcProjectCommunity` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CbcProjectCommunityFilter

  """
  Some related `CbcProjectCommunity` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CbcProjectCommunityFilter

  """
  No related `CbcProjectCommunity` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CbcProjectCommunityFilter
}

"""
A filter to be used against many `CbcData` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyCbcDataFilter {
  """
  Every related `CbcData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CbcDataFilter

  """
  Some related `CbcData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CbcDataFilter

  """
  No related `CbcData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CbcDataFilter
}

"""
A filter to be used against many `CbcApplicationPendingChangeRequest` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyCbcApplicationPendingChangeRequestFilter {
  """
  Every related `CbcApplicationPendingChangeRequest` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CbcApplicationPendingChangeRequestFilter

  """
  Some related `CbcApplicationPendingChangeRequest` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CbcApplicationPendingChangeRequestFilter

  """
  No related `CbcApplicationPendingChangeRequest` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CbcApplicationPendingChangeRequestFilter
}

"""
A filter to be used against many `CbcDataChangeReason` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyCbcDataChangeReasonFilter {
  """
  Every related `CbcDataChangeReason` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CbcDataChangeReasonFilter

  """
  Some related `CbcDataChangeReason` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CbcDataChangeReasonFilter

  """
  No related `CbcDataChangeReason` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CbcDataChangeReasonFilter
}

"""
A filter to be used against many `CommunitiesSourceData` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyCommunitiesSourceDataFilter {
  """
  Every related `CommunitiesSourceData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CommunitiesSourceDataFilter

  """
  Some related `CommunitiesSourceData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CommunitiesSourceDataFilter

  """
  No related `CommunitiesSourceData` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CommunitiesSourceDataFilter
}

"""
A filter to be used against many `CbcProjectCommunity` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyCbcProjectCommunityFilter {
  """
  Every related `CbcProjectCommunity` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CbcProjectCommunityFilter

  """
  Some related `CbcProjectCommunity` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CbcProjectCommunityFilter

  """
  No related `CbcProjectCommunity` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CbcProjectCommunityFilter
}

"""
A filter to be used against many `ApplicationAnnounced` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyApplicationAnnouncedFilter {
  """
  Every related `ApplicationAnnounced` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ApplicationAnnouncedFilter

  """
  Some related `ApplicationAnnounced` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ApplicationAnnouncedFilter

  """
  No related `ApplicationAnnounced` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ApplicationAnnouncedFilter
}

"""
A filter to be used against many `KeycloakJwt` object types. All fields are combined with a logical ‘and.’
"""
input CcbcUserToManyKeycloakJwtFilter {
  """
  Every related `KeycloakJwt` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: KeycloakJwtFilter

  """
  Some related `KeycloakJwt` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: KeycloakJwtFilter

  """
  No related `KeycloakJwt` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: KeycloakJwtFilter
}

"""
A filter to be used against `KeycloakJwt` object types. All fields are combined with a logical ‘and.’
"""
input KeycloakJwtFilter {
  """Filter by the object’s `jti` field."""
  jti: UUIDFilter

  """Filter by the object’s `exp` field."""
  exp: IntFilter

  """Filter by the object’s `nbf` field."""
  nbf: IntFilter

  """Filter by the object’s `iat` field."""
  iat: IntFilter

  """Filter by the object’s `iss` field."""
  iss: StringFilter

  """Filter by the object’s `aud` field."""
  aud: StringFilter

  """Filter by the object’s `sub` field."""
  sub: StringFilter

  """Filter by the object’s `typ` field."""
  typ: StringFilter

  """Filter by the object’s `azp` field."""
  azp: StringFilter

  """Filter by the object’s `authTime` field."""
  authTime: IntFilter

  """Filter by the object’s `sessionState` field."""
  sessionState: UUIDFilter

  """Filter by the object’s `acr` field."""
  acr: StringFilter

  """Filter by the object’s `emailVerified` field."""
  emailVerified: BooleanFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `preferredUsername` field."""
  preferredUsername: StringFilter

  """Filter by the object’s `givenName` field."""
  givenName: StringFilter

  """Filter by the object’s `familyName` field."""
  familyName: StringFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `brokerSessionId` field."""
  brokerSessionId: StringFilter

  """Filter by the object’s `priorityGroup` field."""
  priorityGroup: StringFilter

  """Filter by the object’s `identityProvider` field."""
  identityProvider: StringFilter

  """Filter by the object’s `userGroups` field."""
  userGroups: StringListFilter

  """Filter by the object’s `authRole` field."""
  authRole: StringFilter

  """Filter by the object’s `ccbcUserBySub` relation."""
  ccbcUserBySub: CcbcUserFilter

  """A related `ccbcUserBySub` exists."""
  ccbcUserBySubExists: Boolean

  """Checks for all expressions in this list."""
  and: [KeycloakJwtFilter!]

  """Checks for any expressions in this list."""
  or: [KeycloakJwtFilter!]

  """Negates the expression."""
  not: KeycloakJwtFilter
}

"""
A filter to be used against String List fields. All fields are combined with a logical ‘and.’
"""
input StringListFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: [String]

  """Not equal to the specified value."""
  notEqualTo: [String]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [String]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [String]

  """Less than the specified value."""
  lessThan: [String]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [String]

  """Greater than the specified value."""
  greaterThan: [String]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [String]

  """Contains the specified list of values."""
  contains: [String]

  """Contained by the specified list of values."""
  containedBy: [String]

  """Overlaps the specified list of values."""
  overlaps: [String]

  """Any array item is equal to the specified value."""
  anyEqualTo: String

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: String

  """Any array item is less than the specified value."""
  anyLessThan: String

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: String

  """Any array item is greater than the specified value."""
  anyGreaterThan: String

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: String
}

"""A connection to a list of `Intake` values."""
type IntakesConnection {
  """A list of `Intake` objects."""
  nodes: [Intake]!

  """
  A list of edges which contains the `Intake` and cursor to aid in pagination.
  """
  edges: [IntakesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Intake` you could get from the connection."""
  totalCount: Int!
}

"""
Table containing intake numbers and their respective open and closing dates
"""
type Intake implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for each intake number"""
  rowId: Int!

  """Open date and time for an intake number"""
  openTimestamp: Datetime!

  """Close date and time for an intake number"""
  closeTimestamp: Datetime!

  """Unique intake number for a set of CCBC IDs"""
  ccbcIntakeNumber: Int!

  """
  The name of the sequence used to generate CCBC ids. It is added via a trigger
  """
  applicationNumberSeqName: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """
  The counter_id used by the gapless_counter to generate a gapless intake id
  """
  counterId: Int

  """A description of the intake"""
  description: String

  """A column to denote whether the intake is visible to the public"""
  hidden: Boolean

  """
  A column that stores the code used to access the hidden intake. Only used on intakes that are hidden
  """
  hiddenCode: UUID

  """A column to denote whether the intake is a rolling intake"""
  rollingIntake: Boolean

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads a single `GaplessCounter` that is related to this `Intake`."""
  gaplessCounterByCounterId: GaplessCounter

  """Reads and enables pagination through a set of `Application`."""
  applicationsByIntakeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): ApplicationsConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationIntakeIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): IntakeCcbcUsersByApplicationIntakeIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationIntakeIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): IntakeCcbcUsersByApplicationIntakeIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationIntakeIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): IntakeCcbcUsersByApplicationIntakeIdAndArchivedByManyToManyConnection!
}

"""Table to hold counter for creating gapless sequences"""
type GaplessCounter implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Primary key for the gapless counter"""
  rowId: Int!

  """Primary key for the gapless counter"""
  counter: Int!

  """Reads and enables pagination through a set of `Intake`."""
  intakesByCounterId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IntakeFilter
  ): IntakesConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByIntakeCounterIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): GaplessCounterCcbcUsersByIntakeCounterIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByIntakeCounterIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): GaplessCounterCcbcUsersByIntakeCounterIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByIntakeCounterIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): GaplessCounterCcbcUsersByIntakeCounterIdAndArchivedByManyToManyConnection!
}

"""Methods to use when ordering `Intake`."""
enum IntakesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  OPEN_TIMESTAMP_ASC
  OPEN_TIMESTAMP_DESC
  CLOSE_TIMESTAMP_ASC
  CLOSE_TIMESTAMP_DESC
  CCBC_INTAKE_NUMBER_ASC
  CCBC_INTAKE_NUMBER_DESC
  APPLICATION_NUMBER_SEQ_NAME_ASC
  APPLICATION_NUMBER_SEQ_NAME_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  COUNTER_ID_ASC
  COUNTER_ID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  HIDDEN_ASC
  HIDDEN_DESC
  HIDDEN_CODE_ASC
  HIDDEN_CODE_DESC
  ROLLING_INTAKE_ASC
  ROLLING_INTAKE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Intake` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input IntakeCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `openTimestamp` field."""
  openTimestamp: Datetime

  """Checks for equality with the object’s `closeTimestamp` field."""
  closeTimestamp: Datetime

  """Checks for equality with the object’s `ccbcIntakeNumber` field."""
  ccbcIntakeNumber: Int

  """
  Checks for equality with the object’s `applicationNumberSeqName` field.
  """
  applicationNumberSeqName: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `counterId` field."""
  counterId: Int

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `hidden` field."""
  hidden: Boolean

  """Checks for equality with the object’s `hiddenCode` field."""
  hiddenCode: UUID

  """Checks for equality with the object’s `rollingIntake` field."""
  rollingIntake: Boolean
}

"""A connection to a list of `CcbcUser` values, with data from `Intake`."""
type GaplessCounterCcbcUsersByIntakeCounterIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Intake`, and the cursor to aid in pagination.
  """
  edges: [GaplessCounterCcbcUsersByIntakeCounterIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Intake`."""
type GaplessCounterCcbcUsersByIntakeCounterIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Intake`."""
  intakesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IntakeFilter
  ): IntakesConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Intake`."""
type GaplessCounterCcbcUsersByIntakeCounterIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Intake`, and the cursor to aid in pagination.
  """
  edges: [GaplessCounterCcbcUsersByIntakeCounterIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Intake`."""
type GaplessCounterCcbcUsersByIntakeCounterIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Intake`."""
  intakesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IntakeFilter
  ): IntakesConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Intake`."""
type GaplessCounterCcbcUsersByIntakeCounterIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Intake`, and the cursor to aid in pagination.
  """
  edges: [GaplessCounterCcbcUsersByIntakeCounterIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Intake`."""
type GaplessCounterCcbcUsersByIntakeCounterIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Intake`."""
  intakesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IntakeFilter
  ): IntakesConnection!
}

"""A connection to a list of `Application` values."""
type ApplicationsConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application` and cursor to aid in pagination.
  """
  edges: [ApplicationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
Table containing the data associated with the CCBC respondents application
"""
type Application implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Primary key ID for the application"""
  rowId: Int!

  """Reference number assigned to the application"""
  ccbcNumber: String

  """The owner of the application, identified by its JWT sub"""
  owner: String!

  """The intake associated with the application, set when it is submitted"""
  intakeId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `Intake` that is related to this `Application`."""
  intakeByIntakeId: Intake

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationStatusesConnection!

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection!

  """Reads and enables pagination through a set of `ApplicationFormData`."""
  applicationFormDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationFormData`."""
    orderBy: [ApplicationFormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationFormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFormDataFilter
  ): ApplicationFormDataConnection!

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnalystLeadFilter
  ): ApplicationAnalystLeadsConnection!

  """Reads and enables pagination through a set of `ApplicationRfiData`."""
  applicationRfiDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationRfiData`."""
    orderBy: [ApplicationRfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRfiDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRfiDataFilter
  ): ApplicationRfiDataConnection!

  """Reads and enables pagination through a set of `AssessmentData`."""
  assessmentDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection!

  """Reads and enables pagination through a set of `ApplicationPackage`."""
  applicationPackagesByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPackage`."""
    orderBy: [ApplicationPackagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPackageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPackageFilter
  ): ApplicationPackagesConnection!

  """
  Reads and enables pagination through a set of `ConditionalApprovalData`.
  """
  conditionalApprovalDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ConditionalApprovalData`."""
    orderBy: [ConditionalApprovalDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConditionalApprovalDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConditionalApprovalDataFilter
  ): ConditionalApprovalDataConnection!

  """Reads and enables pagination through a set of `ApplicationGisData`."""
  applicationGisDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisDataFilter
  ): ApplicationGisDataConnection!

  """
  Reads and enables pagination through a set of `ApplicationAnnouncement`.
  """
  applicationAnnouncementsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncementFilter
  ): ApplicationAnnouncementsConnection!

  """
  Reads and enables pagination through a set of `ApplicationGisAssessmentHh`.
  """
  applicationGisAssessmentHhsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisAssessmentHh`."""
    orderBy: [ApplicationGisAssessmentHhsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisAssessmentHhCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisAssessmentHhFilter
  ): ApplicationGisAssessmentHhsConnection!

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): ApplicationSowDataConnection!

  """
  Reads and enables pagination through a set of `ProjectInformationData`.
  """
  projectInformationDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProjectInformationData`."""
    orderBy: [ProjectInformationDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectInformationDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectInformationDataFilter
  ): ProjectInformationDataConnection!

  """Reads and enables pagination through a set of `ChangeRequestData`."""
  changeRequestDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChangeRequestData`."""
    orderBy: [ChangeRequestDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeRequestDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeRequestDataFilter
  ): ChangeRequestDataConnection!

  """
  Reads and enables pagination through a set of `ApplicationCommunityProgressReportData`.
  """
  applicationCommunityProgressReportDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    The method to use when ordering `ApplicationCommunityProgressReportData`.
    """
    orderBy: [ApplicationCommunityProgressReportDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityProgressReportDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityProgressReportDataFilter
  ): ApplicationCommunityProgressReportDataConnection!

  """
  Reads and enables pagination through a set of `ApplicationCommunityReportExcelData`.
  """
  applicationCommunityReportExcelDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationCommunityReportExcelData`."""
    orderBy: [ApplicationCommunityReportExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityReportExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityReportExcelDataFilter
  ): ApplicationCommunityReportExcelDataConnection!

  """Reads and enables pagination through a set of `ApplicationClaimsData`."""
  applicationClaimsDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsData`."""
    orderBy: [ApplicationClaimsDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsDataFilter
  ): ApplicationClaimsDataConnection!

  """
  Reads and enables pagination through a set of `ApplicationClaimsExcelData`.
  """
  applicationClaimsExcelDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsExcelData`."""
    orderBy: [ApplicationClaimsExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsExcelDataFilter
  ): ApplicationClaimsExcelDataConnection!

  """
  Reads and enables pagination through a set of `ApplicationMilestoneData`.
  """
  applicationMilestoneDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneData`."""
    orderBy: [ApplicationMilestoneDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneDataFilter
  ): ApplicationMilestoneDataConnection!

  """
  Reads and enables pagination through a set of `ApplicationMilestoneExcelData`.
  """
  applicationMilestoneExcelDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneExcelData`."""
    orderBy: [ApplicationMilestoneExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneExcelDataFilter
  ): ApplicationMilestoneExcelDataConnection!

  """
  Reads and enables pagination through a set of `ApplicationInternalDescription`.
  """
  applicationInternalDescriptionsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationInternalDescription`."""
    orderBy: [ApplicationInternalDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationInternalDescriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationInternalDescriptionFilter
  ): ApplicationInternalDescriptionsConnection!

  """
  Reads and enables pagination through a set of `ApplicationProjectType`.
  """
  applicationProjectTypesByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationProjectType`."""
    orderBy: [ApplicationProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationProjectTypeFilter
  ): ApplicationProjectTypesConnection!

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!

  """
  Reads and enables pagination through a set of `ApplicationPendingChangeRequest`.
  """
  applicationPendingChangeRequestsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPendingChangeRequest`."""
    orderBy: [ApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPendingChangeRequestFilter
  ): ApplicationPendingChangeRequestsConnection!

  """Reads and enables pagination through a set of `ApplicationAnnounced`."""
  applicationAnnouncedsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnounced`."""
    orderBy: [ApplicationAnnouncedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncedCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncedFilter
  ): ApplicationAnnouncedsConnection!

  """Reads and enables pagination through a set of `AssessmentData`."""
  allAssessments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection!

  """
  computed column to return space separated list of amendment numbers for a change request
  """
  amendmentNumbers: String

  """Computed column to return analyst lead of an application"""
  analystLead: String

  """Computed column to return the analyst-visible status of an application"""
  analystStatus: String
  announced: Boolean

  """Computed column that returns list of announcements for the application"""
  announcements(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnnouncementFilter
  ): AnnouncementsConnection!

  """Computed column that takes the slug to return an assessment form"""
  assessmentForm(_assessmentDataType: String!): AssessmentData

  """Computed column to return conditional approval data"""
  conditionalApproval: ConditionalApprovalData

  """Computed column to return external status of an application"""
  externalStatus: String

  """Computed column to display form_data"""
  formData: FormData

  """Computed column to return the GIS assessment household counts"""
  gisAssessmentHh: ApplicationGisAssessmentHh

  """Computed column to return last GIS data for an application"""
  gisData: ApplicationGisData

  """Computed column to return whether the rfi is open"""
  hasRfiOpen: Boolean

  """Computed column that returns list of audit records for application"""
  history(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: HistoryItemFilter
  ): HistoryItemsConnection!
  intakeNumber: Int
  internalDescription: String

  """Computed column to display organization name from json data"""
  organizationName: String

  """Computed column to return the application announced status for an application"""
  package: Int

  """Computed column to return project information data"""
  projectInformation: ProjectInformationData

  """Computed column to display the project name"""
  projectName: String

  """Computed column to return last RFI for an application"""
  rfi: RfiData

  """Computed column to return status of an application"""
  status: String

  """Computed column to return the order of the status"""
  statusOrder: Int

  """
  Computed column to return the status order with the status name appended for sorting and filtering
  """
  statusSortFilter: String
  zone: Int

  """
  Computed column to get single lowest zone from json data, used for sorting
  """
  zones: [Int]

  """Reads and enables pagination through a set of `ApplicationStatusType`."""
  applicationStatusTypesByApplicationStatusApplicationIdAndStatus(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatusType`."""
    orderBy: [ApplicationStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusTypeFilter
  ): ApplicationApplicationStatusTypesByApplicationStatusApplicationIdAndStatusManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationStatusApplicationIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationStatusApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationStatusApplicationIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationStatusApplicationIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationStatusApplicationIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationStatusApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByAttachmentApplicationIdAndApplicationStatusId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationApplicationStatusesByAttachmentApplicationIdAndApplicationStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAttachmentApplicationIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByAttachmentApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAttachmentApplicationIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByAttachmentApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAttachmentApplicationIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByAttachmentApplicationIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `FormData`."""
  formDataByApplicationFormDataApplicationIdAndFormDataId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): ApplicationFormDataByApplicationFormDataApplicationIdAndFormDataIdManyToManyConnection!

  """Reads and enables pagination through a set of `Analyst`."""
  analystsByApplicationAnalystLeadApplicationIdAndAnalystId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnalystFilter
  ): ApplicationAnalystsByApplicationAnalystLeadApplicationIdAndAnalystIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnalystLeadApplicationIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationAnalystLeadApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnalystLeadApplicationIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationAnalystLeadApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnalystLeadApplicationIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationAnalystLeadApplicationIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByApplicationRfiDataApplicationIdAndRfiDataId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RfiDataFilter
  ): ApplicationRfiDataByApplicationRfiDataApplicationIdAndRfiDataIdManyToManyConnection!

  """Reads and enables pagination through a set of `AssessmentType`."""
  assessmentTypesByAssessmentDataApplicationIdAndAssessmentDataType(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentType`."""
    orderBy: [AssessmentTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentTypeFilter
  ): ApplicationAssessmentTypesByAssessmentDataApplicationIdAndAssessmentDataTypeManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAssessmentDataApplicationIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByAssessmentDataApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAssessmentDataApplicationIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByAssessmentDataApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAssessmentDataApplicationIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByAssessmentDataApplicationIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationPackageApplicationIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationPackageApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationPackageApplicationIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationPackageApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationPackageApplicationIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationPackageApplicationIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByConditionalApprovalDataApplicationIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByConditionalApprovalDataApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByConditionalApprovalDataApplicationIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByConditionalApprovalDataApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByConditionalApprovalDataApplicationIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByConditionalApprovalDataApplicationIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `GisData`."""
  gisDataByApplicationGisDataApplicationIdAndBatchId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GisData`."""
    orderBy: [GisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GisDataFilter
  ): ApplicationGisDataByApplicationGisDataApplicationIdAndBatchIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationGisDataApplicationIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationGisDataApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationGisDataApplicationIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationGisDataApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationGisDataApplicationIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationGisDataApplicationIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Announcement`."""
  announcementsByApplicationAnnouncementApplicationIdAndAnnouncementId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Announcement`."""
    orderBy: [AnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnnouncementFilter
  ): ApplicationAnnouncementsByApplicationAnnouncementApplicationIdAndAnnouncementIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnnouncementApplicationIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationAnnouncementApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnnouncementApplicationIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationAnnouncementApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnnouncementApplicationIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationAnnouncementApplicationIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationGisAssessmentHhApplicationIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationGisAssessmentHhApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationGisAssessmentHhApplicationIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationGisAssessmentHhApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationGisAssessmentHhApplicationIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationGisAssessmentHhApplicationIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationSowDataApplicationIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationSowDataApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationSowDataApplicationIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationSowDataApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationSowDataApplicationIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationSowDataApplicationIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByProjectInformationDataApplicationIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByProjectInformationDataApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByProjectInformationDataApplicationIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByProjectInformationDataApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByProjectInformationDataApplicationIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByProjectInformationDataApplicationIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByChangeRequestDataApplicationIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByChangeRequestDataApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByChangeRequestDataApplicationIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByChangeRequestDataApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByChangeRequestDataApplicationIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByChangeRequestDataApplicationIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationCommunityProgressReportDataApplicationIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationCommunityProgressReportDataApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationCommunityProgressReportDataApplicationIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationCommunityProgressReportDataApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationCommunityProgressReportDataApplicationIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationCommunityProgressReportDataApplicationIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationCommunityReportExcelDataApplicationIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationCommunityReportExcelDataApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationCommunityReportExcelDataApplicationIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationCommunityReportExcelDataApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationCommunityReportExcelDataApplicationIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationCommunityReportExcelDataApplicationIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationClaimsDataApplicationIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationClaimsDataApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationClaimsDataApplicationIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationClaimsDataApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationClaimsDataApplicationIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationClaimsDataApplicationIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationClaimsExcelDataApplicationIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationClaimsExcelDataApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationClaimsExcelDataApplicationIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationClaimsExcelDataApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationClaimsExcelDataApplicationIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationClaimsExcelDataApplicationIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationMilestoneDataApplicationIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationMilestoneDataApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationMilestoneDataApplicationIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationMilestoneDataApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationMilestoneDataApplicationIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationMilestoneDataApplicationIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationMilestoneExcelDataApplicationIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationMilestoneExcelDataApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationMilestoneExcelDataApplicationIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationMilestoneExcelDataApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationMilestoneExcelDataApplicationIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationMilestoneExcelDataApplicationIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationInternalDescriptionApplicationIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationInternalDescriptionApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationInternalDescriptionApplicationIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationInternalDescriptionApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationInternalDescriptionApplicationIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationInternalDescriptionApplicationIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationProjectTypeApplicationIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationProjectTypeApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationProjectTypeApplicationIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationProjectTypeApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationProjectTypeApplicationIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationProjectTypeApplicationIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `EmailRecord`."""
  emailRecordsByNotificationApplicationIdAndEmailRecordId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EmailRecord`."""
    orderBy: [EmailRecordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmailRecordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmailRecordFilter
  ): ApplicationEmailRecordsByNotificationApplicationIdAndEmailRecordIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByNotificationApplicationIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByNotificationApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByNotificationApplicationIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByNotificationApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByNotificationApplicationIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByNotificationApplicationIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationPendingChangeRequestApplicationIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationPendingChangeRequestApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationPendingChangeRequestApplicationIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationPendingChangeRequestApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationPendingChangeRequestApplicationIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationPendingChangeRequestApplicationIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnnouncedApplicationIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationAnnouncedApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnnouncedApplicationIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationAnnouncedApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnnouncedApplicationIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationCcbcUsersByApplicationAnnouncedApplicationIdAndArchivedByManyToManyConnection!
}

"""A connection to a list of `ApplicationStatus` values."""
type ApplicationStatusesConnection {
  """A list of `ApplicationStatus` objects."""
  nodes: [ApplicationStatus]!

  """
  A list of edges which contains the `ApplicationStatus` and cursor to aid in pagination.
  """
  edges: [ApplicationStatusesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""Table containing information about possible application statuses"""
type ApplicationStatus implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the application_status"""
  rowId: Int!

  """ID of the application this status belongs to"""
  applicationId: Int

  """The status of the application"""
  status: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """Change reason for analyst status change"""
  changeReason: String

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """
  Reads a single `Application` that is related to this `ApplicationStatus`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `ApplicationStatusType` that is related to this `ApplicationStatus`.
  """
  applicationStatusTypeByStatus: ApplicationStatusType

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByApplicationStatusId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByAttachmentApplicationStatusIdAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): ApplicationStatusApplicationsByAttachmentApplicationStatusIdAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAttachmentApplicationStatusIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationStatusCcbcUsersByAttachmentApplicationStatusIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAttachmentApplicationStatusIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationStatusCcbcUsersByAttachmentApplicationStatusIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAttachmentApplicationStatusIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationStatusCcbcUsersByAttachmentApplicationStatusIdAndArchivedByManyToManyConnection!
}

"""
Table containing the different statuses that can be assigned to an application
"""
type ApplicationStatusType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Name of and primary key of the status of an application"""
  name: String!

  """Description of the status type"""
  description: String

  """
  Boolean column used to differentiate internal/external status by indicating whether the status is visible to the applicant or not.
  """
  visibleByApplicant: Boolean

  """The logical order in which the status should be displayed."""
  statusOrder: Int!

  """
  Boolean column used to differentiate internal/external status by indicating whether the status is visible to the analyst or not.
  """
  visibleByAnalyst: Boolean

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByStatus(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationStatusesConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationStatusStatusAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): ApplicationStatusTypeApplicationsByApplicationStatusStatusAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationStatusStatusAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationStatusTypeCcbcUsersByApplicationStatusStatusAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationStatusStatusAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationStatusTypeCcbcUsersByApplicationStatusStatusAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationStatusStatusAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationStatusTypeCcbcUsersByApplicationStatusStatusAndUpdatedByManyToManyConnection!
}

"""Methods to use when ordering `ApplicationStatus`."""
enum ApplicationStatusesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  STATUS_ASC
  STATUS_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CHANGE_REASON_ASC
  CHANGE_REASON_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ApplicationStatus` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ApplicationStatusCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `changeReason` field."""
  changeReason: String

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A connection to a list of `Application` values, with data from `ApplicationStatus`.
"""
type ApplicationStatusTypeApplicationsByApplicationStatusStatusAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationStatus`, and the cursor to aid in pagination.
  """
  edges: [ApplicationStatusTypeApplicationsByApplicationStatusStatusAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationStatus`.
"""
type ApplicationStatusTypeApplicationsByApplicationStatusStatusAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationStatusesConnection!
}

"""Methods to use when ordering `Application`."""
enum ApplicationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CCBC_NUMBER_ASC
  CCBC_NUMBER_DESC
  OWNER_ASC
  OWNER_DESC
  INTAKE_ID_ASC
  INTAKE_ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ANALYST_LEAD_ASC
  ANALYST_LEAD_DESC
  INTAKE_NUMBER_ASC
  INTAKE_NUMBER_DESC
  ORGANIZATION_NAME_ASC
  ORGANIZATION_NAME_DESC
  PACKAGE_ASC
  PACKAGE_DESC
  PROJECT_NAME_ASC
  PROJECT_NAME_DESC
  STATUS_ASC
  STATUS_DESC
  STATUS_ORDER_ASC
  STATUS_ORDER_DESC
  STATUS_SORT_FILTER_ASC
  STATUS_SORT_FILTER_DESC
  ZONE_ASC
  ZONE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Application` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ApplicationCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `ccbcNumber` field."""
  ccbcNumber: String

  """Checks for equality with the object’s `owner` field."""
  owner: String

  """Checks for equality with the object’s `intakeId` field."""
  intakeId: Int

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationStatus`.
"""
type ApplicationStatusTypeCcbcUsersByApplicationStatusStatusAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationStatus`, and the cursor to aid in pagination.
  """
  edges: [ApplicationStatusTypeCcbcUsersByApplicationStatusStatusAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationStatus`.
"""
type ApplicationStatusTypeCcbcUsersByApplicationStatusStatusAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationStatusesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationStatus`.
"""
type ApplicationStatusTypeCcbcUsersByApplicationStatusStatusAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationStatus`, and the cursor to aid in pagination.
  """
  edges: [ApplicationStatusTypeCcbcUsersByApplicationStatusStatusAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationStatus`.
"""
type ApplicationStatusTypeCcbcUsersByApplicationStatusStatusAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationStatusesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationStatus`.
"""
type ApplicationStatusTypeCcbcUsersByApplicationStatusStatusAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationStatus`, and the cursor to aid in pagination.
  """
  edges: [ApplicationStatusTypeCcbcUsersByApplicationStatusStatusAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationStatus`.
"""
type ApplicationStatusTypeCcbcUsersByApplicationStatusStatusAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationStatusesConnection!
}

"""A connection to a list of `Attachment` values."""
type AttachmentsConnection {
  """A list of `Attachment` objects."""
  nodes: [Attachment]!

  """
  A list of edges which contains the `Attachment` and cursor to aid in pagination.
  """
  edges: [AttachmentsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Attachment` you could get from the connection."""
  totalCount: Int!
}

"""Table containing information about uploaded attachments"""
type Attachment implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the attachment"""
  rowId: Int!

  """
  Universally Unique ID for the attachment, created by the fastapi storage micro-service
  """
  file: UUID

  """Description of the attachment"""
  description: String

  """Original uploaded file name"""
  fileName: String

  """Original uploaded file type"""
  fileType: String

  """Original uploaded file size"""
  fileSize: String

  """
  The id of the project (ccbc_public.application.id) that the attachment was uploaded to
  """
  applicationId: Int!

  """
  The id of the application_status (ccbc_public.application_status.id) that the attachment references
  """
  applicationStatusId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `Application` that is related to this `Attachment`."""
  applicationByApplicationId: Application

  """
  Reads a single `ApplicationStatus` that is related to this `Attachment`.
  """
  applicationStatusByApplicationStatusId: ApplicationStatus

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByArchivedBy: CcbcUser
}

"""A `Attachment` edge in the connection."""
type AttachmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Attachment` at the end of the edge."""
  node: Attachment
}

"""Methods to use when ordering `Attachment`."""
enum AttachmentsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FILE_ASC
  FILE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  FILE_NAME_ASC
  FILE_NAME_DESC
  FILE_TYPE_ASC
  FILE_TYPE_DESC
  FILE_SIZE_ASC
  FILE_SIZE_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  APPLICATION_STATUS_ID_ASC
  APPLICATION_STATUS_ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Attachment` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AttachmentCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `file` field."""
  file: UUID

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `fileName` field."""
  fileName: String

  """Checks for equality with the object’s `fileType` field."""
  fileType: String

  """Checks for equality with the object’s `fileSize` field."""
  fileSize: String

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `applicationStatusId` field."""
  applicationStatusId: Int

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""
A connection to a list of `Application` values, with data from `Attachment`.
"""
type ApplicationStatusApplicationsByAttachmentApplicationStatusIdAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [ApplicationStatusApplicationsByAttachmentApplicationStatusIdAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""A `Application` edge in the connection, with data from `Attachment`."""
type ApplicationStatusApplicationsByAttachmentApplicationStatusIdAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Attachment`.
"""
type ApplicationStatusCcbcUsersByAttachmentApplicationStatusIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [ApplicationStatusCcbcUsersByAttachmentApplicationStatusIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Attachment`."""
type ApplicationStatusCcbcUsersByAttachmentApplicationStatusIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Attachment`.
"""
type ApplicationStatusCcbcUsersByAttachmentApplicationStatusIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [ApplicationStatusCcbcUsersByAttachmentApplicationStatusIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Attachment`."""
type ApplicationStatusCcbcUsersByAttachmentApplicationStatusIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Attachment`.
"""
type ApplicationStatusCcbcUsersByAttachmentApplicationStatusIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [ApplicationStatusCcbcUsersByAttachmentApplicationStatusIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Attachment`."""
type ApplicationStatusCcbcUsersByAttachmentApplicationStatusIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection!
}

"""A `ApplicationStatus` edge in the connection."""
type ApplicationStatusesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationStatus` at the end of the edge."""
  node: ApplicationStatus
}

"""A connection to a list of `ApplicationFormData` values."""
type ApplicationFormDataConnection {
  """A list of `ApplicationFormData` objects."""
  nodes: [ApplicationFormData]!

  """
  A list of edges which contains the `ApplicationFormData` and cursor to aid in pagination.
  """
  edges: [ApplicationFormDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationFormData` you could get from the connection.
  """
  totalCount: Int!
}

"""Table to pair an application to form data"""
type ApplicationFormData implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The foreign key of a form"""
  formDataId: Int!

  """The foreign key of an application"""
  applicationId: Int!

  """
  Reads a single `FormData` that is related to this `ApplicationFormData`.
  """
  formDataByFormDataId: FormData

  """
  Reads a single `Application` that is related to this `ApplicationFormData`.
  """
  applicationByApplicationId: Application
}

"""Table to hold applicant form data"""
type FormData implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The unique id of the form data"""
  rowId: Int!

  """
  The json form data of the project information form. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fform_data.json)
  """
  jsonData: JSON!

  """Column saving the key of the last edited form page"""
  lastEditedPage: String

  """Column referencing the form data status type, defaults to draft"""
  formDataStatusTypeId: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Schema for the respective form_data"""
  formSchemaId: Int

  """Column to track analysts reason for changing form data"""
  reasonForChange: String

  """
  Reads a single `FormDataStatusType` that is related to this `FormData`.
  """
  formDataStatusTypeByFormDataStatusTypeId: FormDataStatusType

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads a single `Form` that is related to this `FormData`."""
  formByFormSchemaId: Form

  """Reads and enables pagination through a set of `ApplicationFormData`."""
  applicationFormDataByFormDataId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationFormData`."""
    orderBy: [ApplicationFormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationFormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFormDataFilter
  ): ApplicationFormDataConnection!

  """computed column to display whether form_data is editable or not"""
  isEditable: Boolean

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationFormDataFormDataIdAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): FormDataApplicationsByApplicationFormDataFormDataIdAndApplicationIdManyToManyConnection!
}

"""The statuses applicable to a form"""
type FormDataStatusType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The name of the status type"""
  name: String!

  """The description of the status type"""
  description: String

  """Reads and enables pagination through a set of `FormData`."""
  formDataByFormDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): FormDataConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByFormDataFormDataStatusTypeIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): FormDataStatusTypeCcbcUsersByFormDataFormDataStatusTypeIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByFormDataFormDataStatusTypeIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): FormDataStatusTypeCcbcUsersByFormDataFormDataStatusTypeIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByFormDataFormDataStatusTypeIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): FormDataStatusTypeCcbcUsersByFormDataFormDataStatusTypeIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Form`."""
  formsByFormDataFormDataStatusTypeIdAndFormSchemaId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormFilter
  ): FormDataStatusTypeFormsByFormDataFormDataStatusTypeIdAndFormSchemaIdManyToManyConnection!
}

"""A connection to a list of `FormData` values."""
type FormDataConnection {
  """A list of `FormData` objects."""
  nodes: [FormData]!

  """
  A list of edges which contains the `FormData` and cursor to aid in pagination.
  """
  edges: [FormDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormData` you could get from the connection."""
  totalCount: Int!
}

"""A `FormData` edge in the connection."""
type FormDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormData` at the end of the edge."""
  node: FormData
}

"""Methods to use when ordering `FormData`."""
enum FormDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  LAST_EDITED_PAGE_ASC
  LAST_EDITED_PAGE_DESC
  FORM_DATA_STATUS_TYPE_ID_ASC
  FORM_DATA_STATUS_TYPE_ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  FORM_SCHEMA_ID_ASC
  FORM_SCHEMA_ID_DESC
  REASON_FOR_CHANGE_ASC
  REASON_FOR_CHANGE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `FormData` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FormDataCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `lastEditedPage` field."""
  lastEditedPage: String

  """Checks for equality with the object’s `formDataStatusTypeId` field."""
  formDataStatusTypeId: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `formSchemaId` field."""
  formSchemaId: Int

  """Checks for equality with the object’s `reasonForChange` field."""
  reasonForChange: String
}

"""
A connection to a list of `CcbcUser` values, with data from `FormData`.
"""
type FormDataStatusTypeCcbcUsersByFormDataFormDataStatusTypeIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [FormDataStatusTypeCcbcUsersByFormDataFormDataStatusTypeIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `FormData`."""
type FormDataStatusTypeCcbcUsersByFormDataFormDataStatusTypeIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `FormData`."""
  formDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): FormDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `FormData`.
"""
type FormDataStatusTypeCcbcUsersByFormDataFormDataStatusTypeIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [FormDataStatusTypeCcbcUsersByFormDataFormDataStatusTypeIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `FormData`."""
type FormDataStatusTypeCcbcUsersByFormDataFormDataStatusTypeIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `FormData`."""
  formDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): FormDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `FormData`.
"""
type FormDataStatusTypeCcbcUsersByFormDataFormDataStatusTypeIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [FormDataStatusTypeCcbcUsersByFormDataFormDataStatusTypeIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `FormData`."""
type FormDataStatusTypeCcbcUsersByFormDataFormDataStatusTypeIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `FormData`."""
  formDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): FormDataConnection!
}

"""A connection to a list of `Form` values, with data from `FormData`."""
type FormDataStatusTypeFormsByFormDataFormDataStatusTypeIdAndFormSchemaIdManyToManyConnection {
  """A list of `Form` objects."""
  nodes: [Form]!

  """
  A list of edges which contains the `Form`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [FormDataStatusTypeFormsByFormDataFormDataStatusTypeIdAndFormSchemaIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Form` you could get from the connection."""
  totalCount: Int!
}

"""Table to hold the json_schema for forms"""
type Form implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Primary key on form"""
  rowId: Int!

  """The end url for the form data"""
  slug: String

  """The JSON schema for the respective form"""
  jsonSchema: JSON!

  """Description of the form"""
  description: String

  """The type of form being stored"""
  formType: String

  """Reads a single `FormType` that is related to this `Form`."""
  formTypeByFormType: FormType

  """Reads and enables pagination through a set of `FormData`."""
  formDataByFormSchemaId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): FormDataConnection!

  """Reads and enables pagination through a set of `FormDataStatusType`."""
  formDataStatusTypesByFormDataFormSchemaIdAndFormDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormDataStatusType`."""
    orderBy: [FormDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataStatusTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataStatusTypeFilter
  ): FormFormDataStatusTypesByFormDataFormSchemaIdAndFormDataStatusTypeIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByFormDataFormSchemaIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): FormCcbcUsersByFormDataFormSchemaIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByFormDataFormSchemaIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): FormCcbcUsersByFormDataFormSchemaIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByFormDataFormSchemaIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): FormCcbcUsersByFormDataFormSchemaIdAndArchivedByManyToManyConnection!
}

"""Table containing the different types of forms used in the application"""
type FormType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Primary key and unique identifier of the type of form"""
  name: String!

  """Description of the type of form"""
  description: String

  """Reads and enables pagination through a set of `Form`."""
  formsByFormType(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormFilter
  ): FormsConnection!
}

"""A connection to a list of `Form` values."""
type FormsConnection {
  """A list of `Form` objects."""
  nodes: [Form]!

  """
  A list of edges which contains the `Form` and cursor to aid in pagination.
  """
  edges: [FormsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Form` you could get from the connection."""
  totalCount: Int!
}

"""A `Form` edge in the connection."""
type FormsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Form` at the end of the edge."""
  node: Form
}

"""Methods to use when ordering `Form`."""
enum FormsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SLUG_ASC
  SLUG_DESC
  JSON_SCHEMA_ASC
  JSON_SCHEMA_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  FORM_TYPE_ASC
  FORM_TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Form` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FormCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `slug` field."""
  slug: String

  """Checks for equality with the object’s `jsonSchema` field."""
  jsonSchema: JSON

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `formType` field."""
  formType: String
}

"""
A connection to a list of `FormDataStatusType` values, with data from `FormData`.
"""
type FormFormDataStatusTypesByFormDataFormSchemaIdAndFormDataStatusTypeIdManyToManyConnection {
  """A list of `FormDataStatusType` objects."""
  nodes: [FormDataStatusType]!

  """
  A list of edges which contains the `FormDataStatusType`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [FormFormDataStatusTypesByFormDataFormSchemaIdAndFormDataStatusTypeIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FormDataStatusType` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `FormDataStatusType` edge in the connection, with data from `FormData`.
"""
type FormFormDataStatusTypesByFormDataFormSchemaIdAndFormDataStatusTypeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormDataStatusType` at the end of the edge."""
  node: FormDataStatusType

  """Reads and enables pagination through a set of `FormData`."""
  formDataByFormDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): FormDataConnection!
}

"""Methods to use when ordering `FormDataStatusType`."""
enum FormDataStatusTypesOrderBy {
  NATURAL
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `FormDataStatusType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FormDataStatusTypeCondition {
  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""
A connection to a list of `CcbcUser` values, with data from `FormData`.
"""
type FormCcbcUsersByFormDataFormSchemaIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [FormCcbcUsersByFormDataFormSchemaIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `FormData`."""
type FormCcbcUsersByFormDataFormSchemaIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `FormData`."""
  formDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): FormDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `FormData`.
"""
type FormCcbcUsersByFormDataFormSchemaIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [FormCcbcUsersByFormDataFormSchemaIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `FormData`."""
type FormCcbcUsersByFormDataFormSchemaIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `FormData`."""
  formDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): FormDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `FormData`.
"""
type FormCcbcUsersByFormDataFormSchemaIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [FormCcbcUsersByFormDataFormSchemaIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `FormData`."""
type FormCcbcUsersByFormDataFormSchemaIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `FormData`."""
  formDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): FormDataConnection!
}

"""A `Form` edge in the connection, with data from `FormData`."""
type FormDataStatusTypeFormsByFormDataFormDataStatusTypeIdAndFormSchemaIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Form` at the end of the edge."""
  node: Form

  """Reads and enables pagination through a set of `FormData`."""
  formDataByFormSchemaId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): FormDataConnection!
}

"""Methods to use when ordering `ApplicationFormData`."""
enum ApplicationFormDataOrderBy {
  NATURAL
  FORM_DATA_ID_ASC
  FORM_DATA_ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ApplicationFormData` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ApplicationFormDataCondition {
  """Checks for equality with the object’s `formDataId` field."""
  formDataId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int
}

"""
A connection to a list of `Application` values, with data from `ApplicationFormData`.
"""
type FormDataApplicationsByApplicationFormDataFormDataIdAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationFormData`, and the cursor to aid in pagination.
  """
  edges: [FormDataApplicationsByApplicationFormDataFormDataIdAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationFormData`.
"""
type FormDataApplicationsByApplicationFormDataFormDataIdAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application
}

"""A `ApplicationFormData` edge in the connection."""
type ApplicationFormDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationFormData` at the end of the edge."""
  node: ApplicationFormData
}

"""A connection to a list of `ApplicationAnalystLead` values."""
type ApplicationAnalystLeadsConnection {
  """A list of `ApplicationAnalystLead` objects."""
  nodes: [ApplicationAnalystLead]!

  """
  A list of edges which contains the `ApplicationAnalystLead` and cursor to aid in pagination.
  """
  edges: [ApplicationAnalystLeadsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationAnalystLead` you could get from the connection.
  """
  totalCount: Int!
}

"""Table containing the analyst lead for the given application"""
type ApplicationAnalystLead implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the application_analyst_lead"""
  rowId: Int!

  """ID of the application this analyst lead belongs to"""
  applicationId: Int

  """ID of the analyst this analyst lead belongs to"""
  analystId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """
  Reads a single `Application` that is related to this `ApplicationAnalystLead`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `Analyst` that is related to this `ApplicationAnalystLead`.
  """
  analystByAnalystId: Analyst

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnalystLead`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnalystLead`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnalystLead`.
  """
  ccbcUserByArchivedBy: CcbcUser
}

"""A `ApplicationAnalystLead` edge in the connection."""
type ApplicationAnalystLeadsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationAnalystLead` at the end of the edge."""
  node: ApplicationAnalystLead
}

"""Methods to use when ordering `ApplicationAnalystLead`."""
enum ApplicationAnalystLeadsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  ANALYST_ID_ASC
  ANALYST_ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ApplicationAnalystLead` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ApplicationAnalystLeadCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `analystId` field."""
  analystId: Int

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A connection to a list of `ApplicationRfiData` values."""
type ApplicationRfiDataConnection {
  """A list of `ApplicationRfiData` objects."""
  nodes: [ApplicationRfiData]!

  """
  A list of edges which contains the `ApplicationRfiData` and cursor to aid in pagination.
  """
  edges: [ApplicationRfiDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationRfiData` you could get from the connection.
  """
  totalCount: Int!
}

"""Table to pair an application to RFI data"""
type ApplicationRfiData implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The foreign key of a form"""
  rfiDataId: Int!

  """The foreign key of an application"""
  applicationId: Int!

  """Reads a single `RfiData` that is related to this `ApplicationRfiData`."""
  rfiDataByRfiDataId: RfiData

  """
  Reads a single `Application` that is related to this `ApplicationRfiData`.
  """
  applicationByApplicationId: Application
}

"""Table to hold RFI form data"""
type RfiData implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The unique id of the form data"""
  rowId: Int!

  """Reference number assigned to the RFI"""
  rfiNumber: String

  """
  The json form data of the RFI information form. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Frfi_data.json)
  """
  jsonData: JSON!

  """Column referencing the form data status type, defaults to draft"""
  rfiDataStatusTypeId: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `RfiDataStatusType` that is related to this `RfiData`."""
  rfiDataStatusTypeByRfiDataStatusTypeId: RfiDataStatusType

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads and enables pagination through a set of `ApplicationRfiData`."""
  applicationRfiDataByRfiDataId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationRfiData`."""
    orderBy: [ApplicationRfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRfiDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationRfiDataFilter
  ): ApplicationRfiDataConnection!

  """Computed column to return all attachement rows for an rfi_data row"""
  attachments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationRfiDataRfiDataIdAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): RfiDataApplicationsByApplicationRfiDataRfiDataIdAndApplicationIdManyToManyConnection!
}

"""The statuses applicable to an RFI"""
type RfiDataStatusType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The name of the status type"""
  name: String!

  """The description of the status type"""
  description: String

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByRfiDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RfiDataFilter
  ): RfiDataConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByRfiDataRfiDataStatusTypeIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): RfiDataStatusTypeCcbcUsersByRfiDataRfiDataStatusTypeIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByRfiDataRfiDataStatusTypeIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): RfiDataStatusTypeCcbcUsersByRfiDataRfiDataStatusTypeIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByRfiDataRfiDataStatusTypeIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): RfiDataStatusTypeCcbcUsersByRfiDataRfiDataStatusTypeIdAndArchivedByManyToManyConnection!
}

"""A connection to a list of `RfiData` values."""
type RfiDataConnection {
  """A list of `RfiData` objects."""
  nodes: [RfiData]!

  """
  A list of edges which contains the `RfiData` and cursor to aid in pagination.
  """
  edges: [RfiDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RfiData` you could get from the connection."""
  totalCount: Int!
}

"""A `RfiData` edge in the connection."""
type RfiDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RfiData` at the end of the edge."""
  node: RfiData
}

"""Methods to use when ordering `RfiData`."""
enum RfiDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  RFI_NUMBER_ASC
  RFI_NUMBER_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  RFI_DATA_STATUS_TYPE_ID_ASC
  RFI_DATA_STATUS_TYPE_ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `RfiData` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RfiDataCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `rfiNumber` field."""
  rfiNumber: String

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `rfiDataStatusTypeId` field."""
  rfiDataStatusTypeId: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A connection to a list of `CcbcUser` values, with data from `RfiData`."""
type RfiDataStatusTypeCcbcUsersByRfiDataRfiDataStatusTypeIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `RfiData`, and the cursor to aid in pagination.
  """
  edges: [RfiDataStatusTypeCcbcUsersByRfiDataRfiDataStatusTypeIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `RfiData`."""
type RfiDataStatusTypeCcbcUsersByRfiDataRfiDataStatusTypeIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RfiDataFilter
  ): RfiDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `RfiData`."""
type RfiDataStatusTypeCcbcUsersByRfiDataRfiDataStatusTypeIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `RfiData`, and the cursor to aid in pagination.
  """
  edges: [RfiDataStatusTypeCcbcUsersByRfiDataRfiDataStatusTypeIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `RfiData`."""
type RfiDataStatusTypeCcbcUsersByRfiDataRfiDataStatusTypeIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RfiDataFilter
  ): RfiDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `RfiData`."""
type RfiDataStatusTypeCcbcUsersByRfiDataRfiDataStatusTypeIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `RfiData`, and the cursor to aid in pagination.
  """
  edges: [RfiDataStatusTypeCcbcUsersByRfiDataRfiDataStatusTypeIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `RfiData`."""
type RfiDataStatusTypeCcbcUsersByRfiDataRfiDataStatusTypeIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RfiDataFilter
  ): RfiDataConnection!
}

"""Methods to use when ordering `ApplicationRfiData`."""
enum ApplicationRfiDataOrderBy {
  NATURAL
  RFI_DATA_ID_ASC
  RFI_DATA_ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ApplicationRfiData` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ApplicationRfiDataCondition {
  """Checks for equality with the object’s `rfiDataId` field."""
  rfiDataId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int
}

"""
A connection to a list of `Application` values, with data from `ApplicationRfiData`.
"""
type RfiDataApplicationsByApplicationRfiDataRfiDataIdAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationRfiData`, and the cursor to aid in pagination.
  """
  edges: [RfiDataApplicationsByApplicationRfiDataRfiDataIdAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationRfiData`.
"""
type RfiDataApplicationsByApplicationRfiDataRfiDataIdAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application
}

"""A `ApplicationRfiData` edge in the connection."""
type ApplicationRfiDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationRfiData` at the end of the edge."""
  node: ApplicationRfiData
}

"""A connection to a list of `AssessmentData` values."""
type AssessmentDataConnection {
  """A list of `AssessmentData` objects."""
  nodes: [AssessmentData]!

  """
  A list of edges which contains the `AssessmentData` and cursor to aid in pagination.
  """
  edges: [AssessmentDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AssessmentData` you could get from the connection."""
  totalCount: Int!
}

type AssessmentData implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  applicationId: Int!

  """
  The json form data of the assessment form. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fassessment_data.json)
  """
  jsonData: JSON!
  assessmentDataType: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `Application` that is related to this `AssessmentData`."""
  applicationByApplicationId: Application

  """
  Reads a single `AssessmentType` that is related to this `AssessmentData`.
  """
  assessmentTypeByAssessmentDataType: AssessmentType

  """Reads a single `CcbcUser` that is related to this `AssessmentData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `AssessmentData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `AssessmentData`."""
  ccbcUserByArchivedBy: CcbcUser
}

"""
Table containing the different assessment types that can be assigned to an assessment
"""
type AssessmentType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Name of and primary key of the type of an assessment"""
  name: String!

  """Description of the assessment type"""
  description: String

  """Reads and enables pagination through a set of `AssessmentData`."""
  assessmentDataByAssessmentDataType(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByAssessmentDataAssessmentDataTypeAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): AssessmentTypeApplicationsByAssessmentDataAssessmentDataTypeAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAssessmentDataAssessmentDataTypeAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): AssessmentTypeCcbcUsersByAssessmentDataAssessmentDataTypeAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAssessmentDataAssessmentDataTypeAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): AssessmentTypeCcbcUsersByAssessmentDataAssessmentDataTypeAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAssessmentDataAssessmentDataTypeAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): AssessmentTypeCcbcUsersByAssessmentDataAssessmentDataTypeAndArchivedByManyToManyConnection!
}

"""Methods to use when ordering `AssessmentData`."""
enum AssessmentDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  ASSESSMENT_DATA_TYPE_ASC
  ASSESSMENT_DATA_TYPE_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `AssessmentData` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AssessmentDataCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `assessmentDataType` field."""
  assessmentDataType: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""
A connection to a list of `Application` values, with data from `AssessmentData`.
"""
type AssessmentTypeApplicationsByAssessmentDataAssessmentDataTypeAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `AssessmentData`, and the cursor to aid in pagination.
  """
  edges: [AssessmentTypeApplicationsByAssessmentDataAssessmentDataTypeAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `AssessmentData`.
"""
type AssessmentTypeApplicationsByAssessmentDataAssessmentDataTypeAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `AssessmentData`."""
  assessmentDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `AssessmentData`.
"""
type AssessmentTypeCcbcUsersByAssessmentDataAssessmentDataTypeAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `AssessmentData`, and the cursor to aid in pagination.
  """
  edges: [AssessmentTypeCcbcUsersByAssessmentDataAssessmentDataTypeAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `AssessmentData`."""
type AssessmentTypeCcbcUsersByAssessmentDataAssessmentDataTypeAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `AssessmentData`."""
  assessmentDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `AssessmentData`.
"""
type AssessmentTypeCcbcUsersByAssessmentDataAssessmentDataTypeAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `AssessmentData`, and the cursor to aid in pagination.
  """
  edges: [AssessmentTypeCcbcUsersByAssessmentDataAssessmentDataTypeAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `AssessmentData`."""
type AssessmentTypeCcbcUsersByAssessmentDataAssessmentDataTypeAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `AssessmentData`."""
  assessmentDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `AssessmentData`.
"""
type AssessmentTypeCcbcUsersByAssessmentDataAssessmentDataTypeAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `AssessmentData`, and the cursor to aid in pagination.
  """
  edges: [AssessmentTypeCcbcUsersByAssessmentDataAssessmentDataTypeAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `AssessmentData`."""
type AssessmentTypeCcbcUsersByAssessmentDataAssessmentDataTypeAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `AssessmentData`."""
  assessmentDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection!
}

"""A `AssessmentData` edge in the connection."""
type AssessmentDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AssessmentData` at the end of the edge."""
  node: AssessmentData
}

"""A connection to a list of `ApplicationPackage` values."""
type ApplicationPackagesConnection {
  """A list of `ApplicationPackage` objects."""
  nodes: [ApplicationPackage]!

  """
  A list of edges which contains the `ApplicationPackage` and cursor to aid in pagination.
  """
  edges: [ApplicationPackagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationPackage` you could get from the connection.
  """
  totalCount: Int!
}

"""Table containing the package the application is assigned to"""
type ApplicationPackage implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the application_package"""
  rowId: Int!

  """The application_id of the application this record is associated with"""
  applicationId: Int

  """The package number the application is assigned to"""
  package: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """
  Reads a single `Application` that is related to this `ApplicationPackage`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPackage`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPackage`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPackage`.
  """
  ccbcUserByArchivedBy: CcbcUser
}

"""A `ApplicationPackage` edge in the connection."""
type ApplicationPackagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationPackage` at the end of the edge."""
  node: ApplicationPackage
}

"""Methods to use when ordering `ApplicationPackage`."""
enum ApplicationPackagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  PACKAGE_ASC
  PACKAGE_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ApplicationPackage` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ApplicationPackageCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `package` field."""
  package: Int

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A connection to a list of `ConditionalApprovalData` values."""
type ConditionalApprovalDataConnection {
  """A list of `ConditionalApprovalData` objects."""
  nodes: [ConditionalApprovalData]!

  """
  A list of edges which contains the `ConditionalApprovalData` and cursor to aid in pagination.
  """
  edges: [ConditionalApprovalDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ConditionalApprovalData` you could get from the connection.
  """
  totalCount: Int!
}

"""Table to store conditional approval data"""
type ConditionalApprovalData implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique id for the row"""
  rowId: Int!

  """The foreign key of an application"""
  applicationId: Int

  """
  The json form data of the conditional approval form. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fconditional_approval_data.json)
  """
  jsonData: JSON!

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """
  Reads a single `Application` that is related to this `ConditionalApprovalData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ConditionalApprovalData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ConditionalApprovalData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ConditionalApprovalData`.
  """
  ccbcUserByArchivedBy: CcbcUser
}

"""A `ConditionalApprovalData` edge in the connection."""
type ConditionalApprovalDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ConditionalApprovalData` at the end of the edge."""
  node: ConditionalApprovalData
}

"""Methods to use when ordering `ConditionalApprovalData`."""
enum ConditionalApprovalDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ConditionalApprovalData` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ConditionalApprovalDataCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A connection to a list of `ApplicationGisData` values."""
type ApplicationGisDataConnection {
  """A list of `ApplicationGisData` objects."""
  nodes: [ApplicationGisData]!

  """
  A list of edges which contains the `ApplicationGisData` and cursor to aid in pagination.
  """
  edges: [ApplicationGisDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationGisData` you could get from the connection.
  """
  totalCount: Int!
}

type ApplicationGisData implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  batchId: Int
  applicationId: Int

  """
  The data imported from the GIS data Excel file. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fapplication_gis_data.json)
  """
  jsonData: JSON!

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `GisData` that is related to this `ApplicationGisData`."""
  gisDataByBatchId: GisData

  """
  Reads a single `Application` that is related to this `ApplicationGisData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisData`.
  """
  ccbcUserByArchivedBy: CcbcUser
}

"""Table containing the uploaded GIS data in JSON format"""
type GisData implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Primary key and unique identifier"""
  rowId: Int!

  """
  The data imported from the GIS data Excel file. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fgis_data.json)
  """
  jsonData: JSON!

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `CcbcUser` that is related to this `GisData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `GisData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `GisData`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads and enables pagination through a set of `ApplicationGisData`."""
  applicationGisDataByBatchId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisDataFilter
  ): ApplicationGisDataConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationGisDataBatchIdAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): GisDataApplicationsByApplicationGisDataBatchIdAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationGisDataBatchIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): GisDataCcbcUsersByApplicationGisDataBatchIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationGisDataBatchIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): GisDataCcbcUsersByApplicationGisDataBatchIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationGisDataBatchIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): GisDataCcbcUsersByApplicationGisDataBatchIdAndArchivedByManyToManyConnection!
}

"""Methods to use when ordering `ApplicationGisData`."""
enum ApplicationGisDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  BATCH_ID_ASC
  BATCH_ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ApplicationGisData` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ApplicationGisDataCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `batchId` field."""
  batchId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""
A connection to a list of `Application` values, with data from `ApplicationGisData`.
"""
type GisDataApplicationsByApplicationGisDataBatchIdAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationGisData`, and the cursor to aid in pagination.
  """
  edges: [GisDataApplicationsByApplicationGisDataBatchIdAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationGisData`.
"""
type GisDataApplicationsByApplicationGisDataBatchIdAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ApplicationGisData`."""
  applicationGisDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisDataFilter
  ): ApplicationGisDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationGisData`.
"""
type GisDataCcbcUsersByApplicationGisDataBatchIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationGisData`, and the cursor to aid in pagination.
  """
  edges: [GisDataCcbcUsersByApplicationGisDataBatchIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationGisData`.
"""
type GisDataCcbcUsersByApplicationGisDataBatchIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationGisData`."""
  applicationGisDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisDataFilter
  ): ApplicationGisDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationGisData`.
"""
type GisDataCcbcUsersByApplicationGisDataBatchIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationGisData`, and the cursor to aid in pagination.
  """
  edges: [GisDataCcbcUsersByApplicationGisDataBatchIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationGisData`.
"""
type GisDataCcbcUsersByApplicationGisDataBatchIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationGisData`."""
  applicationGisDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisDataFilter
  ): ApplicationGisDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationGisData`.
"""
type GisDataCcbcUsersByApplicationGisDataBatchIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationGisData`, and the cursor to aid in pagination.
  """
  edges: [GisDataCcbcUsersByApplicationGisDataBatchIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationGisData`.
"""
type GisDataCcbcUsersByApplicationGisDataBatchIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationGisData`."""
  applicationGisDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisDataFilter
  ): ApplicationGisDataConnection!
}

"""A `ApplicationGisData` edge in the connection."""
type ApplicationGisDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationGisData` at the end of the edge."""
  node: ApplicationGisData
}

"""A connection to a list of `ApplicationAnnouncement` values."""
type ApplicationAnnouncementsConnection {
  """A list of `ApplicationAnnouncement` objects."""
  nodes: [ApplicationAnnouncement]!

  """
  A list of edges which contains the `ApplicationAnnouncement` and cursor to aid in pagination.
  """
  edges: [ApplicationAnnouncementsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationAnnouncement` you could get from the connection.
  """
  totalCount: Int!
}

"""Table to pair an application to RFI data"""
type ApplicationAnnouncement implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The foreign key of a form"""
  announcementId: Int!

  """The foreign key of an application"""
  applicationId: Int!

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Flag to identify either announcement is primary or secondary"""
  isPrimary: Boolean

  """
  Column describing the operation (created, updated, deleted) for context on the history page
  """
  historyOperation: String

  """
  Reads a single `Announcement` that is related to this `ApplicationAnnouncement`.
  """
  announcementByAnnouncementId: Announcement

  """
  Reads a single `Application` that is related to this `ApplicationAnnouncement`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnouncement`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnouncement`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnouncement`.
  """
  ccbcUserByArchivedBy: CcbcUser
}

"""Table to  hold the announcement data"""
type Announcement implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The unique id of the announcement data"""
  rowId: Int!

  """List of CCBC number of the projects included in announcement"""
  ccbcNumbers: String

  """
  The json form data of the announcement form. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fannouncement.json)
  """
  jsonData: JSON!

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `CcbcUser` that is related to this `Announcement`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Announcement`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Announcement`."""
  ccbcUserByArchivedBy: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnnouncement`.
  """
  applicationAnnouncementsByAnnouncementId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncementFilter
  ): ApplicationAnnouncementsConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationAnnouncementAnnouncementIdAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): AnnouncementApplicationsByApplicationAnnouncementAnnouncementIdAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnnouncementAnnouncementIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): AnnouncementCcbcUsersByApplicationAnnouncementAnnouncementIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnnouncementAnnouncementIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): AnnouncementCcbcUsersByApplicationAnnouncementAnnouncementIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnnouncementAnnouncementIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): AnnouncementCcbcUsersByApplicationAnnouncementAnnouncementIdAndArchivedByManyToManyConnection!
}

"""Methods to use when ordering `ApplicationAnnouncement`."""
enum ApplicationAnnouncementsOrderBy {
  NATURAL
  ANNOUNCEMENT_ID_ASC
  ANNOUNCEMENT_ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  IS_PRIMARY_ASC
  IS_PRIMARY_DESC
  HISTORY_OPERATION_ASC
  HISTORY_OPERATION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ApplicationAnnouncement` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ApplicationAnnouncementCondition {
  """Checks for equality with the object’s `announcementId` field."""
  announcementId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `isPrimary` field."""
  isPrimary: Boolean

  """Checks for equality with the object’s `historyOperation` field."""
  historyOperation: String
}

"""
A connection to a list of `Application` values, with data from `ApplicationAnnouncement`.
"""
type AnnouncementApplicationsByApplicationAnnouncementAnnouncementIdAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationAnnouncement`, and the cursor to aid in pagination.
  """
  edges: [AnnouncementApplicationsByApplicationAnnouncementAnnouncementIdAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationAnnouncement`.
"""
type AnnouncementApplicationsByApplicationAnnouncementAnnouncementIdAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Flag to identify either announcement is primary or secondary"""
  isPrimary: Boolean

  """
  Column describing the operation (created, updated, deleted) for context on the history page
  """
  historyOperation: String
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnnouncement`.
"""
type AnnouncementCcbcUsersByApplicationAnnouncementAnnouncementIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnnouncement`, and the cursor to aid in pagination.
  """
  edges: [AnnouncementCcbcUsersByApplicationAnnouncementAnnouncementIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnnouncement`.
"""
type AnnouncementCcbcUsersByApplicationAnnouncementAnnouncementIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnnouncement`.
  """
  applicationAnnouncementsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncementFilter
  ): ApplicationAnnouncementsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnnouncement`.
"""
type AnnouncementCcbcUsersByApplicationAnnouncementAnnouncementIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnnouncement`, and the cursor to aid in pagination.
  """
  edges: [AnnouncementCcbcUsersByApplicationAnnouncementAnnouncementIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnnouncement`.
"""
type AnnouncementCcbcUsersByApplicationAnnouncementAnnouncementIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnnouncement`.
  """
  applicationAnnouncementsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncementFilter
  ): ApplicationAnnouncementsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnnouncement`.
"""
type AnnouncementCcbcUsersByApplicationAnnouncementAnnouncementIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnnouncement`, and the cursor to aid in pagination.
  """
  edges: [AnnouncementCcbcUsersByApplicationAnnouncementAnnouncementIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnnouncement`.
"""
type AnnouncementCcbcUsersByApplicationAnnouncementAnnouncementIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnnouncement`.
  """
  applicationAnnouncementsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncementFilter
  ): ApplicationAnnouncementsConnection!
}

"""A `ApplicationAnnouncement` edge in the connection."""
type ApplicationAnnouncementsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationAnnouncement` at the end of the edge."""
  node: ApplicationAnnouncement
}

"""A connection to a list of `ApplicationGisAssessmentHh` values."""
type ApplicationGisAssessmentHhsConnection {
  """A list of `ApplicationGisAssessmentHh` objects."""
  nodes: [ApplicationGisAssessmentHh]!

  """
  A list of edges which contains the `ApplicationGisAssessmentHh` and cursor to aid in pagination.
  """
  edges: [ApplicationGisAssessmentHhsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationGisAssessmentHh` you could get from the connection.
  """
  totalCount: Int!
}

"""Table containing data for the gis assessment hh numbers"""
type ApplicationGisAssessmentHh implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Primary key and unique identifier"""
  rowId: Int!

  """The application_id of the application this record is associated with"""
  applicationId: Int!

  """The number of eligible households"""
  eligible: Float

  """The number of eligible indigenous households"""
  eligibleIndigenous: Float

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """
  Reads a single `Application` that is related to this `ApplicationGisAssessmentHh`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisAssessmentHh`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisAssessmentHh`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisAssessmentHh`.
  """
  ccbcUserByArchivedBy: CcbcUser
}

"""A `ApplicationGisAssessmentHh` edge in the connection."""
type ApplicationGisAssessmentHhsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationGisAssessmentHh` at the end of the edge."""
  node: ApplicationGisAssessmentHh
}

"""Methods to use when ordering `ApplicationGisAssessmentHh`."""
enum ApplicationGisAssessmentHhsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  ELIGIBLE_ASC
  ELIGIBLE_DESC
  ELIGIBLE_INDIGENOUS_ASC
  ELIGIBLE_INDIGENOUS_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ApplicationGisAssessmentHh` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ApplicationGisAssessmentHhCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `eligible` field."""
  eligible: Float

  """Checks for equality with the object’s `eligibleIndigenous` field."""
  eligibleIndigenous: Float

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A connection to a list of `ApplicationSowData` values."""
type ApplicationSowDataConnection {
  """A list of `ApplicationSowData` objects."""
  nodes: [ApplicationSowData]!

  """
  A list of edges which contains the `ApplicationSowData` and cursor to aid in pagination.
  """
  edges: [ApplicationSowDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationSowData` you could get from the connection.
  """
  totalCount: Int!
}

"""Table containing the SoW data for the given application"""
type ApplicationSowData implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the  SoW"""
  rowId: Int!

  """ID of the application this SoW belongs to"""
  applicationId: Int

  """
  The data imported from the Excel filled by the respondent. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fapplication_sow_data.json)
  """
  jsonData: JSON!

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """The amendment number"""
  amendmentNumber: Int

  """Column identifying if the record is an amendment"""
  isAmendment: Boolean

  """
  Reads a single `Application` that is related to this `ApplicationSowData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationSowData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationSowData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationSowData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """Reads and enables pagination through a set of `SowTab2`."""
  sowTab2SBySowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab2`."""
    orderBy: [SowTab2SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab2Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab2Filter
  ): SowTab2SConnection!

  """Reads and enables pagination through a set of `SowTab1`."""
  sowTab1SBySowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab1`."""
    orderBy: [SowTab1SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab1Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab1Filter
  ): SowTab1SConnection!

  """Reads and enables pagination through a set of `SowTab7`."""
  sowTab7SBySowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab7`."""
    orderBy: [SowTab7SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab7Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab7Filter
  ): SowTab7SConnection!

  """Reads and enables pagination through a set of `SowTab8`."""
  sowTab8SBySowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab8`."""
    orderBy: [SowTab8SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab8Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab8Filter
  ): SowTab8SConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab2SowIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationSowDataCcbcUsersBySowTab2SowIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab2SowIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationSowDataCcbcUsersBySowTab2SowIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab2SowIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationSowDataCcbcUsersBySowTab2SowIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab1SowIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationSowDataCcbcUsersBySowTab1SowIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab1SowIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationSowDataCcbcUsersBySowTab1SowIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab1SowIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationSowDataCcbcUsersBySowTab1SowIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab7SowIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationSowDataCcbcUsersBySowTab7SowIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab7SowIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationSowDataCcbcUsersBySowTab7SowIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab7SowIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationSowDataCcbcUsersBySowTab7SowIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab8SowIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationSowDataCcbcUsersBySowTab8SowIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab8SowIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationSowDataCcbcUsersBySowTab8SowIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersBySowTab8SowIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): ApplicationSowDataCcbcUsersBySowTab8SowIdAndArchivedByManyToManyConnection!
}

"""A connection to a list of `SowTab2` values."""
type SowTab2SConnection {
  """A list of `SowTab2` objects."""
  nodes: [SowTab2]!

  """
  A list of edges which contains the `SowTab2` and cursor to aid in pagination.
  """
  edges: [SowTab2SEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SowTab2` you could get from the connection."""
  totalCount: Int!
}

"""Table containing the detailed budget data for the given SoW"""
type SowTab2 implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the SoW detailed budget record"""
  rowId: Int!

  """ID of the SoW"""
  sowId: Int

  """
  The data imported from the Excel filled by the respondent. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fsow_tab_2.json)
  """
  jsonData: JSON!

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `ApplicationSowData` that is related to this `SowTab2`."""
  applicationSowDataBySowId: ApplicationSowData

  """Reads a single `CcbcUser` that is related to this `SowTab2`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab2`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab2`."""
  ccbcUserByArchivedBy: CcbcUser
}

"""A `SowTab2` edge in the connection."""
type SowTab2SEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SowTab2` at the end of the edge."""
  node: SowTab2
}

"""Methods to use when ordering `SowTab2`."""
enum SowTab2SOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SOW_ID_ASC
  SOW_ID_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SowTab2` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SowTab2Condition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `sowId` field."""
  sowId: Int

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A connection to a list of `SowTab1` values."""
type SowTab1SConnection {
  """A list of `SowTab1` objects."""
  nodes: [SowTab1]!

  """
  A list of edges which contains the `SowTab1` and cursor to aid in pagination.
  """
  edges: [SowTab1SEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SowTab1` you could get from the connection."""
  totalCount: Int!
}

type SowTab1 implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  sowId: Int

  """
  The data imported from the Excel filled by the respondent. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fsow_tab_1.json)
  """
  jsonData: JSON!

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `ApplicationSowData` that is related to this `SowTab1`."""
  applicationSowDataBySowId: ApplicationSowData

  """Reads a single `CcbcUser` that is related to this `SowTab1`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab1`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab1`."""
  ccbcUserByArchivedBy: CcbcUser
}

"""A `SowTab1` edge in the connection."""
type SowTab1SEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SowTab1` at the end of the edge."""
  node: SowTab1
}

"""Methods to use when ordering `SowTab1`."""
enum SowTab1SOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SOW_ID_ASC
  SOW_ID_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SowTab1` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SowTab1Condition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `sowId` field."""
  sowId: Int

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A connection to a list of `SowTab7` values."""
type SowTab7SConnection {
  """A list of `SowTab7` objects."""
  nodes: [SowTab7]!

  """
  A list of edges which contains the `SowTab7` and cursor to aid in pagination.
  """
  edges: [SowTab7SEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SowTab7` you could get from the connection."""
  totalCount: Int!
}

type SowTab7 implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  sowId: Int

  """
  The data imported from the Excel filled by the respondent. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fsow_tab_7.json)
  """
  jsonData: JSON!

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `ApplicationSowData` that is related to this `SowTab7`."""
  applicationSowDataBySowId: ApplicationSowData

  """Reads a single `CcbcUser` that is related to this `SowTab7`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab7`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab7`."""
  ccbcUserByArchivedBy: CcbcUser
}

"""A `SowTab7` edge in the connection."""
type SowTab7SEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SowTab7` at the end of the edge."""
  node: SowTab7
}

"""Methods to use when ordering `SowTab7`."""
enum SowTab7SOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SOW_ID_ASC
  SOW_ID_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SowTab7` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SowTab7Condition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `sowId` field."""
  sowId: Int

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A connection to a list of `SowTab8` values."""
type SowTab8SConnection {
  """A list of `SowTab8` objects."""
  nodes: [SowTab8]!

  """
  A list of edges which contains the `SowTab8` and cursor to aid in pagination.
  """
  edges: [SowTab8SEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SowTab8` you could get from the connection."""
  totalCount: Int!
}

"""Table containing the detailed budget data for the given SoW"""
type SowTab8 implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the SoW Tab 8"""
  rowId: Int!

  """ID of the SoW"""
  sowId: Int

  """
  The data imported from the Excel filled by the respondent. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fsow_tab_8.json)
  """
  jsonData: JSON!

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `ApplicationSowData` that is related to this `SowTab8`."""
  applicationSowDataBySowId: ApplicationSowData

  """Reads a single `CcbcUser` that is related to this `SowTab8`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab8`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab8`."""
  ccbcUserByArchivedBy: CcbcUser
}

"""A `SowTab8` edge in the connection."""
type SowTab8SEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SowTab8` at the end of the edge."""
  node: SowTab8
}

"""Methods to use when ordering `SowTab8`."""
enum SowTab8SOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SOW_ID_ASC
  SOW_ID_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SowTab8` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SowTab8Condition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `sowId` field."""
  sowId: Int

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab2`."""
type ApplicationSowDataCcbcUsersBySowTab2SowIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab2`, and the cursor to aid in pagination.
  """
  edges: [ApplicationSowDataCcbcUsersBySowTab2SowIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab2`."""
type ApplicationSowDataCcbcUsersBySowTab2SowIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab2`."""
  sowTab2SByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab2`."""
    orderBy: [SowTab2SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab2Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab2Filter
  ): SowTab2SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab2`."""
type ApplicationSowDataCcbcUsersBySowTab2SowIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab2`, and the cursor to aid in pagination.
  """
  edges: [ApplicationSowDataCcbcUsersBySowTab2SowIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab2`."""
type ApplicationSowDataCcbcUsersBySowTab2SowIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab2`."""
  sowTab2SByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab2`."""
    orderBy: [SowTab2SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab2Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab2Filter
  ): SowTab2SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab2`."""
type ApplicationSowDataCcbcUsersBySowTab2SowIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab2`, and the cursor to aid in pagination.
  """
  edges: [ApplicationSowDataCcbcUsersBySowTab2SowIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab2`."""
type ApplicationSowDataCcbcUsersBySowTab2SowIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab2`."""
  sowTab2SByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab2`."""
    orderBy: [SowTab2SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab2Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab2Filter
  ): SowTab2SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab1`."""
type ApplicationSowDataCcbcUsersBySowTab1SowIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab1`, and the cursor to aid in pagination.
  """
  edges: [ApplicationSowDataCcbcUsersBySowTab1SowIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab1`."""
type ApplicationSowDataCcbcUsersBySowTab1SowIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab1`."""
  sowTab1SByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab1`."""
    orderBy: [SowTab1SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab1Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab1Filter
  ): SowTab1SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab1`."""
type ApplicationSowDataCcbcUsersBySowTab1SowIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab1`, and the cursor to aid in pagination.
  """
  edges: [ApplicationSowDataCcbcUsersBySowTab1SowIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab1`."""
type ApplicationSowDataCcbcUsersBySowTab1SowIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab1`."""
  sowTab1SByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab1`."""
    orderBy: [SowTab1SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab1Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab1Filter
  ): SowTab1SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab1`."""
type ApplicationSowDataCcbcUsersBySowTab1SowIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab1`, and the cursor to aid in pagination.
  """
  edges: [ApplicationSowDataCcbcUsersBySowTab1SowIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab1`."""
type ApplicationSowDataCcbcUsersBySowTab1SowIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab1`."""
  sowTab1SByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab1`."""
    orderBy: [SowTab1SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab1Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab1Filter
  ): SowTab1SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab7`."""
type ApplicationSowDataCcbcUsersBySowTab7SowIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab7`, and the cursor to aid in pagination.
  """
  edges: [ApplicationSowDataCcbcUsersBySowTab7SowIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab7`."""
type ApplicationSowDataCcbcUsersBySowTab7SowIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab7`."""
  sowTab7SByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab7`."""
    orderBy: [SowTab7SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab7Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab7Filter
  ): SowTab7SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab7`."""
type ApplicationSowDataCcbcUsersBySowTab7SowIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab7`, and the cursor to aid in pagination.
  """
  edges: [ApplicationSowDataCcbcUsersBySowTab7SowIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab7`."""
type ApplicationSowDataCcbcUsersBySowTab7SowIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab7`."""
  sowTab7SByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab7`."""
    orderBy: [SowTab7SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab7Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab7Filter
  ): SowTab7SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab7`."""
type ApplicationSowDataCcbcUsersBySowTab7SowIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab7`, and the cursor to aid in pagination.
  """
  edges: [ApplicationSowDataCcbcUsersBySowTab7SowIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab7`."""
type ApplicationSowDataCcbcUsersBySowTab7SowIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab7`."""
  sowTab7SByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab7`."""
    orderBy: [SowTab7SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab7Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab7Filter
  ): SowTab7SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab8`."""
type ApplicationSowDataCcbcUsersBySowTab8SowIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab8`, and the cursor to aid in pagination.
  """
  edges: [ApplicationSowDataCcbcUsersBySowTab8SowIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab8`."""
type ApplicationSowDataCcbcUsersBySowTab8SowIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab8`."""
  sowTab8SByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab8`."""
    orderBy: [SowTab8SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab8Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab8Filter
  ): SowTab8SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab8`."""
type ApplicationSowDataCcbcUsersBySowTab8SowIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab8`, and the cursor to aid in pagination.
  """
  edges: [ApplicationSowDataCcbcUsersBySowTab8SowIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab8`."""
type ApplicationSowDataCcbcUsersBySowTab8SowIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab8`."""
  sowTab8SByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab8`."""
    orderBy: [SowTab8SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab8Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab8Filter
  ): SowTab8SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab8`."""
type ApplicationSowDataCcbcUsersBySowTab8SowIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab8`, and the cursor to aid in pagination.
  """
  edges: [ApplicationSowDataCcbcUsersBySowTab8SowIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab8`."""
type ApplicationSowDataCcbcUsersBySowTab8SowIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab8`."""
  sowTab8SByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab8`."""
    orderBy: [SowTab8SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab8Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab8Filter
  ): SowTab8SConnection!
}

"""A `ApplicationSowData` edge in the connection."""
type ApplicationSowDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationSowData` at the end of the edge."""
  node: ApplicationSowData
}

"""Methods to use when ordering `ApplicationSowData`."""
enum ApplicationSowDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  AMENDMENT_NUMBER_ASC
  AMENDMENT_NUMBER_DESC
  IS_AMENDMENT_ASC
  IS_AMENDMENT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ApplicationSowData` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ApplicationSowDataCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `amendmentNumber` field."""
  amendmentNumber: Int

  """Checks for equality with the object’s `isAmendment` field."""
  isAmendment: Boolean
}

"""A connection to a list of `ProjectInformationData` values."""
type ProjectInformationDataConnection {
  """A list of `ProjectInformationData` objects."""
  nodes: [ProjectInformationData]!

  """
  A list of edges which contains the `ProjectInformationData` and cursor to aid in pagination.
  """
  edges: [ProjectInformationDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectInformationData` you could get from the connection.
  """
  totalCount: Int!
}

"""Table to store project information data"""
type ProjectInformationData implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique id for the row"""
  rowId: Int!

  """The foreign key of an application"""
  applicationId: Int

  """
  The json form data of the project information form. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fproject_information_data.json)
  """
  jsonData: JSON!

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """
  Reads a single `Application` that is related to this `ProjectInformationData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ProjectInformationData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ProjectInformationData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ProjectInformationData`.
  """
  ccbcUserByArchivedBy: CcbcUser
}

"""A `ProjectInformationData` edge in the connection."""
type ProjectInformationDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectInformationData` at the end of the edge."""
  node: ProjectInformationData
}

"""Methods to use when ordering `ProjectInformationData`."""
enum ProjectInformationDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ProjectInformationData` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ProjectInformationDataCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A connection to a list of `ChangeRequestData` values."""
type ChangeRequestDataConnection {
  """A list of `ChangeRequestData` objects."""
  nodes: [ChangeRequestData]!

  """
  A list of edges which contains the `ChangeRequestData` and cursor to aid in pagination.
  """
  edges: [ChangeRequestDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ChangeRequestData` you could get from the connection.
  """
  totalCount: Int!
}

"""Table to store change request data"""
type ChangeRequestData implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique id for the row"""
  rowId: Int!

  """The foreign key of an application"""
  applicationId: Int

  """The json form data of the change request form"""
  jsonData: JSON!

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
  amendmentNumber: Int

  """
  Reads a single `Application` that is related to this `ChangeRequestData`.
  """
  applicationByApplicationId: Application

  """Reads a single `CcbcUser` that is related to this `ChangeRequestData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `ChangeRequestData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `ChangeRequestData`."""
  ccbcUserByArchivedBy: CcbcUser
}

"""A `ChangeRequestData` edge in the connection."""
type ChangeRequestDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChangeRequestData` at the end of the edge."""
  node: ChangeRequestData
}

"""Methods to use when ordering `ChangeRequestData`."""
enum ChangeRequestDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  AMENDMENT_NUMBER_ASC
  AMENDMENT_NUMBER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ChangeRequestData` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ChangeRequestDataCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `amendmentNumber` field."""
  amendmentNumber: Int
}

"""
A connection to a list of `ApplicationCommunityProgressReportData` values.
"""
type ApplicationCommunityProgressReportDataConnection {
  """A list of `ApplicationCommunityProgressReportData` objects."""
  nodes: [ApplicationCommunityProgressReportData]!

  """
  A list of edges which contains the `ApplicationCommunityProgressReportData` and cursor to aid in pagination.
  """
  edges: [ApplicationCommunityProgressReportDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationCommunityProgressReportData` you could get from the connection.
  """
  totalCount: Int!
}

"""
Table containing the Community Progress Report data for the given application
"""
type ApplicationCommunityProgressReportData implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the  Community Progress Report"""
  rowId: Int!

  """ID of the application this Community Progress Report belongs to"""
  applicationId: Int

  """
  The due date, date received and the file information of the Community Progress Report Excel file
  """
  jsonData: JSON!

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """The id of the excel data that this record is associated with"""
  excelDataId: Int

  """History operation"""
  historyOperation: String

  """
  Reads a single `Application` that is related to this `ApplicationCommunityProgressReportData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationCommunityProgressReportData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationCommunityProgressReportData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationCommunityProgressReportData`.
  """
  ccbcUserByArchivedBy: CcbcUser
}

"""A `ApplicationCommunityProgressReportData` edge in the connection."""
type ApplicationCommunityProgressReportDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationCommunityProgressReportData` at the end of the edge."""
  node: ApplicationCommunityProgressReportData
}

"""Methods to use when ordering `ApplicationCommunityProgressReportData`."""
enum ApplicationCommunityProgressReportDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  EXCEL_DATA_ID_ASC
  EXCEL_DATA_ID_DESC
  HISTORY_OPERATION_ASC
  HISTORY_OPERATION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ApplicationCommunityProgressReportData` object
types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ApplicationCommunityProgressReportDataCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `excelDataId` field."""
  excelDataId: Int

  """Checks for equality with the object’s `historyOperation` field."""
  historyOperation: String
}

"""
A connection to a list of `ApplicationCommunityReportExcelData` values.
"""
type ApplicationCommunityReportExcelDataConnection {
  """A list of `ApplicationCommunityReportExcelData` objects."""
  nodes: [ApplicationCommunityReportExcelData]!

  """
  A list of edges which contains the `ApplicationCommunityReportExcelData` and cursor to aid in pagination.
  """
  edges: [ApplicationCommunityReportExcelDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationCommunityReportExcelData` you could get from the connection.
  """
  totalCount: Int!
}

"""
Table containing the Community Report excel data for the given application
"""
type ApplicationCommunityReportExcelData implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the Community Report excel data"""
  rowId: Int!

  """ID of the application this Community Report belongs to"""
  applicationId: Int

  """The data imported from the excel filled by the respondent"""
  jsonData: JSON!

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """
  Reads a single `Application` that is related to this `ApplicationCommunityReportExcelData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationCommunityReportExcelData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationCommunityReportExcelData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationCommunityReportExcelData`.
  """
  ccbcUserByArchivedBy: CcbcUser
}

"""A `ApplicationCommunityReportExcelData` edge in the connection."""
type ApplicationCommunityReportExcelDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationCommunityReportExcelData` at the end of the edge."""
  node: ApplicationCommunityReportExcelData
}

"""Methods to use when ordering `ApplicationCommunityReportExcelData`."""
enum ApplicationCommunityReportExcelDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ApplicationCommunityReportExcelData` object
types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ApplicationCommunityReportExcelDataCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A connection to a list of `ApplicationClaimsData` values."""
type ApplicationClaimsDataConnection {
  """A list of `ApplicationClaimsData` objects."""
  nodes: [ApplicationClaimsData]!

  """
  A list of edges which contains the `ApplicationClaimsData` and cursor to aid in pagination.
  """
  edges: [ApplicationClaimsDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationClaimsData` you could get from the connection.
  """
  totalCount: Int!
}

"""Table containing the claims data for the given application"""
type ApplicationClaimsData implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique id for the claims"""
  rowId: Int!

  """Id of the application the claims belongs to"""
  applicationId: Int

  """The claims form json data"""
  jsonData: JSON!

  """The id of the excel data that this record is associated with"""
  excelDataId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Column to track if record was created, updated or deleted for history"""
  historyOperation: String

  """
  Reads a single `Application` that is related to this `ApplicationClaimsData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationClaimsData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationClaimsData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationClaimsData`.
  """
  ccbcUserByArchivedBy: CcbcUser
}

"""A `ApplicationClaimsData` edge in the connection."""
type ApplicationClaimsDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationClaimsData` at the end of the edge."""
  node: ApplicationClaimsData
}

"""Methods to use when ordering `ApplicationClaimsData`."""
enum ApplicationClaimsDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  EXCEL_DATA_ID_ASC
  EXCEL_DATA_ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  HISTORY_OPERATION_ASC
  HISTORY_OPERATION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ApplicationClaimsData` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ApplicationClaimsDataCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `excelDataId` field."""
  excelDataId: Int

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `historyOperation` field."""
  historyOperation: String
}

"""A connection to a list of `ApplicationClaimsExcelData` values."""
type ApplicationClaimsExcelDataConnection {
  """A list of `ApplicationClaimsExcelData` objects."""
  nodes: [ApplicationClaimsExcelData]!

  """
  A list of edges which contains the `ApplicationClaimsExcelData` and cursor to aid in pagination.
  """
  edges: [ApplicationClaimsExcelDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationClaimsExcelData` you could get from the connection.
  """
  totalCount: Int!
}

"""Table containing the claims excel data for the given application"""
type ApplicationClaimsExcelData implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the claims excel data"""
  rowId: Int!

  """ID of the application this data belongs to"""
  applicationId: Int

  """The data imported from the excel filled by the respondent"""
  jsonData: JSON!

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """
  Reads a single `Application` that is related to this `ApplicationClaimsExcelData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationClaimsExcelData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationClaimsExcelData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationClaimsExcelData`.
  """
  ccbcUserByArchivedBy: CcbcUser
}

"""A `ApplicationClaimsExcelData` edge in the connection."""
type ApplicationClaimsExcelDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationClaimsExcelData` at the end of the edge."""
  node: ApplicationClaimsExcelData
}

"""Methods to use when ordering `ApplicationClaimsExcelData`."""
enum ApplicationClaimsExcelDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ApplicationClaimsExcelData` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ApplicationClaimsExcelDataCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A connection to a list of `ApplicationMilestoneData` values."""
type ApplicationMilestoneDataConnection {
  """A list of `ApplicationMilestoneData` objects."""
  nodes: [ApplicationMilestoneData]!

  """
  A list of edges which contains the `ApplicationMilestoneData` and cursor to aid in pagination.
  """
  edges: [ApplicationMilestoneDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationMilestoneData` you could get from the connection.
  """
  totalCount: Int!
}

"""Table containing the milestone data for the given application"""
type ApplicationMilestoneData implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique id for the milestone"""
  rowId: Int!

  """Id of the application the milestone belongs to"""
  applicationId: Int

  """The milestone form json data"""
  jsonData: JSON!

  """The id of the excel data that this record is associated with"""
  excelDataId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """History operation"""
  historyOperation: String

  """
  Reads a single `Application` that is related to this `ApplicationMilestoneData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationMilestoneData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationMilestoneData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationMilestoneData`.
  """
  ccbcUserByArchivedBy: CcbcUser
}

"""A `ApplicationMilestoneData` edge in the connection."""
type ApplicationMilestoneDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationMilestoneData` at the end of the edge."""
  node: ApplicationMilestoneData
}

"""Methods to use when ordering `ApplicationMilestoneData`."""
enum ApplicationMilestoneDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  EXCEL_DATA_ID_ASC
  EXCEL_DATA_ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  HISTORY_OPERATION_ASC
  HISTORY_OPERATION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ApplicationMilestoneData` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ApplicationMilestoneDataCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `excelDataId` field."""
  excelDataId: Int

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `historyOperation` field."""
  historyOperation: String
}

"""A connection to a list of `ApplicationMilestoneExcelData` values."""
type ApplicationMilestoneExcelDataConnection {
  """A list of `ApplicationMilestoneExcelData` objects."""
  nodes: [ApplicationMilestoneExcelData]!

  """
  A list of edges which contains the `ApplicationMilestoneExcelData` and cursor to aid in pagination.
  """
  edges: [ApplicationMilestoneExcelDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationMilestoneExcelData` you could get from the connection.
  """
  totalCount: Int!
}

"""Table containing the milestone excel data for the given application"""
type ApplicationMilestoneExcelData implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the milestone excel data"""
  rowId: Int!

  """ID of the application this data belongs to"""
  applicationId: Int

  """The data imported from the excel filled by the respondent"""
  jsonData: JSON!

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """
  Reads a single `Application` that is related to this `ApplicationMilestoneExcelData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationMilestoneExcelData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationMilestoneExcelData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationMilestoneExcelData`.
  """
  ccbcUserByArchivedBy: CcbcUser
}

"""A `ApplicationMilestoneExcelData` edge in the connection."""
type ApplicationMilestoneExcelDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationMilestoneExcelData` at the end of the edge."""
  node: ApplicationMilestoneExcelData
}

"""Methods to use when ordering `ApplicationMilestoneExcelData`."""
enum ApplicationMilestoneExcelDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ApplicationMilestoneExcelData` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ApplicationMilestoneExcelDataCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A connection to a list of `ApplicationInternalDescription` values."""
type ApplicationInternalDescriptionsConnection {
  """A list of `ApplicationInternalDescription` objects."""
  nodes: [ApplicationInternalDescription]!

  """
  A list of edges which contains the `ApplicationInternalDescription` and cursor to aid in pagination.
  """
  edges: [ApplicationInternalDescriptionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationInternalDescription` you could get from the connection.
  """
  totalCount: Int!
}

"""Table containing the internal description for the given application"""
type ApplicationInternalDescription implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique id for the row"""
  rowId: Int!

  """Id of the application the description belongs to"""
  applicationId: Int

  """The internal description for the given application"""
  description: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """
  Reads a single `Application` that is related to this `ApplicationInternalDescription`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationInternalDescription`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationInternalDescription`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationInternalDescription`.
  """
  ccbcUserByArchivedBy: CcbcUser
}

"""A `ApplicationInternalDescription` edge in the connection."""
type ApplicationInternalDescriptionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationInternalDescription` at the end of the edge."""
  node: ApplicationInternalDescription
}

"""Methods to use when ordering `ApplicationInternalDescription`."""
enum ApplicationInternalDescriptionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ApplicationInternalDescription` object types.
All fields are tested for equality and combined with a logical ‘and.’
"""
input ApplicationInternalDescriptionCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A connection to a list of `ApplicationProjectType` values."""
type ApplicationProjectTypesConnection {
  """A list of `ApplicationProjectType` objects."""
  nodes: [ApplicationProjectType]!

  """
  A list of edges which contains the `ApplicationProjectType` and cursor to aid in pagination.
  """
  edges: [ApplicationProjectTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationProjectType` you could get from the connection.
  """
  totalCount: Int!
}

"""Table containing the project type of the application"""
type ApplicationProjectType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the application_project_type"""
  rowId: Int!

  """ID of the application this application_project_type belongs to"""
  applicationId: Int

  """Column containing the project type of the application"""
  projectType: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """
  Reads a single `Application` that is related to this `ApplicationProjectType`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationProjectType`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationProjectType`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationProjectType`.
  """
  ccbcUserByArchivedBy: CcbcUser
}

"""A `ApplicationProjectType` edge in the connection."""
type ApplicationProjectTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationProjectType` at the end of the edge."""
  node: ApplicationProjectType
}

"""Methods to use when ordering `ApplicationProjectType`."""
enum ApplicationProjectTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  PROJECT_TYPE_ASC
  PROJECT_TYPE_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ApplicationProjectType` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ApplicationProjectTypeCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `projectType` field."""
  projectType: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A connection to a list of `Notification` values."""
type NotificationsConnection {
  """A list of `Notification` objects."""
  nodes: [Notification]!

  """
  A list of edges which contains the `Notification` and cursor to aid in pagination.
  """
  edges: [NotificationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Notification` you could get from the connection."""
  totalCount: Int!
}

"""Table containing list of application notifications"""
type Notification implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for each notification"""
  rowId: Int!

  """Type of the notification"""
  notificationType: String

  """ID of the application this notification belongs to"""
  applicationId: Int

  """Additional data for the notification"""
  jsonData: JSON!

  """Column referencing the email record"""
  emailRecordId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `Application` that is related to this `Notification`."""
  applicationByApplicationId: Application

  """Reads a single `EmailRecord` that is related to this `Notification`."""
  emailRecordByEmailRecordId: EmailRecord

  """Reads a single `CcbcUser` that is related to this `Notification`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Notification`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Notification`."""
  ccbcUserByArchivedBy: CcbcUser
}

"""Table containing list of application email_records"""
type EmailRecord implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for each email sent"""
  rowId: Int!

  """Email Address(es) of the recipients"""
  toEmail: String

  """Email Address(es) of the CC recipients"""
  ccEmail: String

  """Subject of the email"""
  subject: String

  """Body of the email"""
  body: String

  """Message ID of the email returned by the email server"""
  messageId: String

  """Additional data for the email"""
  jsonData: JSON!

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `CcbcUser` that is related to this `EmailRecord`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `EmailRecord`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `EmailRecord`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByEmailRecordId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByNotificationEmailRecordIdAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): EmailRecordApplicationsByNotificationEmailRecordIdAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByNotificationEmailRecordIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): EmailRecordCcbcUsersByNotificationEmailRecordIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByNotificationEmailRecordIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): EmailRecordCcbcUsersByNotificationEmailRecordIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByNotificationEmailRecordIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): EmailRecordCcbcUsersByNotificationEmailRecordIdAndArchivedByManyToManyConnection!
}

"""Methods to use when ordering `Notification`."""
enum NotificationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NOTIFICATION_TYPE_ASC
  NOTIFICATION_TYPE_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  EMAIL_RECORD_ID_ASC
  EMAIL_RECORD_ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Notification` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NotificationCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `notificationType` field."""
  notificationType: String

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `emailRecordId` field."""
  emailRecordId: Int

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""
A connection to a list of `Application` values, with data from `Notification`.
"""
type EmailRecordApplicationsByNotificationEmailRecordIdAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `Notification`, and the cursor to aid in pagination.
  """
  edges: [EmailRecordApplicationsByNotificationEmailRecordIdAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""A `Application` edge in the connection, with data from `Notification`."""
type EmailRecordApplicationsByNotificationEmailRecordIdAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Notification`.
"""
type EmailRecordCcbcUsersByNotificationEmailRecordIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Notification`, and the cursor to aid in pagination.
  """
  edges: [EmailRecordCcbcUsersByNotificationEmailRecordIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Notification`."""
type EmailRecordCcbcUsersByNotificationEmailRecordIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Notification`.
"""
type EmailRecordCcbcUsersByNotificationEmailRecordIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Notification`, and the cursor to aid in pagination.
  """
  edges: [EmailRecordCcbcUsersByNotificationEmailRecordIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Notification`."""
type EmailRecordCcbcUsersByNotificationEmailRecordIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Notification`.
"""
type EmailRecordCcbcUsersByNotificationEmailRecordIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Notification`, and the cursor to aid in pagination.
  """
  edges: [EmailRecordCcbcUsersByNotificationEmailRecordIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Notification`."""
type EmailRecordCcbcUsersByNotificationEmailRecordIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!
}

"""A `Notification` edge in the connection."""
type NotificationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Notification` at the end of the edge."""
  node: Notification
}

"""A connection to a list of `ApplicationPendingChangeRequest` values."""
type ApplicationPendingChangeRequestsConnection {
  """A list of `ApplicationPendingChangeRequest` objects."""
  nodes: [ApplicationPendingChangeRequest]!

  """
  A list of edges which contains the `ApplicationPendingChangeRequest` and cursor to aid in pagination.
  """
  edges: [ApplicationPendingChangeRequestsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationPendingChangeRequest` you could get from the connection.
  """
  totalCount: Int!
}

"""Table containing the pending change request details of the application"""
type ApplicationPendingChangeRequest implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the application_pending_change_request"""
  rowId: Int!

  """
  ID of the application this application_pending_change_request belongs to
  """
  applicationId: Int

  """Column defining if the change request pending or not"""
  isPending: Boolean

  """
  Column containing the comment for the change request or completion of the change request
  """
  comment: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """
  Reads a single `Application` that is related to this `ApplicationPendingChangeRequest`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPendingChangeRequest`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPendingChangeRequest`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPendingChangeRequest`.
  """
  ccbcUserByArchivedBy: CcbcUser
}

"""A `ApplicationPendingChangeRequest` edge in the connection."""
type ApplicationPendingChangeRequestsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationPendingChangeRequest` at the end of the edge."""
  node: ApplicationPendingChangeRequest
}

"""Methods to use when ordering `ApplicationPendingChangeRequest`."""
enum ApplicationPendingChangeRequestsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  IS_PENDING_ASC
  IS_PENDING_DESC
  COMMENT_ASC
  COMMENT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ApplicationPendingChangeRequest` object types.
All fields are tested for equality and combined with a logical ‘and.’
"""
input ApplicationPendingChangeRequestCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `isPending` field."""
  isPending: Boolean

  """Checks for equality with the object’s `comment` field."""
  comment: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A connection to a list of `ApplicationAnnounced` values."""
type ApplicationAnnouncedsConnection {
  """A list of `ApplicationAnnounced` objects."""
  nodes: [ApplicationAnnounced]!

  """
  A list of edges which contains the `ApplicationAnnounced` and cursor to aid in pagination.
  """
  edges: [ApplicationAnnouncedsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationAnnounced` you could get from the connection.
  """
  totalCount: Int!
}

"""Table containing if the application has been announced by BC or ISED"""
type ApplicationAnnounced implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the application_announced"""
  rowId: Int!

  """ID of the application this record belongs to"""
  applicationId: Int

  """Whether the application has been announced by BC or ISED"""
  announced: Boolean

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """
  Reads a single `Application` that is related to this `ApplicationAnnounced`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnounced`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnounced`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnounced`.
  """
  ccbcUserByArchivedBy: CcbcUser
}

"""A `ApplicationAnnounced` edge in the connection."""
type ApplicationAnnouncedsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationAnnounced` at the end of the edge."""
  node: ApplicationAnnounced
}

"""Methods to use when ordering `ApplicationAnnounced`."""
enum ApplicationAnnouncedsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  ANNOUNCED_ASC
  ANNOUNCED_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ApplicationAnnounced` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ApplicationAnnouncedCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `announced` field."""
  announced: Boolean

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A connection to a list of `Announcement` values."""
type AnnouncementsConnection {
  """A list of `Announcement` objects."""
  nodes: [Announcement]!

  """
  A list of edges which contains the `Announcement` and cursor to aid in pagination.
  """
  edges: [AnnouncementsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Announcement` you could get from the connection."""
  totalCount: Int!
}

"""A `Announcement` edge in the connection."""
type AnnouncementsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Announcement` at the end of the edge."""
  node: Announcement
}

"""A connection to a list of `HistoryItem` values."""
type HistoryItemsConnection {
  """A list of `HistoryItem` objects."""
  nodes: [HistoryItem]!

  """
  A list of edges which contains the `HistoryItem` and cursor to aid in pagination.
  """
  edges: [HistoryItemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `HistoryItem` you could get from the connection."""
  totalCount: Int!
}

"""
This is a type used to return records of history data in the application_history computed column
"""
type HistoryItem {
  """Application Id."""
  applicationId: Int

  """Timestamp of the operation recorded."""
  createdAt: Datetime

  """Type of operation: INSERT/UPDATE/DELETE/TRUNCATE/SNAPSHOT."""
  op: Operation

  """Table name."""
  tableName: String

  """
  Identifier that uniquely identifies a record by primary key [primary key + table_oid].
  """
  recordId: UUID

  """New record in Json format."""
  record: JSON

  """Old record in Json format."""
  oldRecord: JSON

  """
  Main object affected by the operation (i.e. status, or file name or RFI type).
  """
  item: String

  """First Name of the user who performed the operation."""
  familyName: String

  """Last Name of the user who performed the operation."""
  givenName: String

  """Session sub of the user who performed the operation."""
  sessionSub: String

  """User is an external analyst"""
  externalAnalyst: Boolean
}

"""A `HistoryItem` edge in the connection."""
type HistoryItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `HistoryItem` at the end of the edge."""
  node: HistoryItem
}

"""
A filter to be used against `HistoryItem` object types. All fields are combined with a logical ‘and.’
"""
input HistoryItemFilter {
  """Filter by the object’s `applicationId` field."""
  applicationId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `op` field."""
  op: OperationFilter

  """Filter by the object’s `tableName` field."""
  tableName: StringFilter

  """Filter by the object’s `recordId` field."""
  recordId: UUIDFilter

  """Filter by the object’s `record` field."""
  record: JSONFilter

  """Filter by the object’s `oldRecord` field."""
  oldRecord: JSONFilter

  """Filter by the object’s `item` field."""
  item: StringFilter

  """Filter by the object’s `familyName` field."""
  familyName: StringFilter

  """Filter by the object’s `givenName` field."""
  givenName: StringFilter

  """Filter by the object’s `sessionSub` field."""
  sessionSub: StringFilter

  """Filter by the object’s `externalAnalyst` field."""
  externalAnalyst: BooleanFilter

  """Checks for all expressions in this list."""
  and: [HistoryItemFilter!]

  """Checks for any expressions in this list."""
  or: [HistoryItemFilter!]

  """Negates the expression."""
  not: HistoryItemFilter
}

"""
A connection to a list of `ApplicationStatusType` values, with data from `ApplicationStatus`.
"""
type ApplicationApplicationStatusTypesByApplicationStatusApplicationIdAndStatusManyToManyConnection {
  """A list of `ApplicationStatusType` objects."""
  nodes: [ApplicationStatusType]!

  """
  A list of edges which contains the `ApplicationStatusType`, info from the `ApplicationStatus`, and the cursor to aid in pagination.
  """
  edges: [ApplicationApplicationStatusTypesByApplicationStatusApplicationIdAndStatusManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationStatusType` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ApplicationStatusType` edge in the connection, with data from `ApplicationStatus`.
"""
type ApplicationApplicationStatusTypesByApplicationStatusApplicationIdAndStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationStatusType` at the end of the edge."""
  node: ApplicationStatusType

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByStatus(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationStatusesConnection!
}

"""Methods to use when ordering `ApplicationStatusType`."""
enum ApplicationStatusTypesOrderBy {
  NATURAL
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  VISIBLE_BY_APPLICANT_ASC
  VISIBLE_BY_APPLICANT_DESC
  STATUS_ORDER_ASC
  STATUS_ORDER_DESC
  VISIBLE_BY_ANALYST_ASC
  VISIBLE_BY_ANALYST_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ApplicationStatusType` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ApplicationStatusTypeCondition {
  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `visibleByApplicant` field."""
  visibleByApplicant: Boolean

  """Checks for equality with the object’s `statusOrder` field."""
  statusOrder: Int

  """Checks for equality with the object’s `visibleByAnalyst` field."""
  visibleByAnalyst: Boolean
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationStatus`.
"""
type ApplicationCcbcUsersByApplicationStatusApplicationIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationStatus`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationStatusApplicationIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationStatus`.
"""
type ApplicationCcbcUsersByApplicationStatusApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationStatusesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationStatus`.
"""
type ApplicationCcbcUsersByApplicationStatusApplicationIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationStatus`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationStatusApplicationIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationStatus`.
"""
type ApplicationCcbcUsersByApplicationStatusApplicationIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationStatusesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationStatus`.
"""
type ApplicationCcbcUsersByApplicationStatusApplicationIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationStatus`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationStatusApplicationIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationStatus`.
"""
type ApplicationCcbcUsersByApplicationStatusApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationStatusesConnection!
}

"""
A connection to a list of `ApplicationStatus` values, with data from `Attachment`.
"""
type ApplicationApplicationStatusesByAttachmentApplicationIdAndApplicationStatusIdManyToManyConnection {
  """A list of `ApplicationStatus` objects."""
  nodes: [ApplicationStatus]!

  """
  A list of edges which contains the `ApplicationStatus`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [ApplicationApplicationStatusesByAttachmentApplicationIdAndApplicationStatusIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ApplicationStatus` edge in the connection, with data from `Attachment`.
"""
type ApplicationApplicationStatusesByAttachmentApplicationIdAndApplicationStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationStatus` at the end of the edge."""
  node: ApplicationStatus

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByApplicationStatusId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Attachment`.
"""
type ApplicationCcbcUsersByAttachmentApplicationIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByAttachmentApplicationIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Attachment`."""
type ApplicationCcbcUsersByAttachmentApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Attachment`.
"""
type ApplicationCcbcUsersByAttachmentApplicationIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByAttachmentApplicationIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Attachment`."""
type ApplicationCcbcUsersByAttachmentApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Attachment`.
"""
type ApplicationCcbcUsersByAttachmentApplicationIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByAttachmentApplicationIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Attachment`."""
type ApplicationCcbcUsersByAttachmentApplicationIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection!
}

"""
A connection to a list of `FormData` values, with data from `ApplicationFormData`.
"""
type ApplicationFormDataByApplicationFormDataApplicationIdAndFormDataIdManyToManyConnection {
  """A list of `FormData` objects."""
  nodes: [FormData]!

  """
  A list of edges which contains the `FormData`, info from the `ApplicationFormData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationFormDataByApplicationFormDataApplicationIdAndFormDataIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormData` you could get from the connection."""
  totalCount: Int!
}

"""
A `FormData` edge in the connection, with data from `ApplicationFormData`.
"""
type ApplicationFormDataByApplicationFormDataApplicationIdAndFormDataIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormData` at the end of the edge."""
  node: FormData
}

"""
A connection to a list of `Analyst` values, with data from `ApplicationAnalystLead`.
"""
type ApplicationAnalystsByApplicationAnalystLeadApplicationIdAndAnalystIdManyToManyConnection {
  """A list of `Analyst` objects."""
  nodes: [Analyst]!

  """
  A list of edges which contains the `Analyst`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [ApplicationAnalystsByApplicationAnalystLeadApplicationIdAndAnalystIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Analyst` you could get from the connection."""
  totalCount: Int!
}

"""
A `Analyst` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type ApplicationAnalystsByApplicationAnalystLeadApplicationIdAndAnalystIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Analyst` at the end of the edge."""
  node: Analyst

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByAnalystId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnalystLeadFilter
  ): ApplicationAnalystLeadsConnection!
}

"""Methods to use when ordering `Analyst`."""
enum AnalystsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  GIVEN_NAME_ASC
  GIVEN_NAME_DESC
  FAMILY_NAME_ASC
  FAMILY_NAME_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ACTIVE_ASC
  ACTIVE_DESC
  EMAIL_ASC
  EMAIL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Analyst` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AnalystCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `givenName` field."""
  givenName: String

  """Checks for equality with the object’s `familyName` field."""
  familyName: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `active` field."""
  active: Boolean

  """Checks for equality with the object’s `email` field."""
  email: String
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnalystLead`.
"""
type ApplicationCcbcUsersByApplicationAnalystLeadApplicationIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationAnalystLeadApplicationIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type ApplicationCcbcUsersByApplicationAnalystLeadApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnalystLeadFilter
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnalystLead`.
"""
type ApplicationCcbcUsersByApplicationAnalystLeadApplicationIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationAnalystLeadApplicationIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type ApplicationCcbcUsersByApplicationAnalystLeadApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnalystLeadFilter
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnalystLead`.
"""
type ApplicationCcbcUsersByApplicationAnalystLeadApplicationIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationAnalystLeadApplicationIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type ApplicationCcbcUsersByApplicationAnalystLeadApplicationIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnalystLeadFilter
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `RfiData` values, with data from `ApplicationRfiData`.
"""
type ApplicationRfiDataByApplicationRfiDataApplicationIdAndRfiDataIdManyToManyConnection {
  """A list of `RfiData` objects."""
  nodes: [RfiData]!

  """
  A list of edges which contains the `RfiData`, info from the `ApplicationRfiData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationRfiDataByApplicationRfiDataApplicationIdAndRfiDataIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RfiData` you could get from the connection."""
  totalCount: Int!
}

"""
A `RfiData` edge in the connection, with data from `ApplicationRfiData`.
"""
type ApplicationRfiDataByApplicationRfiDataApplicationIdAndRfiDataIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RfiData` at the end of the edge."""
  node: RfiData
}

"""
A connection to a list of `AssessmentType` values, with data from `AssessmentData`.
"""
type ApplicationAssessmentTypesByAssessmentDataApplicationIdAndAssessmentDataTypeManyToManyConnection {
  """A list of `AssessmentType` objects."""
  nodes: [AssessmentType]!

  """
  A list of edges which contains the `AssessmentType`, info from the `AssessmentData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationAssessmentTypesByAssessmentDataApplicationIdAndAssessmentDataTypeManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AssessmentType` you could get from the connection."""
  totalCount: Int!
}

"""
A `AssessmentType` edge in the connection, with data from `AssessmentData`.
"""
type ApplicationAssessmentTypesByAssessmentDataApplicationIdAndAssessmentDataTypeManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AssessmentType` at the end of the edge."""
  node: AssessmentType

  """Reads and enables pagination through a set of `AssessmentData`."""
  assessmentDataByAssessmentDataType(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection!
}

"""Methods to use when ordering `AssessmentType`."""
enum AssessmentTypesOrderBy {
  NATURAL
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `AssessmentType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AssessmentTypeCondition {
  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""
A connection to a list of `CcbcUser` values, with data from `AssessmentData`.
"""
type ApplicationCcbcUsersByAssessmentDataApplicationIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `AssessmentData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByAssessmentDataApplicationIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `AssessmentData`."""
type ApplicationCcbcUsersByAssessmentDataApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `AssessmentData`."""
  assessmentDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `AssessmentData`.
"""
type ApplicationCcbcUsersByAssessmentDataApplicationIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `AssessmentData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByAssessmentDataApplicationIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `AssessmentData`."""
type ApplicationCcbcUsersByAssessmentDataApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `AssessmentData`."""
  assessmentDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `AssessmentData`.
"""
type ApplicationCcbcUsersByAssessmentDataApplicationIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `AssessmentData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByAssessmentDataApplicationIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `AssessmentData`."""
type ApplicationCcbcUsersByAssessmentDataApplicationIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `AssessmentData`."""
  assessmentDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationPackage`.
"""
type ApplicationCcbcUsersByApplicationPackageApplicationIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationPackage`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationPackageApplicationIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationPackage`.
"""
type ApplicationCcbcUsersByApplicationPackageApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationPackage`."""
  applicationPackagesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPackage`."""
    orderBy: [ApplicationPackagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPackageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPackageFilter
  ): ApplicationPackagesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationPackage`.
"""
type ApplicationCcbcUsersByApplicationPackageApplicationIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationPackage`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationPackageApplicationIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationPackage`.
"""
type ApplicationCcbcUsersByApplicationPackageApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationPackage`."""
  applicationPackagesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPackage`."""
    orderBy: [ApplicationPackagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPackageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPackageFilter
  ): ApplicationPackagesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationPackage`.
"""
type ApplicationCcbcUsersByApplicationPackageApplicationIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationPackage`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationPackageApplicationIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationPackage`.
"""
type ApplicationCcbcUsersByApplicationPackageApplicationIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationPackage`."""
  applicationPackagesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPackage`."""
    orderBy: [ApplicationPackagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPackageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPackageFilter
  ): ApplicationPackagesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ConditionalApprovalData`.
"""
type ApplicationCcbcUsersByConditionalApprovalDataApplicationIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ConditionalApprovalData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByConditionalApprovalDataApplicationIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ConditionalApprovalData`.
"""
type ApplicationCcbcUsersByConditionalApprovalDataApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ConditionalApprovalData`.
  """
  conditionalApprovalDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ConditionalApprovalData`."""
    orderBy: [ConditionalApprovalDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConditionalApprovalDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConditionalApprovalDataFilter
  ): ConditionalApprovalDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ConditionalApprovalData`.
"""
type ApplicationCcbcUsersByConditionalApprovalDataApplicationIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ConditionalApprovalData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByConditionalApprovalDataApplicationIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ConditionalApprovalData`.
"""
type ApplicationCcbcUsersByConditionalApprovalDataApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ConditionalApprovalData`.
  """
  conditionalApprovalDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ConditionalApprovalData`."""
    orderBy: [ConditionalApprovalDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConditionalApprovalDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConditionalApprovalDataFilter
  ): ConditionalApprovalDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ConditionalApprovalData`.
"""
type ApplicationCcbcUsersByConditionalApprovalDataApplicationIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ConditionalApprovalData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByConditionalApprovalDataApplicationIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ConditionalApprovalData`.
"""
type ApplicationCcbcUsersByConditionalApprovalDataApplicationIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ConditionalApprovalData`.
  """
  conditionalApprovalDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ConditionalApprovalData`."""
    orderBy: [ConditionalApprovalDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConditionalApprovalDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConditionalApprovalDataFilter
  ): ConditionalApprovalDataConnection!
}

"""
A connection to a list of `GisData` values, with data from `ApplicationGisData`.
"""
type ApplicationGisDataByApplicationGisDataApplicationIdAndBatchIdManyToManyConnection {
  """A list of `GisData` objects."""
  nodes: [GisData]!

  """
  A list of edges which contains the `GisData`, info from the `ApplicationGisData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationGisDataByApplicationGisDataApplicationIdAndBatchIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GisData` you could get from the connection."""
  totalCount: Int!
}

"""
A `GisData` edge in the connection, with data from `ApplicationGisData`.
"""
type ApplicationGisDataByApplicationGisDataApplicationIdAndBatchIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GisData` at the end of the edge."""
  node: GisData

  """Reads and enables pagination through a set of `ApplicationGisData`."""
  applicationGisDataByBatchId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisDataFilter
  ): ApplicationGisDataConnection!
}

"""Methods to use when ordering `GisData`."""
enum GisDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `GisData` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GisDataCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationGisData`.
"""
type ApplicationCcbcUsersByApplicationGisDataApplicationIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationGisData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationGisDataApplicationIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationGisData`.
"""
type ApplicationCcbcUsersByApplicationGisDataApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationGisData`."""
  applicationGisDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisDataFilter
  ): ApplicationGisDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationGisData`.
"""
type ApplicationCcbcUsersByApplicationGisDataApplicationIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationGisData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationGisDataApplicationIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationGisData`.
"""
type ApplicationCcbcUsersByApplicationGisDataApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationGisData`."""
  applicationGisDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisDataFilter
  ): ApplicationGisDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationGisData`.
"""
type ApplicationCcbcUsersByApplicationGisDataApplicationIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationGisData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationGisDataApplicationIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationGisData`.
"""
type ApplicationCcbcUsersByApplicationGisDataApplicationIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationGisData`."""
  applicationGisDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisDataFilter
  ): ApplicationGisDataConnection!
}

"""
A connection to a list of `Announcement` values, with data from `ApplicationAnnouncement`.
"""
type ApplicationAnnouncementsByApplicationAnnouncementApplicationIdAndAnnouncementIdManyToManyConnection {
  """A list of `Announcement` objects."""
  nodes: [Announcement]!

  """
  A list of edges which contains the `Announcement`, info from the `ApplicationAnnouncement`, and the cursor to aid in pagination.
  """
  edges: [ApplicationAnnouncementsByApplicationAnnouncementApplicationIdAndAnnouncementIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Announcement` you could get from the connection."""
  totalCount: Int!
}

"""
A `Announcement` edge in the connection, with data from `ApplicationAnnouncement`.
"""
type ApplicationAnnouncementsByApplicationAnnouncementApplicationIdAndAnnouncementIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Announcement` at the end of the edge."""
  node: Announcement

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Flag to identify either announcement is primary or secondary"""
  isPrimary: Boolean

  """
  Column describing the operation (created, updated, deleted) for context on the history page
  """
  historyOperation: String
}

"""Methods to use when ordering `Announcement`."""
enum AnnouncementsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CCBC_NUMBERS_ASC
  CCBC_NUMBERS_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Announcement` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AnnouncementCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `ccbcNumbers` field."""
  ccbcNumbers: String

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnnouncement`.
"""
type ApplicationCcbcUsersByApplicationAnnouncementApplicationIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnnouncement`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationAnnouncementApplicationIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnnouncement`.
"""
type ApplicationCcbcUsersByApplicationAnnouncementApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnnouncement`.
  """
  applicationAnnouncementsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncementFilter
  ): ApplicationAnnouncementsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnnouncement`.
"""
type ApplicationCcbcUsersByApplicationAnnouncementApplicationIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnnouncement`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationAnnouncementApplicationIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnnouncement`.
"""
type ApplicationCcbcUsersByApplicationAnnouncementApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnnouncement`.
  """
  applicationAnnouncementsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncementFilter
  ): ApplicationAnnouncementsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnnouncement`.
"""
type ApplicationCcbcUsersByApplicationAnnouncementApplicationIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnnouncement`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationAnnouncementApplicationIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnnouncement`.
"""
type ApplicationCcbcUsersByApplicationAnnouncementApplicationIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnnouncement`.
  """
  applicationAnnouncementsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncementFilter
  ): ApplicationAnnouncementsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationGisAssessmentHh`.
"""
type ApplicationCcbcUsersByApplicationGisAssessmentHhApplicationIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationGisAssessmentHh`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationGisAssessmentHhApplicationIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationGisAssessmentHh`.
"""
type ApplicationCcbcUsersByApplicationGisAssessmentHhApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationGisAssessmentHh`.
  """
  applicationGisAssessmentHhsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisAssessmentHh`."""
    orderBy: [ApplicationGisAssessmentHhsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisAssessmentHhCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisAssessmentHhFilter
  ): ApplicationGisAssessmentHhsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationGisAssessmentHh`.
"""
type ApplicationCcbcUsersByApplicationGisAssessmentHhApplicationIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationGisAssessmentHh`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationGisAssessmentHhApplicationIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationGisAssessmentHh`.
"""
type ApplicationCcbcUsersByApplicationGisAssessmentHhApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationGisAssessmentHh`.
  """
  applicationGisAssessmentHhsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisAssessmentHh`."""
    orderBy: [ApplicationGisAssessmentHhsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisAssessmentHhCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisAssessmentHhFilter
  ): ApplicationGisAssessmentHhsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationGisAssessmentHh`.
"""
type ApplicationCcbcUsersByApplicationGisAssessmentHhApplicationIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationGisAssessmentHh`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationGisAssessmentHhApplicationIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationGisAssessmentHh`.
"""
type ApplicationCcbcUsersByApplicationGisAssessmentHhApplicationIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationGisAssessmentHh`.
  """
  applicationGisAssessmentHhsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisAssessmentHh`."""
    orderBy: [ApplicationGisAssessmentHhsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisAssessmentHhCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisAssessmentHhFilter
  ): ApplicationGisAssessmentHhsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationSowData`.
"""
type ApplicationCcbcUsersByApplicationSowDataApplicationIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationSowData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationSowDataApplicationIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationSowData`.
"""
type ApplicationCcbcUsersByApplicationSowDataApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): ApplicationSowDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationSowData`.
"""
type ApplicationCcbcUsersByApplicationSowDataApplicationIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationSowData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationSowDataApplicationIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationSowData`.
"""
type ApplicationCcbcUsersByApplicationSowDataApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): ApplicationSowDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationSowData`.
"""
type ApplicationCcbcUsersByApplicationSowDataApplicationIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationSowData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationSowDataApplicationIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationSowData`.
"""
type ApplicationCcbcUsersByApplicationSowDataApplicationIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): ApplicationSowDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ProjectInformationData`.
"""
type ApplicationCcbcUsersByProjectInformationDataApplicationIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ProjectInformationData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByProjectInformationDataApplicationIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ProjectInformationData`.
"""
type ApplicationCcbcUsersByProjectInformationDataApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ProjectInformationData`.
  """
  projectInformationDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProjectInformationData`."""
    orderBy: [ProjectInformationDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectInformationDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectInformationDataFilter
  ): ProjectInformationDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ProjectInformationData`.
"""
type ApplicationCcbcUsersByProjectInformationDataApplicationIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ProjectInformationData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByProjectInformationDataApplicationIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ProjectInformationData`.
"""
type ApplicationCcbcUsersByProjectInformationDataApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ProjectInformationData`.
  """
  projectInformationDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProjectInformationData`."""
    orderBy: [ProjectInformationDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectInformationDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectInformationDataFilter
  ): ProjectInformationDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ProjectInformationData`.
"""
type ApplicationCcbcUsersByProjectInformationDataApplicationIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ProjectInformationData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByProjectInformationDataApplicationIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ProjectInformationData`.
"""
type ApplicationCcbcUsersByProjectInformationDataApplicationIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ProjectInformationData`.
  """
  projectInformationDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProjectInformationData`."""
    orderBy: [ProjectInformationDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectInformationDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectInformationDataFilter
  ): ProjectInformationDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ChangeRequestData`.
"""
type ApplicationCcbcUsersByChangeRequestDataApplicationIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ChangeRequestData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByChangeRequestDataApplicationIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ChangeRequestData`.
"""
type ApplicationCcbcUsersByChangeRequestDataApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ChangeRequestData`."""
  changeRequestDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChangeRequestData`."""
    orderBy: [ChangeRequestDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeRequestDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeRequestDataFilter
  ): ChangeRequestDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ChangeRequestData`.
"""
type ApplicationCcbcUsersByChangeRequestDataApplicationIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ChangeRequestData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByChangeRequestDataApplicationIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ChangeRequestData`.
"""
type ApplicationCcbcUsersByChangeRequestDataApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ChangeRequestData`."""
  changeRequestDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChangeRequestData`."""
    orderBy: [ChangeRequestDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeRequestDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeRequestDataFilter
  ): ChangeRequestDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ChangeRequestData`.
"""
type ApplicationCcbcUsersByChangeRequestDataApplicationIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ChangeRequestData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByChangeRequestDataApplicationIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ChangeRequestData`.
"""
type ApplicationCcbcUsersByChangeRequestDataApplicationIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ChangeRequestData`."""
  changeRequestDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChangeRequestData`."""
    orderBy: [ChangeRequestDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeRequestDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeRequestDataFilter
  ): ChangeRequestDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationCommunityProgressReportData`.
"""
type ApplicationCcbcUsersByApplicationCommunityProgressReportDataApplicationIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationCommunityProgressReportData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationCommunityProgressReportDataApplicationIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationCommunityProgressReportData`.
"""
type ApplicationCcbcUsersByApplicationCommunityProgressReportDataApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationCommunityProgressReportData`.
  """
  applicationCommunityProgressReportDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    The method to use when ordering `ApplicationCommunityProgressReportData`.
    """
    orderBy: [ApplicationCommunityProgressReportDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityProgressReportDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityProgressReportDataFilter
  ): ApplicationCommunityProgressReportDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationCommunityProgressReportData`.
"""
type ApplicationCcbcUsersByApplicationCommunityProgressReportDataApplicationIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationCommunityProgressReportData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationCommunityProgressReportDataApplicationIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationCommunityProgressReportData`.
"""
type ApplicationCcbcUsersByApplicationCommunityProgressReportDataApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationCommunityProgressReportData`.
  """
  applicationCommunityProgressReportDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    The method to use when ordering `ApplicationCommunityProgressReportData`.
    """
    orderBy: [ApplicationCommunityProgressReportDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityProgressReportDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityProgressReportDataFilter
  ): ApplicationCommunityProgressReportDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationCommunityProgressReportData`.
"""
type ApplicationCcbcUsersByApplicationCommunityProgressReportDataApplicationIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationCommunityProgressReportData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationCommunityProgressReportDataApplicationIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationCommunityProgressReportData`.
"""
type ApplicationCcbcUsersByApplicationCommunityProgressReportDataApplicationIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationCommunityProgressReportData`.
  """
  applicationCommunityProgressReportDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    The method to use when ordering `ApplicationCommunityProgressReportData`.
    """
    orderBy: [ApplicationCommunityProgressReportDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityProgressReportDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityProgressReportDataFilter
  ): ApplicationCommunityProgressReportDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationCommunityReportExcelData`.
"""
type ApplicationCcbcUsersByApplicationCommunityReportExcelDataApplicationIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationCommunityReportExcelData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationCommunityReportExcelDataApplicationIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationCommunityReportExcelData`.
"""
type ApplicationCcbcUsersByApplicationCommunityReportExcelDataApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationCommunityReportExcelData`.
  """
  applicationCommunityReportExcelDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationCommunityReportExcelData`."""
    orderBy: [ApplicationCommunityReportExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityReportExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityReportExcelDataFilter
  ): ApplicationCommunityReportExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationCommunityReportExcelData`.
"""
type ApplicationCcbcUsersByApplicationCommunityReportExcelDataApplicationIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationCommunityReportExcelData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationCommunityReportExcelDataApplicationIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationCommunityReportExcelData`.
"""
type ApplicationCcbcUsersByApplicationCommunityReportExcelDataApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationCommunityReportExcelData`.
  """
  applicationCommunityReportExcelDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationCommunityReportExcelData`."""
    orderBy: [ApplicationCommunityReportExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityReportExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityReportExcelDataFilter
  ): ApplicationCommunityReportExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationCommunityReportExcelData`.
"""
type ApplicationCcbcUsersByApplicationCommunityReportExcelDataApplicationIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationCommunityReportExcelData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationCommunityReportExcelDataApplicationIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationCommunityReportExcelData`.
"""
type ApplicationCcbcUsersByApplicationCommunityReportExcelDataApplicationIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationCommunityReportExcelData`.
  """
  applicationCommunityReportExcelDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationCommunityReportExcelData`."""
    orderBy: [ApplicationCommunityReportExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityReportExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityReportExcelDataFilter
  ): ApplicationCommunityReportExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationClaimsData`.
"""
type ApplicationCcbcUsersByApplicationClaimsDataApplicationIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationClaimsData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationClaimsDataApplicationIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationClaimsData`.
"""
type ApplicationCcbcUsersByApplicationClaimsDataApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationClaimsData`."""
  applicationClaimsDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsData`."""
    orderBy: [ApplicationClaimsDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsDataFilter
  ): ApplicationClaimsDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationClaimsData`.
"""
type ApplicationCcbcUsersByApplicationClaimsDataApplicationIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationClaimsData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationClaimsDataApplicationIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationClaimsData`.
"""
type ApplicationCcbcUsersByApplicationClaimsDataApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationClaimsData`."""
  applicationClaimsDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsData`."""
    orderBy: [ApplicationClaimsDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsDataFilter
  ): ApplicationClaimsDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationClaimsData`.
"""
type ApplicationCcbcUsersByApplicationClaimsDataApplicationIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationClaimsData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationClaimsDataApplicationIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationClaimsData`.
"""
type ApplicationCcbcUsersByApplicationClaimsDataApplicationIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationClaimsData`."""
  applicationClaimsDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsData`."""
    orderBy: [ApplicationClaimsDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsDataFilter
  ): ApplicationClaimsDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationClaimsExcelData`.
"""
type ApplicationCcbcUsersByApplicationClaimsExcelDataApplicationIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationClaimsExcelData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationClaimsExcelDataApplicationIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationClaimsExcelData`.
"""
type ApplicationCcbcUsersByApplicationClaimsExcelDataApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationClaimsExcelData`.
  """
  applicationClaimsExcelDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsExcelData`."""
    orderBy: [ApplicationClaimsExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsExcelDataFilter
  ): ApplicationClaimsExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationClaimsExcelData`.
"""
type ApplicationCcbcUsersByApplicationClaimsExcelDataApplicationIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationClaimsExcelData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationClaimsExcelDataApplicationIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationClaimsExcelData`.
"""
type ApplicationCcbcUsersByApplicationClaimsExcelDataApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationClaimsExcelData`.
  """
  applicationClaimsExcelDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsExcelData`."""
    orderBy: [ApplicationClaimsExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsExcelDataFilter
  ): ApplicationClaimsExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationClaimsExcelData`.
"""
type ApplicationCcbcUsersByApplicationClaimsExcelDataApplicationIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationClaimsExcelData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationClaimsExcelDataApplicationIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationClaimsExcelData`.
"""
type ApplicationCcbcUsersByApplicationClaimsExcelDataApplicationIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationClaimsExcelData`.
  """
  applicationClaimsExcelDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsExcelData`."""
    orderBy: [ApplicationClaimsExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsExcelDataFilter
  ): ApplicationClaimsExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationMilestoneData`.
"""
type ApplicationCcbcUsersByApplicationMilestoneDataApplicationIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationMilestoneData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationMilestoneDataApplicationIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationMilestoneData`.
"""
type ApplicationCcbcUsersByApplicationMilestoneDataApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationMilestoneData`.
  """
  applicationMilestoneDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneData`."""
    orderBy: [ApplicationMilestoneDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneDataFilter
  ): ApplicationMilestoneDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationMilestoneData`.
"""
type ApplicationCcbcUsersByApplicationMilestoneDataApplicationIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationMilestoneData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationMilestoneDataApplicationIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationMilestoneData`.
"""
type ApplicationCcbcUsersByApplicationMilestoneDataApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationMilestoneData`.
  """
  applicationMilestoneDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneData`."""
    orderBy: [ApplicationMilestoneDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneDataFilter
  ): ApplicationMilestoneDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationMilestoneData`.
"""
type ApplicationCcbcUsersByApplicationMilestoneDataApplicationIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationMilestoneData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationMilestoneDataApplicationIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationMilestoneData`.
"""
type ApplicationCcbcUsersByApplicationMilestoneDataApplicationIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationMilestoneData`.
  """
  applicationMilestoneDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneData`."""
    orderBy: [ApplicationMilestoneDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneDataFilter
  ): ApplicationMilestoneDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationMilestoneExcelData`.
"""
type ApplicationCcbcUsersByApplicationMilestoneExcelDataApplicationIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationMilestoneExcelData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationMilestoneExcelDataApplicationIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationMilestoneExcelData`.
"""
type ApplicationCcbcUsersByApplicationMilestoneExcelDataApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationMilestoneExcelData`.
  """
  applicationMilestoneExcelDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneExcelData`."""
    orderBy: [ApplicationMilestoneExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneExcelDataFilter
  ): ApplicationMilestoneExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationMilestoneExcelData`.
"""
type ApplicationCcbcUsersByApplicationMilestoneExcelDataApplicationIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationMilestoneExcelData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationMilestoneExcelDataApplicationIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationMilestoneExcelData`.
"""
type ApplicationCcbcUsersByApplicationMilestoneExcelDataApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationMilestoneExcelData`.
  """
  applicationMilestoneExcelDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneExcelData`."""
    orderBy: [ApplicationMilestoneExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneExcelDataFilter
  ): ApplicationMilestoneExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationMilestoneExcelData`.
"""
type ApplicationCcbcUsersByApplicationMilestoneExcelDataApplicationIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationMilestoneExcelData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationMilestoneExcelDataApplicationIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationMilestoneExcelData`.
"""
type ApplicationCcbcUsersByApplicationMilestoneExcelDataApplicationIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationMilestoneExcelData`.
  """
  applicationMilestoneExcelDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneExcelData`."""
    orderBy: [ApplicationMilestoneExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneExcelDataFilter
  ): ApplicationMilestoneExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationInternalDescription`.
"""
type ApplicationCcbcUsersByApplicationInternalDescriptionApplicationIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationInternalDescription`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationInternalDescriptionApplicationIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationInternalDescription`.
"""
type ApplicationCcbcUsersByApplicationInternalDescriptionApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationInternalDescription`.
  """
  applicationInternalDescriptionsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationInternalDescription`."""
    orderBy: [ApplicationInternalDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationInternalDescriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationInternalDescriptionFilter
  ): ApplicationInternalDescriptionsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationInternalDescription`.
"""
type ApplicationCcbcUsersByApplicationInternalDescriptionApplicationIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationInternalDescription`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationInternalDescriptionApplicationIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationInternalDescription`.
"""
type ApplicationCcbcUsersByApplicationInternalDescriptionApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationInternalDescription`.
  """
  applicationInternalDescriptionsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationInternalDescription`."""
    orderBy: [ApplicationInternalDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationInternalDescriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationInternalDescriptionFilter
  ): ApplicationInternalDescriptionsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationInternalDescription`.
"""
type ApplicationCcbcUsersByApplicationInternalDescriptionApplicationIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationInternalDescription`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationInternalDescriptionApplicationIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationInternalDescription`.
"""
type ApplicationCcbcUsersByApplicationInternalDescriptionApplicationIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationInternalDescription`.
  """
  applicationInternalDescriptionsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationInternalDescription`."""
    orderBy: [ApplicationInternalDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationInternalDescriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationInternalDescriptionFilter
  ): ApplicationInternalDescriptionsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationProjectType`.
"""
type ApplicationCcbcUsersByApplicationProjectTypeApplicationIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationProjectType`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationProjectTypeApplicationIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationProjectType`.
"""
type ApplicationCcbcUsersByApplicationProjectTypeApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationProjectType`.
  """
  applicationProjectTypesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationProjectType`."""
    orderBy: [ApplicationProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationProjectTypeFilter
  ): ApplicationProjectTypesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationProjectType`.
"""
type ApplicationCcbcUsersByApplicationProjectTypeApplicationIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationProjectType`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationProjectTypeApplicationIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationProjectType`.
"""
type ApplicationCcbcUsersByApplicationProjectTypeApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationProjectType`.
  """
  applicationProjectTypesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationProjectType`."""
    orderBy: [ApplicationProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationProjectTypeFilter
  ): ApplicationProjectTypesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationProjectType`.
"""
type ApplicationCcbcUsersByApplicationProjectTypeApplicationIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationProjectType`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationProjectTypeApplicationIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationProjectType`.
"""
type ApplicationCcbcUsersByApplicationProjectTypeApplicationIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationProjectType`.
  """
  applicationProjectTypesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationProjectType`."""
    orderBy: [ApplicationProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationProjectTypeFilter
  ): ApplicationProjectTypesConnection!
}

"""
A connection to a list of `EmailRecord` values, with data from `Notification`.
"""
type ApplicationEmailRecordsByNotificationApplicationIdAndEmailRecordIdManyToManyConnection {
  """A list of `EmailRecord` objects."""
  nodes: [EmailRecord]!

  """
  A list of edges which contains the `EmailRecord`, info from the `Notification`, and the cursor to aid in pagination.
  """
  edges: [ApplicationEmailRecordsByNotificationApplicationIdAndEmailRecordIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EmailRecord` you could get from the connection."""
  totalCount: Int!
}

"""A `EmailRecord` edge in the connection, with data from `Notification`."""
type ApplicationEmailRecordsByNotificationApplicationIdAndEmailRecordIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EmailRecord` at the end of the edge."""
  node: EmailRecord

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByEmailRecordId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!
}

"""Methods to use when ordering `EmailRecord`."""
enum EmailRecordsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TO_EMAIL_ASC
  TO_EMAIL_DESC
  CC_EMAIL_ASC
  CC_EMAIL_DESC
  SUBJECT_ASC
  SUBJECT_DESC
  BODY_ASC
  BODY_DESC
  MESSAGE_ID_ASC
  MESSAGE_ID_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `EmailRecord` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EmailRecordCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `toEmail` field."""
  toEmail: String

  """Checks for equality with the object’s `ccEmail` field."""
  ccEmail: String

  """Checks for equality with the object’s `subject` field."""
  subject: String

  """Checks for equality with the object’s `body` field."""
  body: String

  """Checks for equality with the object’s `messageId` field."""
  messageId: String

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""
A connection to a list of `CcbcUser` values, with data from `Notification`.
"""
type ApplicationCcbcUsersByNotificationApplicationIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Notification`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByNotificationApplicationIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Notification`."""
type ApplicationCcbcUsersByNotificationApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Notification`.
"""
type ApplicationCcbcUsersByNotificationApplicationIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Notification`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByNotificationApplicationIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Notification`."""
type ApplicationCcbcUsersByNotificationApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Notification`.
"""
type ApplicationCcbcUsersByNotificationApplicationIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Notification`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByNotificationApplicationIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Notification`."""
type ApplicationCcbcUsersByNotificationApplicationIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationPendingChangeRequest`.
"""
type ApplicationCcbcUsersByApplicationPendingChangeRequestApplicationIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationPendingChangeRequest`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationPendingChangeRequestApplicationIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationPendingChangeRequest`.
"""
type ApplicationCcbcUsersByApplicationPendingChangeRequestApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationPendingChangeRequest`.
  """
  applicationPendingChangeRequestsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPendingChangeRequest`."""
    orderBy: [ApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPendingChangeRequestFilter
  ): ApplicationPendingChangeRequestsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationPendingChangeRequest`.
"""
type ApplicationCcbcUsersByApplicationPendingChangeRequestApplicationIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationPendingChangeRequest`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationPendingChangeRequestApplicationIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationPendingChangeRequest`.
"""
type ApplicationCcbcUsersByApplicationPendingChangeRequestApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationPendingChangeRequest`.
  """
  applicationPendingChangeRequestsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPendingChangeRequest`."""
    orderBy: [ApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPendingChangeRequestFilter
  ): ApplicationPendingChangeRequestsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationPendingChangeRequest`.
"""
type ApplicationCcbcUsersByApplicationPendingChangeRequestApplicationIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationPendingChangeRequest`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationPendingChangeRequestApplicationIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationPendingChangeRequest`.
"""
type ApplicationCcbcUsersByApplicationPendingChangeRequestApplicationIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationPendingChangeRequest`.
  """
  applicationPendingChangeRequestsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPendingChangeRequest`."""
    orderBy: [ApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPendingChangeRequestFilter
  ): ApplicationPendingChangeRequestsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnnounced`.
"""
type ApplicationCcbcUsersByApplicationAnnouncedApplicationIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnnounced`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationAnnouncedApplicationIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnnounced`.
"""
type ApplicationCcbcUsersByApplicationAnnouncedApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationAnnounced`."""
  applicationAnnouncedsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnounced`."""
    orderBy: [ApplicationAnnouncedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncedCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncedFilter
  ): ApplicationAnnouncedsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnnounced`.
"""
type ApplicationCcbcUsersByApplicationAnnouncedApplicationIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnnounced`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationAnnouncedApplicationIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnnounced`.
"""
type ApplicationCcbcUsersByApplicationAnnouncedApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationAnnounced`."""
  applicationAnnouncedsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnounced`."""
    orderBy: [ApplicationAnnouncedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncedCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncedFilter
  ): ApplicationAnnouncedsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnnounced`.
"""
type ApplicationCcbcUsersByApplicationAnnouncedApplicationIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnnounced`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationAnnouncedApplicationIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnnounced`.
"""
type ApplicationCcbcUsersByApplicationAnnouncedApplicationIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationAnnounced`."""
  applicationAnnouncedsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnounced`."""
    orderBy: [ApplicationAnnouncedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncedCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncedFilter
  ): ApplicationAnnouncedsConnection!
}

"""A `Application` edge in the connection."""
type ApplicationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application
}

"""
A connection to a list of `CcbcUser` values, with data from `Application`.
"""
type IntakeCcbcUsersByApplicationIntakeIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Application`, and the cursor to aid in pagination.
  """
  edges: [IntakeCcbcUsersByApplicationIntakeIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Application`."""
type IntakeCcbcUsersByApplicationIntakeIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Application`."""
  applicationsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): ApplicationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Application`.
"""
type IntakeCcbcUsersByApplicationIntakeIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Application`, and the cursor to aid in pagination.
  """
  edges: [IntakeCcbcUsersByApplicationIntakeIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Application`."""
type IntakeCcbcUsersByApplicationIntakeIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Application`."""
  applicationsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): ApplicationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Application`.
"""
type IntakeCcbcUsersByApplicationIntakeIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Application`, and the cursor to aid in pagination.
  """
  edges: [IntakeCcbcUsersByApplicationIntakeIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Application`."""
type IntakeCcbcUsersByApplicationIntakeIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Application`."""
  applicationsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): ApplicationsConnection!
}

"""A `Intake` edge in the connection."""
type IntakesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Intake` at the end of the edge."""
  node: Intake
}

"""A connection to a list of `RecordVersion` values."""
type RecordVersionsConnection {
  """A list of `RecordVersion` objects."""
  nodes: [RecordVersion]!

  """
  A list of edges which contains the `RecordVersion` and cursor to aid in pagination.
  """
  edges: [RecordVersionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RecordVersion` you could get from the connection."""
  totalCount: Int!
}

"""
Table for tracking history records on tables that auditing is enabled on
"""
type RecordVersion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Primary key and unique identifier"""
  rowId: BigInt!

  """The id of the record the history record is associated with"""
  recordId: UUID

  """
  The id of the previous version of the record the history record is associated with
  """
  oldRecordId: UUID

  """The operation performed on the record (created, updated, deleted)"""
  op: Operation!

  """The timestamp of the history record"""
  ts: Datetime!

  """The oid of the table the record is associated with"""
  tableOid: BigFloat!

  """The schema of the table the record is associated with"""
  tableSchema: String!

  """The name of the table the record is associated with"""
  tableName: String!

  """The user that created the record"""
  createdBy: Int

  """The timestamp of when the record was created"""
  createdAt: Datetime!

  """The record in JSON format"""
  record: JSON

  """The previous version of the record in JSON format"""
  oldRecord: JSON

  """Reads a single `CcbcUser` that is related to this `RecordVersion`."""
  ccbcUserByCreatedBy: CcbcUser
}

"""A `RecordVersion` edge in the connection."""
type RecordVersionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RecordVersion` at the end of the edge."""
  node: RecordVersion
}

"""Methods to use when ordering `RecordVersion`."""
enum RecordVersionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  RECORD_ID_ASC
  RECORD_ID_DESC
  OLD_RECORD_ID_ASC
  OLD_RECORD_ID_DESC
  OP_ASC
  OP_DESC
  TS_ASC
  TS_DESC
  TABLE_OID_ASC
  TABLE_OID_DESC
  TABLE_SCHEMA_ASC
  TABLE_SCHEMA_DESC
  TABLE_NAME_ASC
  TABLE_NAME_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  RECORD_ASC
  RECORD_DESC
  OLD_RECORD_ASC
  OLD_RECORD_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `RecordVersion` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RecordVersionCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: BigInt

  """Checks for equality with the object’s `recordId` field."""
  recordId: UUID

  """Checks for equality with the object’s `oldRecordId` field."""
  oldRecordId: UUID

  """Checks for equality with the object’s `op` field."""
  op: Operation

  """Checks for equality with the object’s `ts` field."""
  ts: Datetime

  """Checks for equality with the object’s `tableOid` field."""
  tableOid: BigFloat

  """Checks for equality with the object’s `tableSchema` field."""
  tableSchema: String

  """Checks for equality with the object’s `tableName` field."""
  tableName: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `record` field."""
  record: JSON

  """Checks for equality with the object’s `oldRecord` field."""
  oldRecord: JSON
}

"""A connection to a list of `GisData` values."""
type GisDataConnection {
  """A list of `GisData` objects."""
  nodes: [GisData]!

  """
  A list of edges which contains the `GisData` and cursor to aid in pagination.
  """
  edges: [GisDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GisData` you could get from the connection."""
  totalCount: Int!
}

"""A `GisData` edge in the connection."""
type GisDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GisData` at the end of the edge."""
  node: GisData
}

"""A connection to a list of `CbcProject` values."""
type CbcProjectsConnection {
  """A list of `CbcProject` objects."""
  nodes: [CbcProject]!

  """
  A list of edges which contains the `CbcProject` and cursor to aid in pagination.
  """
  edges: [CbcProjectsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CbcProject` you could get from the connection."""
  totalCount: Int!
}

"""Table containing the data imported from the CBC projects excel file"""
type CbcProject implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the row"""
  rowId: Int!

  """The data imported from the excel for that cbc project"""
  jsonData: JSON!

  """The timestamp of the last time the data was updated from sharepoint"""
  sharepointTimestamp: Datetime

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `CcbcUser` that is related to this `CbcProject`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CbcProject`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CbcProject`."""
  ccbcUserByArchivedBy: CcbcUser
}

"""A `CbcProject` edge in the connection."""
type CbcProjectsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CbcProject` at the end of the edge."""
  node: CbcProject
}

"""Methods to use when ordering `CbcProject`."""
enum CbcProjectsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  SHAREPOINT_TIMESTAMP_ASC
  SHAREPOINT_TIMESTAMP_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CbcProject` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CbcProjectCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `sharepointTimestamp` field."""
  sharepointTimestamp: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A connection to a list of `EmailRecord` values."""
type EmailRecordsConnection {
  """A list of `EmailRecord` objects."""
  nodes: [EmailRecord]!

  """
  A list of edges which contains the `EmailRecord` and cursor to aid in pagination.
  """
  edges: [EmailRecordsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EmailRecord` you could get from the connection."""
  totalCount: Int!
}

"""A `EmailRecord` edge in the connection."""
type EmailRecordsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EmailRecord` at the end of the edge."""
  node: EmailRecord
}

"""A connection to a list of `Cbc` values."""
type CbcsConnection {
  """A list of `Cbc` objects."""
  nodes: [Cbc]!

  """
  A list of edges which contains the `Cbc` and cursor to aid in pagination.
  """
  edges: [CbcsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Cbc` you could get from the connection."""
  totalCount: Int!
}

"""
Table containing the data imported from the CBC projects excel file, by rows
"""
type Cbc implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the row"""
  rowId: Int!

  """The project number, unique for each project"""
  projectNumber: Int!

  """The timestamp of the last time the data was updated from sharepoint"""
  sharepointTimestamp: Datetime

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `CcbcUser` that is related to this `Cbc`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Cbc`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Cbc`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByCbcId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CbcDataConnection!

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByProjectNumber(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CbcDataConnection!

  """
  Reads and enables pagination through a set of `CbcApplicationPendingChangeRequest`.
  """
  cbcApplicationPendingChangeRequestsByCbcId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcApplicationPendingChangeRequest`."""
    orderBy: [CbcApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcApplicationPendingChangeRequestFilter
  ): CbcApplicationPendingChangeRequestsConnection!

  """Reads and enables pagination through a set of `CbcProjectCommunity`."""
  cbcProjectCommunitiesByCbcId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCommunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectCommunityFilter
  ): CbcProjectCommunitiesConnection!

  """Reads and enables pagination through a set of `Cbc`."""
  cbcsByCbcDataCbcIdAndProjectNumber(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcFilter
  ): CbcCbcsByCbcDataCbcIdAndProjectNumberManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcDataCbcIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CbcCcbcUsersByCbcDataCbcIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcDataCbcIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CbcCcbcUsersByCbcDataCbcIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcDataCbcIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CbcCcbcUsersByCbcDataCbcIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Cbc`."""
  cbcsByCbcDataProjectNumberAndCbcId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcFilter
  ): CbcCbcsByCbcDataProjectNumberAndCbcIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcDataProjectNumberAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CbcCcbcUsersByCbcDataProjectNumberAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcDataProjectNumberAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CbcCcbcUsersByCbcDataProjectNumberAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcDataProjectNumberAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CbcCcbcUsersByCbcDataProjectNumberAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcApplicationPendingChangeRequestCbcIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CbcCcbcUsersByCbcApplicationPendingChangeRequestCbcIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcApplicationPendingChangeRequestCbcIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CbcCcbcUsersByCbcApplicationPendingChangeRequestCbcIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcApplicationPendingChangeRequestCbcIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CbcCcbcUsersByCbcApplicationPendingChangeRequestCbcIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CommunitiesSourceData`."""
  communitiesSourceDataByCbcProjectCommunityCbcIdAndCommunitiesSourceDataId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CommunitiesSourceData`."""
    orderBy: [CommunitiesSourceDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommunitiesSourceDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommunitiesSourceDataFilter
  ): CbcCommunitiesSourceDataByCbcProjectCommunityCbcIdAndCommunitiesSourceDataIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcProjectCommunityCbcIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CbcCcbcUsersByCbcProjectCommunityCbcIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcProjectCommunityCbcIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CbcCcbcUsersByCbcProjectCommunityCbcIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcProjectCommunityCbcIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CbcCcbcUsersByCbcProjectCommunityCbcIdAndArchivedByManyToManyConnection!
}

"""A connection to a list of `CbcData` values."""
type CbcDataConnection {
  """A list of `CbcData` objects."""
  nodes: [CbcData]!

  """
  A list of edges which contains the `CbcData` and cursor to aid in pagination.
  """
  edges: [CbcDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CbcData` you could get from the connection."""
  totalCount: Int!
}

"""Table containing the json data for cbc applications"""
type CbcData implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the cbc_data"""
  rowId: Int!

  """ID of the cbc application this cbc_data belongs to"""
  cbcId: Int

  """Column containing the project number the cbc application is from"""
  projectNumber: Int
  jsonData: JSON!
  sharepointTimestamp: Datetime

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `Cbc` that is related to this `CbcData`."""
  cbcByCbcId: Cbc

  """Reads a single `Cbc` that is related to this `CbcData`."""
  cbcByProjectNumber: Cbc

  """Reads a single `CcbcUser` that is related to this `CbcData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CbcData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CbcData`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads and enables pagination through a set of `CbcDataChangeReason`."""
  cbcDataChangeReasonsByCbcDataId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcDataChangeReason`."""
    orderBy: [CbcDataChangeReasonsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataChangeReasonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataChangeReasonFilter
  ): CbcDataChangeReasonsConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcDataChangeReasonCbcDataIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CbcDataCcbcUsersByCbcDataChangeReasonCbcDataIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcDataChangeReasonCbcDataIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CbcDataCcbcUsersByCbcDataChangeReasonCbcDataIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcDataChangeReasonCbcDataIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CbcDataCcbcUsersByCbcDataChangeReasonCbcDataIdAndArchivedByManyToManyConnection!
}

"""A connection to a list of `CbcDataChangeReason` values."""
type CbcDataChangeReasonsConnection {
  """A list of `CbcDataChangeReason` objects."""
  nodes: [CbcDataChangeReason]!

  """
  A list of edges which contains the `CbcDataChangeReason` and cursor to aid in pagination.
  """
  edges: [CbcDataChangeReasonsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CbcDataChangeReason` you could get from the connection.
  """
  totalCount: Int!
}

"""Table containing the reasons for changes to cbc_data"""
type CbcDataChangeReason implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the cbc_data_change_reason"""
  rowId: Int!

  """ID of the cbc_data this cbc_data_change_reason belongs to"""
  cbcDataId: Int!

  """The reason for the change to the cbc_data"""
  description: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """
  Reads a single `CbcData` that is related to this `CbcDataChangeReason`.
  """
  cbcDataByCbcDataId: CbcData

  """
  Reads a single `CcbcUser` that is related to this `CbcDataChangeReason`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CbcDataChangeReason`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CbcDataChangeReason`.
  """
  ccbcUserByArchivedBy: CcbcUser
}

"""A `CbcDataChangeReason` edge in the connection."""
type CbcDataChangeReasonsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CbcDataChangeReason` at the end of the edge."""
  node: CbcDataChangeReason
}

"""Methods to use when ordering `CbcDataChangeReason`."""
enum CbcDataChangeReasonsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CBC_DATA_ID_ASC
  CBC_DATA_ID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CbcDataChangeReason` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input CbcDataChangeReasonCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `cbcDataId` field."""
  cbcDataId: Int

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcDataChangeReason`.
"""
type CbcDataCcbcUsersByCbcDataChangeReasonCbcDataIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcDataChangeReason`, and the cursor to aid in pagination.
  """
  edges: [CbcDataCcbcUsersByCbcDataChangeReasonCbcDataIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcDataChangeReason`.
"""
type CbcDataCcbcUsersByCbcDataChangeReasonCbcDataIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcDataChangeReason`."""
  cbcDataChangeReasonsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcDataChangeReason`."""
    orderBy: [CbcDataChangeReasonsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataChangeReasonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataChangeReasonFilter
  ): CbcDataChangeReasonsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcDataChangeReason`.
"""
type CbcDataCcbcUsersByCbcDataChangeReasonCbcDataIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcDataChangeReason`, and the cursor to aid in pagination.
  """
  edges: [CbcDataCcbcUsersByCbcDataChangeReasonCbcDataIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcDataChangeReason`.
"""
type CbcDataCcbcUsersByCbcDataChangeReasonCbcDataIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcDataChangeReason`."""
  cbcDataChangeReasonsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcDataChangeReason`."""
    orderBy: [CbcDataChangeReasonsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataChangeReasonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataChangeReasonFilter
  ): CbcDataChangeReasonsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcDataChangeReason`.
"""
type CbcDataCcbcUsersByCbcDataChangeReasonCbcDataIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcDataChangeReason`, and the cursor to aid in pagination.
  """
  edges: [CbcDataCcbcUsersByCbcDataChangeReasonCbcDataIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcDataChangeReason`.
"""
type CbcDataCcbcUsersByCbcDataChangeReasonCbcDataIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcDataChangeReason`."""
  cbcDataChangeReasonsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcDataChangeReason`."""
    orderBy: [CbcDataChangeReasonsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataChangeReasonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataChangeReasonFilter
  ): CbcDataChangeReasonsConnection!
}

"""A `CbcData` edge in the connection."""
type CbcDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CbcData` at the end of the edge."""
  node: CbcData
}

"""Methods to use when ordering `CbcData`."""
enum CbcDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CBC_ID_ASC
  CBC_ID_DESC
  PROJECT_NUMBER_ASC
  PROJECT_NUMBER_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  SHAREPOINT_TIMESTAMP_ASC
  SHAREPOINT_TIMESTAMP_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CbcData` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CbcDataCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `cbcId` field."""
  cbcId: Int

  """Checks for equality with the object’s `projectNumber` field."""
  projectNumber: Int

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `sharepointTimestamp` field."""
  sharepointTimestamp: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A connection to a list of `CbcApplicationPendingChangeRequest` values."""
type CbcApplicationPendingChangeRequestsConnection {
  """A list of `CbcApplicationPendingChangeRequest` objects."""
  nodes: [CbcApplicationPendingChangeRequest]!

  """
  A list of edges which contains the `CbcApplicationPendingChangeRequest` and cursor to aid in pagination.
  """
  edges: [CbcApplicationPendingChangeRequestsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CbcApplicationPendingChangeRequest` you could get from the connection.
  """
  totalCount: Int!
}

"""Table containing the pending change request details of the application"""
type CbcApplicationPendingChangeRequest implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the cbc_application_pending_change_request"""
  rowId: Int!

  """
  ID of the cbc application this cbc_application_pending_change_request belongs to
  """
  cbcId: Int

  """Column defining if the change request pending or not"""
  isPending: Boolean

  """
  Column containing the comment for the change request or completion of the change request
  """
  comment: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """
  Reads a single `Cbc` that is related to this `CbcApplicationPendingChangeRequest`.
  """
  cbcByCbcId: Cbc

  """
  Reads a single `CcbcUser` that is related to this `CbcApplicationPendingChangeRequest`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CbcApplicationPendingChangeRequest`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CbcApplicationPendingChangeRequest`.
  """
  ccbcUserByArchivedBy: CcbcUser
}

"""A `CbcApplicationPendingChangeRequest` edge in the connection."""
type CbcApplicationPendingChangeRequestsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CbcApplicationPendingChangeRequest` at the end of the edge."""
  node: CbcApplicationPendingChangeRequest
}

"""Methods to use when ordering `CbcApplicationPendingChangeRequest`."""
enum CbcApplicationPendingChangeRequestsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CBC_ID_ASC
  CBC_ID_DESC
  IS_PENDING_ASC
  IS_PENDING_DESC
  COMMENT_ASC
  COMMENT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CbcApplicationPendingChangeRequest` object
types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CbcApplicationPendingChangeRequestCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `cbcId` field."""
  cbcId: Int

  """Checks for equality with the object’s `isPending` field."""
  isPending: Boolean

  """Checks for equality with the object’s `comment` field."""
  comment: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A connection to a list of `CbcProjectCommunity` values."""
type CbcProjectCommunitiesConnection {
  """A list of `CbcProjectCommunity` objects."""
  nodes: [CbcProjectCommunity]!

  """
  A list of edges which contains the `CbcProjectCommunity` and cursor to aid in pagination.
  """
  edges: [CbcProjectCommunitiesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CbcProjectCommunity` you could get from the connection.
  """
  totalCount: Int!
}

"""Table containing the communities data for a CBC project"""
type CbcProjectCommunity implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the row"""
  rowId: Int!

  """The cbc id of the record"""
  cbcId: Int

  """The reference to the communities source data id"""
  communitiesSourceDataId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `Cbc` that is related to this `CbcProjectCommunity`."""
  cbcByCbcId: Cbc

  """
  Reads a single `CommunitiesSourceData` that is related to this `CbcProjectCommunity`.
  """
  communitiesSourceDataByCommunitiesSourceDataId: CommunitiesSourceData

  """
  Reads a single `CcbcUser` that is related to this `CbcProjectCommunity`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CbcProjectCommunity`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CbcProjectCommunity`.
  """
  ccbcUserByArchivedBy: CcbcUser
}

"""
Table containing the communities source data imported from CBC projects excel file
"""
type CommunitiesSourceData implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the row"""
  rowId: Int!

  """The unique Geographic Name Id"""
  geographicNameId: Int!

  """The Geographic Name"""
  bcGeographicName: String!

  """The type of the geograhic region"""
  geographicType: String

  """The regional district of the geograhic region"""
  regionalDistrict: String

  """The economic region of the geograhic region"""
  economicRegion: String

  """The latitude value of the geograhic region"""
  latitude: Float

  """The longitude value of the geograhic region"""
  longitude: Float

  """map url of the geograhic region for verification"""
  mapLink: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """
  Reads a single `CcbcUser` that is related to this `CommunitiesSourceData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CommunitiesSourceData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CommunitiesSourceData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """Reads and enables pagination through a set of `CbcProjectCommunity`."""
  cbcProjectCommunitiesByCommunitiesSourceDataId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCommunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectCommunityFilter
  ): CbcProjectCommunitiesConnection!

  """Reads and enables pagination through a set of `Cbc`."""
  cbcsByCbcProjectCommunityCommunitiesSourceDataIdAndCbcId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcFilter
  ): CommunitiesSourceDataCbcsByCbcProjectCommunityCommunitiesSourceDataIdAndCbcIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcProjectCommunityCommunitiesSourceDataIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CommunitiesSourceDataCcbcUsersByCbcProjectCommunityCommunitiesSourceDataIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcProjectCommunityCommunitiesSourceDataIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CommunitiesSourceDataCcbcUsersByCbcProjectCommunityCommunitiesSourceDataIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCbcProjectCommunityCommunitiesSourceDataIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CommunitiesSourceDataCcbcUsersByCbcProjectCommunityCommunitiesSourceDataIdAndArchivedByManyToManyConnection!
}

"""Methods to use when ordering `CbcProjectCommunity`."""
enum CbcProjectCommunitiesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CBC_ID_ASC
  CBC_ID_DESC
  COMMUNITIES_SOURCE_DATA_ID_ASC
  COMMUNITIES_SOURCE_DATA_ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CbcProjectCommunity` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input CbcProjectCommunityCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `cbcId` field."""
  cbcId: Int

  """Checks for equality with the object’s `communitiesSourceDataId` field."""
  communitiesSourceDataId: Int

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""
A connection to a list of `Cbc` values, with data from `CbcProjectCommunity`.
"""
type CommunitiesSourceDataCbcsByCbcProjectCommunityCommunitiesSourceDataIdAndCbcIdManyToManyConnection {
  """A list of `Cbc` objects."""
  nodes: [Cbc]!

  """
  A list of edges which contains the `Cbc`, info from the `CbcProjectCommunity`, and the cursor to aid in pagination.
  """
  edges: [CommunitiesSourceDataCbcsByCbcProjectCommunityCommunitiesSourceDataIdAndCbcIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Cbc` you could get from the connection."""
  totalCount: Int!
}

"""A `Cbc` edge in the connection, with data from `CbcProjectCommunity`."""
type CommunitiesSourceDataCbcsByCbcProjectCommunityCommunitiesSourceDataIdAndCbcIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Cbc` at the end of the edge."""
  node: Cbc

  """Reads and enables pagination through a set of `CbcProjectCommunity`."""
  cbcProjectCommunitiesByCbcId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCommunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectCommunityFilter
  ): CbcProjectCommunitiesConnection!
}

"""Methods to use when ordering `Cbc`."""
enum CbcsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PROJECT_NUMBER_ASC
  PROJECT_NUMBER_DESC
  SHAREPOINT_TIMESTAMP_ASC
  SHAREPOINT_TIMESTAMP_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Cbc` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CbcCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `projectNumber` field."""
  projectNumber: Int

  """Checks for equality with the object’s `sharepointTimestamp` field."""
  sharepointTimestamp: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcProjectCommunity`.
"""
type CommunitiesSourceDataCcbcUsersByCbcProjectCommunityCommunitiesSourceDataIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcProjectCommunity`, and the cursor to aid in pagination.
  """
  edges: [CommunitiesSourceDataCcbcUsersByCbcProjectCommunityCommunitiesSourceDataIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcProjectCommunity`.
"""
type CommunitiesSourceDataCcbcUsersByCbcProjectCommunityCommunitiesSourceDataIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcProjectCommunity`."""
  cbcProjectCommunitiesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCommunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectCommunityFilter
  ): CbcProjectCommunitiesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcProjectCommunity`.
"""
type CommunitiesSourceDataCcbcUsersByCbcProjectCommunityCommunitiesSourceDataIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcProjectCommunity`, and the cursor to aid in pagination.
  """
  edges: [CommunitiesSourceDataCcbcUsersByCbcProjectCommunityCommunitiesSourceDataIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcProjectCommunity`.
"""
type CommunitiesSourceDataCcbcUsersByCbcProjectCommunityCommunitiesSourceDataIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcProjectCommunity`."""
  cbcProjectCommunitiesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCommunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectCommunityFilter
  ): CbcProjectCommunitiesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcProjectCommunity`.
"""
type CommunitiesSourceDataCcbcUsersByCbcProjectCommunityCommunitiesSourceDataIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcProjectCommunity`, and the cursor to aid in pagination.
  """
  edges: [CommunitiesSourceDataCcbcUsersByCbcProjectCommunityCommunitiesSourceDataIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcProjectCommunity`.
"""
type CommunitiesSourceDataCcbcUsersByCbcProjectCommunityCommunitiesSourceDataIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcProjectCommunity`."""
  cbcProjectCommunitiesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCommunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectCommunityFilter
  ): CbcProjectCommunitiesConnection!
}

"""A `CbcProjectCommunity` edge in the connection."""
type CbcProjectCommunitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CbcProjectCommunity` at the end of the edge."""
  node: CbcProjectCommunity
}

"""A connection to a list of `Cbc` values, with data from `CbcData`."""
type CbcCbcsByCbcDataCbcIdAndProjectNumberManyToManyConnection {
  """A list of `Cbc` objects."""
  nodes: [Cbc]!

  """
  A list of edges which contains the `Cbc`, info from the `CbcData`, and the cursor to aid in pagination.
  """
  edges: [CbcCbcsByCbcDataCbcIdAndProjectNumberManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Cbc` you could get from the connection."""
  totalCount: Int!
}

"""A `Cbc` edge in the connection, with data from `CbcData`."""
type CbcCbcsByCbcDataCbcIdAndProjectNumberManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Cbc` at the end of the edge."""
  node: Cbc

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByProjectNumber(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CbcDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `CbcData`."""
type CbcCcbcUsersByCbcDataCbcIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcData`, and the cursor to aid in pagination.
  """
  edges: [CbcCcbcUsersByCbcDataCbcIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CbcData`."""
type CbcCcbcUsersByCbcDataCbcIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CbcDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `CbcData`."""
type CbcCcbcUsersByCbcDataCbcIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcData`, and the cursor to aid in pagination.
  """
  edges: [CbcCcbcUsersByCbcDataCbcIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CbcData`."""
type CbcCcbcUsersByCbcDataCbcIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CbcDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `CbcData`."""
type CbcCcbcUsersByCbcDataCbcIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcData`, and the cursor to aid in pagination.
  """
  edges: [CbcCcbcUsersByCbcDataCbcIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CbcData`."""
type CbcCcbcUsersByCbcDataCbcIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CbcDataConnection!
}

"""A connection to a list of `Cbc` values, with data from `CbcData`."""
type CbcCbcsByCbcDataProjectNumberAndCbcIdManyToManyConnection {
  """A list of `Cbc` objects."""
  nodes: [Cbc]!

  """
  A list of edges which contains the `Cbc`, info from the `CbcData`, and the cursor to aid in pagination.
  """
  edges: [CbcCbcsByCbcDataProjectNumberAndCbcIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Cbc` you could get from the connection."""
  totalCount: Int!
}

"""A `Cbc` edge in the connection, with data from `CbcData`."""
type CbcCbcsByCbcDataProjectNumberAndCbcIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Cbc` at the end of the edge."""
  node: Cbc

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByCbcId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CbcDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `CbcData`."""
type CbcCcbcUsersByCbcDataProjectNumberAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcData`, and the cursor to aid in pagination.
  """
  edges: [CbcCcbcUsersByCbcDataProjectNumberAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CbcData`."""
type CbcCcbcUsersByCbcDataProjectNumberAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CbcDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `CbcData`."""
type CbcCcbcUsersByCbcDataProjectNumberAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcData`, and the cursor to aid in pagination.
  """
  edges: [CbcCcbcUsersByCbcDataProjectNumberAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CbcData`."""
type CbcCcbcUsersByCbcDataProjectNumberAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CbcDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `CbcData`."""
type CbcCcbcUsersByCbcDataProjectNumberAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcData`, and the cursor to aid in pagination.
  """
  edges: [CbcCcbcUsersByCbcDataProjectNumberAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CbcData`."""
type CbcCcbcUsersByCbcDataProjectNumberAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CbcDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcApplicationPendingChangeRequest`.
"""
type CbcCcbcUsersByCbcApplicationPendingChangeRequestCbcIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcApplicationPendingChangeRequest`, and the cursor to aid in pagination.
  """
  edges: [CbcCcbcUsersByCbcApplicationPendingChangeRequestCbcIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcApplicationPendingChangeRequest`.
"""
type CbcCcbcUsersByCbcApplicationPendingChangeRequestCbcIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `CbcApplicationPendingChangeRequest`.
  """
  cbcApplicationPendingChangeRequestsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcApplicationPendingChangeRequest`."""
    orderBy: [CbcApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcApplicationPendingChangeRequestFilter
  ): CbcApplicationPendingChangeRequestsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcApplicationPendingChangeRequest`.
"""
type CbcCcbcUsersByCbcApplicationPendingChangeRequestCbcIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcApplicationPendingChangeRequest`, and the cursor to aid in pagination.
  """
  edges: [CbcCcbcUsersByCbcApplicationPendingChangeRequestCbcIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcApplicationPendingChangeRequest`.
"""
type CbcCcbcUsersByCbcApplicationPendingChangeRequestCbcIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `CbcApplicationPendingChangeRequest`.
  """
  cbcApplicationPendingChangeRequestsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcApplicationPendingChangeRequest`."""
    orderBy: [CbcApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcApplicationPendingChangeRequestFilter
  ): CbcApplicationPendingChangeRequestsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcApplicationPendingChangeRequest`.
"""
type CbcCcbcUsersByCbcApplicationPendingChangeRequestCbcIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcApplicationPendingChangeRequest`, and the cursor to aid in pagination.
  """
  edges: [CbcCcbcUsersByCbcApplicationPendingChangeRequestCbcIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcApplicationPendingChangeRequest`.
"""
type CbcCcbcUsersByCbcApplicationPendingChangeRequestCbcIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `CbcApplicationPendingChangeRequest`.
  """
  cbcApplicationPendingChangeRequestsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcApplicationPendingChangeRequest`."""
    orderBy: [CbcApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcApplicationPendingChangeRequestFilter
  ): CbcApplicationPendingChangeRequestsConnection!
}

"""
A connection to a list of `CommunitiesSourceData` values, with data from `CbcProjectCommunity`.
"""
type CbcCommunitiesSourceDataByCbcProjectCommunityCbcIdAndCommunitiesSourceDataIdManyToManyConnection {
  """A list of `CommunitiesSourceData` objects."""
  nodes: [CommunitiesSourceData]!

  """
  A list of edges which contains the `CommunitiesSourceData`, info from the `CbcProjectCommunity`, and the cursor to aid in pagination.
  """
  edges: [CbcCommunitiesSourceDataByCbcProjectCommunityCbcIdAndCommunitiesSourceDataIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CommunitiesSourceData` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `CommunitiesSourceData` edge in the connection, with data from `CbcProjectCommunity`.
"""
type CbcCommunitiesSourceDataByCbcProjectCommunityCbcIdAndCommunitiesSourceDataIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CommunitiesSourceData` at the end of the edge."""
  node: CommunitiesSourceData

  """Reads and enables pagination through a set of `CbcProjectCommunity`."""
  cbcProjectCommunitiesByCommunitiesSourceDataId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCommunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectCommunityFilter
  ): CbcProjectCommunitiesConnection!
}

"""Methods to use when ordering `CommunitiesSourceData`."""
enum CommunitiesSourceDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  GEOGRAPHIC_NAME_ID_ASC
  GEOGRAPHIC_NAME_ID_DESC
  BC_GEOGRAPHIC_NAME_ASC
  BC_GEOGRAPHIC_NAME_DESC
  GEOGRAPHIC_TYPE_ASC
  GEOGRAPHIC_TYPE_DESC
  REGIONAL_DISTRICT_ASC
  REGIONAL_DISTRICT_DESC
  ECONOMIC_REGION_ASC
  ECONOMIC_REGION_DESC
  LATITUDE_ASC
  LATITUDE_DESC
  LONGITUDE_ASC
  LONGITUDE_DESC
  MAP_LINK_ASC
  MAP_LINK_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CommunitiesSourceData` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input CommunitiesSourceDataCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `geographicNameId` field."""
  geographicNameId: Int

  """Checks for equality with the object’s `bcGeographicName` field."""
  bcGeographicName: String

  """Checks for equality with the object’s `geographicType` field."""
  geographicType: String

  """Checks for equality with the object’s `regionalDistrict` field."""
  regionalDistrict: String

  """Checks for equality with the object’s `economicRegion` field."""
  economicRegion: String

  """Checks for equality with the object’s `latitude` field."""
  latitude: Float

  """Checks for equality with the object’s `longitude` field."""
  longitude: Float

  """Checks for equality with the object’s `mapLink` field."""
  mapLink: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcProjectCommunity`.
"""
type CbcCcbcUsersByCbcProjectCommunityCbcIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcProjectCommunity`, and the cursor to aid in pagination.
  """
  edges: [CbcCcbcUsersByCbcProjectCommunityCbcIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcProjectCommunity`.
"""
type CbcCcbcUsersByCbcProjectCommunityCbcIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcProjectCommunity`."""
  cbcProjectCommunitiesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCommunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectCommunityFilter
  ): CbcProjectCommunitiesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcProjectCommunity`.
"""
type CbcCcbcUsersByCbcProjectCommunityCbcIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcProjectCommunity`, and the cursor to aid in pagination.
  """
  edges: [CbcCcbcUsersByCbcProjectCommunityCbcIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcProjectCommunity`.
"""
type CbcCcbcUsersByCbcProjectCommunityCbcIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcProjectCommunity`."""
  cbcProjectCommunitiesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCommunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectCommunityFilter
  ): CbcProjectCommunitiesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcProjectCommunity`.
"""
type CbcCcbcUsersByCbcProjectCommunityCbcIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcProjectCommunity`, and the cursor to aid in pagination.
  """
  edges: [CbcCcbcUsersByCbcProjectCommunityCbcIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcProjectCommunity`.
"""
type CbcCcbcUsersByCbcProjectCommunityCbcIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcProjectCommunity`."""
  cbcProjectCommunitiesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCommunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectCommunityFilter
  ): CbcProjectCommunitiesConnection!
}

"""A `Cbc` edge in the connection."""
type CbcsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Cbc` at the end of the edge."""
  node: Cbc
}

"""A connection to a list of `CommunitiesSourceData` values."""
type CommunitiesSourceDataConnection {
  """A list of `CommunitiesSourceData` objects."""
  nodes: [CommunitiesSourceData]!

  """
  A list of edges which contains the `CommunitiesSourceData` and cursor to aid in pagination.
  """
  edges: [CommunitiesSourceDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CommunitiesSourceData` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CommunitiesSourceData` edge in the connection."""
type CommunitiesSourceDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CommunitiesSourceData` at the end of the edge."""
  node: CommunitiesSourceData
}

"""
A connection to a list of `CcbcUser` values, with data from `CcbcUser`.
"""
type CcbcUserCcbcUsersByCcbcUserCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CcbcUser`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCcbcUserCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CcbcUser`."""
type CcbcUserCcbcUsersByCcbcUserCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUsersConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CcbcUser`.
"""
type CcbcUserCcbcUsersByCcbcUserCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CcbcUser`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCcbcUserCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CcbcUser`."""
type CcbcUserCcbcUsersByCcbcUserCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUsersConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CcbcUser`.
"""
type CcbcUserCcbcUsersByCcbcUserUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CcbcUser`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCcbcUserUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CcbcUser`."""
type CcbcUserCcbcUsersByCcbcUserUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUsersConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CcbcUser`.
"""
type CcbcUserCcbcUsersByCcbcUserUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CcbcUser`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCcbcUserUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CcbcUser`."""
type CcbcUserCcbcUsersByCcbcUserUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUsersConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CcbcUser`.
"""
type CcbcUserCcbcUsersByCcbcUserArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CcbcUser`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCcbcUserArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CcbcUser`."""
type CcbcUserCcbcUsersByCcbcUserArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUsersConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CcbcUser`.
"""
type CcbcUserCcbcUsersByCcbcUserArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CcbcUser`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCcbcUserArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CcbcUser`."""
type CcbcUserCcbcUsersByCcbcUserArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CcbcUserFilter
  ): CcbcUsersConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Intake`."""
type CcbcUserCcbcUsersByIntakeCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Intake`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByIntakeCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Intake`."""
type CcbcUserCcbcUsersByIntakeCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Intake`."""
  intakesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IntakeFilter
  ): IntakesConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Intake`."""
type CcbcUserCcbcUsersByIntakeCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Intake`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByIntakeCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Intake`."""
type CcbcUserCcbcUsersByIntakeCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Intake`."""
  intakesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IntakeFilter
  ): IntakesConnection!
}

"""
A connection to a list of `GaplessCounter` values, with data from `Intake`.
"""
type CcbcUserGaplessCountersByIntakeCreatedByAndCounterIdManyToManyConnection {
  """A list of `GaplessCounter` objects."""
  nodes: [GaplessCounter]!

  """
  A list of edges which contains the `GaplessCounter`, info from the `Intake`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserGaplessCountersByIntakeCreatedByAndCounterIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GaplessCounter` you could get from the connection."""
  totalCount: Int!
}

"""A `GaplessCounter` edge in the connection, with data from `Intake`."""
type CcbcUserGaplessCountersByIntakeCreatedByAndCounterIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GaplessCounter` at the end of the edge."""
  node: GaplessCounter

  """Reads and enables pagination through a set of `Intake`."""
  intakesByCounterId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IntakeFilter
  ): IntakesConnection!
}

"""Methods to use when ordering `GaplessCounter`."""
enum GaplessCountersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  COUNTER_ASC
  COUNTER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `GaplessCounter` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input GaplessCounterCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `counter` field."""
  counter: Int
}

"""A connection to a list of `CcbcUser` values, with data from `Intake`."""
type CcbcUserCcbcUsersByIntakeUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Intake`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByIntakeUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Intake`."""
type CcbcUserCcbcUsersByIntakeUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Intake`."""
  intakesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IntakeFilter
  ): IntakesConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Intake`."""
type CcbcUserCcbcUsersByIntakeUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Intake`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByIntakeUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Intake`."""
type CcbcUserCcbcUsersByIntakeUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Intake`."""
  intakesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IntakeFilter
  ): IntakesConnection!
}

"""
A connection to a list of `GaplessCounter` values, with data from `Intake`.
"""
type CcbcUserGaplessCountersByIntakeUpdatedByAndCounterIdManyToManyConnection {
  """A list of `GaplessCounter` objects."""
  nodes: [GaplessCounter]!

  """
  A list of edges which contains the `GaplessCounter`, info from the `Intake`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserGaplessCountersByIntakeUpdatedByAndCounterIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GaplessCounter` you could get from the connection."""
  totalCount: Int!
}

"""A `GaplessCounter` edge in the connection, with data from `Intake`."""
type CcbcUserGaplessCountersByIntakeUpdatedByAndCounterIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GaplessCounter` at the end of the edge."""
  node: GaplessCounter

  """Reads and enables pagination through a set of `Intake`."""
  intakesByCounterId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IntakeFilter
  ): IntakesConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Intake`."""
type CcbcUserCcbcUsersByIntakeArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Intake`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByIntakeArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Intake`."""
type CcbcUserCcbcUsersByIntakeArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Intake`."""
  intakesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IntakeFilter
  ): IntakesConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Intake`."""
type CcbcUserCcbcUsersByIntakeArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Intake`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByIntakeArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Intake`."""
type CcbcUserCcbcUsersByIntakeArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Intake`."""
  intakesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IntakeFilter
  ): IntakesConnection!
}

"""
A connection to a list of `GaplessCounter` values, with data from `Intake`.
"""
type CcbcUserGaplessCountersByIntakeArchivedByAndCounterIdManyToManyConnection {
  """A list of `GaplessCounter` objects."""
  nodes: [GaplessCounter]!

  """
  A list of edges which contains the `GaplessCounter`, info from the `Intake`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserGaplessCountersByIntakeArchivedByAndCounterIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GaplessCounter` you could get from the connection."""
  totalCount: Int!
}

"""A `GaplessCounter` edge in the connection, with data from `Intake`."""
type CcbcUserGaplessCountersByIntakeArchivedByAndCounterIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GaplessCounter` at the end of the edge."""
  node: GaplessCounter

  """Reads and enables pagination through a set of `Intake`."""
  intakesByCounterId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: IntakeFilter
  ): IntakesConnection!
}

"""
A connection to a list of `Intake` values, with data from `Application`.
"""
type CcbcUserIntakesByApplicationCreatedByAndIntakeIdManyToManyConnection {
  """A list of `Intake` objects."""
  nodes: [Intake]!

  """
  A list of edges which contains the `Intake`, info from the `Application`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserIntakesByApplicationCreatedByAndIntakeIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Intake` you could get from the connection."""
  totalCount: Int!
}

"""A `Intake` edge in the connection, with data from `Application`."""
type CcbcUserIntakesByApplicationCreatedByAndIntakeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Intake` at the end of the edge."""
  node: Intake

  """Reads and enables pagination through a set of `Application`."""
  applicationsByIntakeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): ApplicationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Application`.
"""
type CcbcUserCcbcUsersByApplicationCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Application`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Application`."""
type CcbcUserCcbcUsersByApplicationCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Application`."""
  applicationsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): ApplicationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Application`.
"""
type CcbcUserCcbcUsersByApplicationCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Application`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Application`."""
type CcbcUserCcbcUsersByApplicationCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Application`."""
  applicationsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): ApplicationsConnection!
}

"""
A connection to a list of `Intake` values, with data from `Application`.
"""
type CcbcUserIntakesByApplicationUpdatedByAndIntakeIdManyToManyConnection {
  """A list of `Intake` objects."""
  nodes: [Intake]!

  """
  A list of edges which contains the `Intake`, info from the `Application`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserIntakesByApplicationUpdatedByAndIntakeIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Intake` you could get from the connection."""
  totalCount: Int!
}

"""A `Intake` edge in the connection, with data from `Application`."""
type CcbcUserIntakesByApplicationUpdatedByAndIntakeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Intake` at the end of the edge."""
  node: Intake

  """Reads and enables pagination through a set of `Application`."""
  applicationsByIntakeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): ApplicationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Application`.
"""
type CcbcUserCcbcUsersByApplicationUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Application`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Application`."""
type CcbcUserCcbcUsersByApplicationUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Application`."""
  applicationsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): ApplicationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Application`.
"""
type CcbcUserCcbcUsersByApplicationUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Application`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Application`."""
type CcbcUserCcbcUsersByApplicationUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Application`."""
  applicationsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): ApplicationsConnection!
}

"""
A connection to a list of `Intake` values, with data from `Application`.
"""
type CcbcUserIntakesByApplicationArchivedByAndIntakeIdManyToManyConnection {
  """A list of `Intake` objects."""
  nodes: [Intake]!

  """
  A list of edges which contains the `Intake`, info from the `Application`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserIntakesByApplicationArchivedByAndIntakeIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Intake` you could get from the connection."""
  totalCount: Int!
}

"""A `Intake` edge in the connection, with data from `Application`."""
type CcbcUserIntakesByApplicationArchivedByAndIntakeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Intake` at the end of the edge."""
  node: Intake

  """Reads and enables pagination through a set of `Application`."""
  applicationsByIntakeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): ApplicationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Application`.
"""
type CcbcUserCcbcUsersByApplicationArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Application`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Application`."""
type CcbcUserCcbcUsersByApplicationArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Application`."""
  applicationsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): ApplicationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Application`.
"""
type CcbcUserCcbcUsersByApplicationArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Application`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Application`."""
type CcbcUserCcbcUsersByApplicationArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Application`."""
  applicationsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationFilter
  ): ApplicationsConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationStatus`.
"""
type CcbcUserApplicationsByApplicationStatusCreatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationStatus`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationStatusCreatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationStatus`.
"""
type CcbcUserApplicationsByApplicationStatusCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationStatusesConnection!
}

"""
A connection to a list of `ApplicationStatusType` values, with data from `ApplicationStatus`.
"""
type CcbcUserApplicationStatusTypesByApplicationStatusCreatedByAndStatusManyToManyConnection {
  """A list of `ApplicationStatusType` objects."""
  nodes: [ApplicationStatusType]!

  """
  A list of edges which contains the `ApplicationStatusType`, info from the `ApplicationStatus`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationStatusTypesByApplicationStatusCreatedByAndStatusManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationStatusType` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ApplicationStatusType` edge in the connection, with data from `ApplicationStatus`.
"""
type CcbcUserApplicationStatusTypesByApplicationStatusCreatedByAndStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationStatusType` at the end of the edge."""
  node: ApplicationStatusType

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByStatus(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationStatusesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationStatus`.
"""
type CcbcUserCcbcUsersByApplicationStatusCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationStatus`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationStatusCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationStatus`.
"""
type CcbcUserCcbcUsersByApplicationStatusCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationStatusesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationStatus`.
"""
type CcbcUserCcbcUsersByApplicationStatusCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationStatus`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationStatusCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationStatus`.
"""
type CcbcUserCcbcUsersByApplicationStatusCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationStatusesConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationStatus`.
"""
type CcbcUserApplicationsByApplicationStatusArchivedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationStatus`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationStatusArchivedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationStatus`.
"""
type CcbcUserApplicationsByApplicationStatusArchivedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationStatusesConnection!
}

"""
A connection to a list of `ApplicationStatusType` values, with data from `ApplicationStatus`.
"""
type CcbcUserApplicationStatusTypesByApplicationStatusArchivedByAndStatusManyToManyConnection {
  """A list of `ApplicationStatusType` objects."""
  nodes: [ApplicationStatusType]!

  """
  A list of edges which contains the `ApplicationStatusType`, info from the `ApplicationStatus`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationStatusTypesByApplicationStatusArchivedByAndStatusManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationStatusType` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ApplicationStatusType` edge in the connection, with data from `ApplicationStatus`.
"""
type CcbcUserApplicationStatusTypesByApplicationStatusArchivedByAndStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationStatusType` at the end of the edge."""
  node: ApplicationStatusType

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByStatus(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationStatusesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationStatus`.
"""
type CcbcUserCcbcUsersByApplicationStatusArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationStatus`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationStatusArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationStatus`.
"""
type CcbcUserCcbcUsersByApplicationStatusArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationStatusesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationStatus`.
"""
type CcbcUserCcbcUsersByApplicationStatusArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationStatus`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationStatusArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationStatus`.
"""
type CcbcUserCcbcUsersByApplicationStatusArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationStatusesConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationStatus`.
"""
type CcbcUserApplicationsByApplicationStatusUpdatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationStatus`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationStatusUpdatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationStatus`.
"""
type CcbcUserApplicationsByApplicationStatusUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationStatusesConnection!
}

"""
A connection to a list of `ApplicationStatusType` values, with data from `ApplicationStatus`.
"""
type CcbcUserApplicationStatusTypesByApplicationStatusUpdatedByAndStatusManyToManyConnection {
  """A list of `ApplicationStatusType` objects."""
  nodes: [ApplicationStatusType]!

  """
  A list of edges which contains the `ApplicationStatusType`, info from the `ApplicationStatus`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationStatusTypesByApplicationStatusUpdatedByAndStatusManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationStatusType` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ApplicationStatusType` edge in the connection, with data from `ApplicationStatus`.
"""
type CcbcUserApplicationStatusTypesByApplicationStatusUpdatedByAndStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationStatusType` at the end of the edge."""
  node: ApplicationStatusType

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByStatus(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationStatusesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationStatus`.
"""
type CcbcUserCcbcUsersByApplicationStatusUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationStatus`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationStatusUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationStatus`.
"""
type CcbcUserCcbcUsersByApplicationStatusUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationStatusesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationStatus`.
"""
type CcbcUserCcbcUsersByApplicationStatusUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationStatus`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationStatusUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationStatus`.
"""
type CcbcUserCcbcUsersByApplicationStatusUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationStatusFilter
  ): ApplicationStatusesConnection!
}

"""
A connection to a list of `Application` values, with data from `Attachment`.
"""
type CcbcUserApplicationsByAttachmentCreatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByAttachmentCreatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""A `Application` edge in the connection, with data from `Attachment`."""
type CcbcUserApplicationsByAttachmentCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection!
}

"""
A connection to a list of `ApplicationStatus` values, with data from `Attachment`.
"""
type CcbcUserApplicationStatusesByAttachmentCreatedByAndApplicationStatusIdManyToManyConnection {
  """A list of `ApplicationStatus` objects."""
  nodes: [ApplicationStatus]!

  """
  A list of edges which contains the `ApplicationStatus`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationStatusesByAttachmentCreatedByAndApplicationStatusIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ApplicationStatus` edge in the connection, with data from `Attachment`.
"""
type CcbcUserApplicationStatusesByAttachmentCreatedByAndApplicationStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationStatus` at the end of the edge."""
  node: ApplicationStatus

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByApplicationStatusId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Attachment`.
"""
type CcbcUserCcbcUsersByAttachmentCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAttachmentCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Attachment`."""
type CcbcUserCcbcUsersByAttachmentCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Attachment`.
"""
type CcbcUserCcbcUsersByAttachmentCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAttachmentCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Attachment`."""
type CcbcUserCcbcUsersByAttachmentCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection!
}

"""
A connection to a list of `Application` values, with data from `Attachment`.
"""
type CcbcUserApplicationsByAttachmentUpdatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByAttachmentUpdatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""A `Application` edge in the connection, with data from `Attachment`."""
type CcbcUserApplicationsByAttachmentUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection!
}

"""
A connection to a list of `ApplicationStatus` values, with data from `Attachment`.
"""
type CcbcUserApplicationStatusesByAttachmentUpdatedByAndApplicationStatusIdManyToManyConnection {
  """A list of `ApplicationStatus` objects."""
  nodes: [ApplicationStatus]!

  """
  A list of edges which contains the `ApplicationStatus`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationStatusesByAttachmentUpdatedByAndApplicationStatusIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ApplicationStatus` edge in the connection, with data from `Attachment`.
"""
type CcbcUserApplicationStatusesByAttachmentUpdatedByAndApplicationStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationStatus` at the end of the edge."""
  node: ApplicationStatus

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByApplicationStatusId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Attachment`.
"""
type CcbcUserCcbcUsersByAttachmentUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAttachmentUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Attachment`."""
type CcbcUserCcbcUsersByAttachmentUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Attachment`.
"""
type CcbcUserCcbcUsersByAttachmentUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAttachmentUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Attachment`."""
type CcbcUserCcbcUsersByAttachmentUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection!
}

"""
A connection to a list of `Application` values, with data from `Attachment`.
"""
type CcbcUserApplicationsByAttachmentArchivedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByAttachmentArchivedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""A `Application` edge in the connection, with data from `Attachment`."""
type CcbcUserApplicationsByAttachmentArchivedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection!
}

"""
A connection to a list of `ApplicationStatus` values, with data from `Attachment`.
"""
type CcbcUserApplicationStatusesByAttachmentArchivedByAndApplicationStatusIdManyToManyConnection {
  """A list of `ApplicationStatus` objects."""
  nodes: [ApplicationStatus]!

  """
  A list of edges which contains the `ApplicationStatus`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationStatusesByAttachmentArchivedByAndApplicationStatusIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ApplicationStatus` edge in the connection, with data from `Attachment`.
"""
type CcbcUserApplicationStatusesByAttachmentArchivedByAndApplicationStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationStatus` at the end of the edge."""
  node: ApplicationStatus

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByApplicationStatusId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Attachment`.
"""
type CcbcUserCcbcUsersByAttachmentArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAttachmentArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Attachment`."""
type CcbcUserCcbcUsersByAttachmentArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Attachment`.
"""
type CcbcUserCcbcUsersByAttachmentArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAttachmentArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Attachment`."""
type CcbcUserCcbcUsersByAttachmentArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter
  ): AttachmentsConnection!
}

"""
A connection to a list of `FormDataStatusType` values, with data from `FormData`.
"""
type CcbcUserFormDataStatusTypesByFormDataCreatedByAndFormDataStatusTypeIdManyToManyConnection {
  """A list of `FormDataStatusType` objects."""
  nodes: [FormDataStatusType]!

  """
  A list of edges which contains the `FormDataStatusType`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserFormDataStatusTypesByFormDataCreatedByAndFormDataStatusTypeIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FormDataStatusType` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `FormDataStatusType` edge in the connection, with data from `FormData`.
"""
type CcbcUserFormDataStatusTypesByFormDataCreatedByAndFormDataStatusTypeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormDataStatusType` at the end of the edge."""
  node: FormDataStatusType

  """Reads and enables pagination through a set of `FormData`."""
  formDataByFormDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): FormDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `FormData`.
"""
type CcbcUserCcbcUsersByFormDataCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByFormDataCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `FormData`."""
type CcbcUserCcbcUsersByFormDataCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `FormData`."""
  formDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): FormDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `FormData`.
"""
type CcbcUserCcbcUsersByFormDataCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByFormDataCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `FormData`."""
type CcbcUserCcbcUsersByFormDataCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `FormData`."""
  formDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): FormDataConnection!
}

"""A connection to a list of `Form` values, with data from `FormData`."""
type CcbcUserFormsByFormDataCreatedByAndFormSchemaIdManyToManyConnection {
  """A list of `Form` objects."""
  nodes: [Form]!

  """
  A list of edges which contains the `Form`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserFormsByFormDataCreatedByAndFormSchemaIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Form` you could get from the connection."""
  totalCount: Int!
}

"""A `Form` edge in the connection, with data from `FormData`."""
type CcbcUserFormsByFormDataCreatedByAndFormSchemaIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Form` at the end of the edge."""
  node: Form

  """Reads and enables pagination through a set of `FormData`."""
  formDataByFormSchemaId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): FormDataConnection!
}

"""
A connection to a list of `FormDataStatusType` values, with data from `FormData`.
"""
type CcbcUserFormDataStatusTypesByFormDataUpdatedByAndFormDataStatusTypeIdManyToManyConnection {
  """A list of `FormDataStatusType` objects."""
  nodes: [FormDataStatusType]!

  """
  A list of edges which contains the `FormDataStatusType`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserFormDataStatusTypesByFormDataUpdatedByAndFormDataStatusTypeIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FormDataStatusType` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `FormDataStatusType` edge in the connection, with data from `FormData`.
"""
type CcbcUserFormDataStatusTypesByFormDataUpdatedByAndFormDataStatusTypeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormDataStatusType` at the end of the edge."""
  node: FormDataStatusType

  """Reads and enables pagination through a set of `FormData`."""
  formDataByFormDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): FormDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `FormData`.
"""
type CcbcUserCcbcUsersByFormDataUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByFormDataUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `FormData`."""
type CcbcUserCcbcUsersByFormDataUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `FormData`."""
  formDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): FormDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `FormData`.
"""
type CcbcUserCcbcUsersByFormDataUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByFormDataUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `FormData`."""
type CcbcUserCcbcUsersByFormDataUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `FormData`."""
  formDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): FormDataConnection!
}

"""A connection to a list of `Form` values, with data from `FormData`."""
type CcbcUserFormsByFormDataUpdatedByAndFormSchemaIdManyToManyConnection {
  """A list of `Form` objects."""
  nodes: [Form]!

  """
  A list of edges which contains the `Form`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserFormsByFormDataUpdatedByAndFormSchemaIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Form` you could get from the connection."""
  totalCount: Int!
}

"""A `Form` edge in the connection, with data from `FormData`."""
type CcbcUserFormsByFormDataUpdatedByAndFormSchemaIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Form` at the end of the edge."""
  node: Form

  """Reads and enables pagination through a set of `FormData`."""
  formDataByFormSchemaId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): FormDataConnection!
}

"""
A connection to a list of `FormDataStatusType` values, with data from `FormData`.
"""
type CcbcUserFormDataStatusTypesByFormDataArchivedByAndFormDataStatusTypeIdManyToManyConnection {
  """A list of `FormDataStatusType` objects."""
  nodes: [FormDataStatusType]!

  """
  A list of edges which contains the `FormDataStatusType`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserFormDataStatusTypesByFormDataArchivedByAndFormDataStatusTypeIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FormDataStatusType` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `FormDataStatusType` edge in the connection, with data from `FormData`.
"""
type CcbcUserFormDataStatusTypesByFormDataArchivedByAndFormDataStatusTypeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormDataStatusType` at the end of the edge."""
  node: FormDataStatusType

  """Reads and enables pagination through a set of `FormData`."""
  formDataByFormDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): FormDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `FormData`.
"""
type CcbcUserCcbcUsersByFormDataArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByFormDataArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `FormData`."""
type CcbcUserCcbcUsersByFormDataArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `FormData`."""
  formDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): FormDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `FormData`.
"""
type CcbcUserCcbcUsersByFormDataArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByFormDataArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `FormData`."""
type CcbcUserCcbcUsersByFormDataArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `FormData`."""
  formDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): FormDataConnection!
}

"""A connection to a list of `Form` values, with data from `FormData`."""
type CcbcUserFormsByFormDataArchivedByAndFormSchemaIdManyToManyConnection {
  """A list of `Form` objects."""
  nodes: [Form]!

  """
  A list of edges which contains the `Form`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserFormsByFormDataArchivedByAndFormSchemaIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Form` you could get from the connection."""
  totalCount: Int!
}

"""A `Form` edge in the connection, with data from `FormData`."""
type CcbcUserFormsByFormDataArchivedByAndFormSchemaIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Form` at the end of the edge."""
  node: Form

  """Reads and enables pagination through a set of `FormData`."""
  formDataByFormSchemaId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormDataFilter
  ): FormDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Analyst`."""
type CcbcUserCcbcUsersByAnalystCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Analyst`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAnalystCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Analyst`."""
type CcbcUserCcbcUsersByAnalystCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Analyst`."""
  analystsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnalystFilter
  ): AnalystsConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Analyst`."""
type CcbcUserCcbcUsersByAnalystCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Analyst`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAnalystCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Analyst`."""
type CcbcUserCcbcUsersByAnalystCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Analyst`."""
  analystsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnalystFilter
  ): AnalystsConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Analyst`."""
type CcbcUserCcbcUsersByAnalystUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Analyst`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAnalystUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Analyst`."""
type CcbcUserCcbcUsersByAnalystUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Analyst`."""
  analystsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnalystFilter
  ): AnalystsConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Analyst`."""
type CcbcUserCcbcUsersByAnalystUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Analyst`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAnalystUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Analyst`."""
type CcbcUserCcbcUsersByAnalystUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Analyst`."""
  analystsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnalystFilter
  ): AnalystsConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Analyst`."""
type CcbcUserCcbcUsersByAnalystArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Analyst`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAnalystArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Analyst`."""
type CcbcUserCcbcUsersByAnalystArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Analyst`."""
  analystsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnalystFilter
  ): AnalystsConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Analyst`."""
type CcbcUserCcbcUsersByAnalystArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Analyst`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAnalystArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Analyst`."""
type CcbcUserCcbcUsersByAnalystArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Analyst`."""
  analystsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnalystFilter
  ): AnalystsConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationAnalystLead`.
"""
type CcbcUserApplicationsByApplicationAnalystLeadCreatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationAnalystLeadCreatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type CcbcUserApplicationsByApplicationAnalystLeadCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnalystLeadFilter
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `Analyst` values, with data from `ApplicationAnalystLead`.
"""
type CcbcUserAnalystsByApplicationAnalystLeadCreatedByAndAnalystIdManyToManyConnection {
  """A list of `Analyst` objects."""
  nodes: [Analyst]!

  """
  A list of edges which contains the `Analyst`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserAnalystsByApplicationAnalystLeadCreatedByAndAnalystIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Analyst` you could get from the connection."""
  totalCount: Int!
}

"""
A `Analyst` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type CcbcUserAnalystsByApplicationAnalystLeadCreatedByAndAnalystIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Analyst` at the end of the edge."""
  node: Analyst

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByAnalystId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnalystLeadFilter
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnalystLead`.
"""
type CcbcUserCcbcUsersByApplicationAnalystLeadCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationAnalystLeadCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type CcbcUserCcbcUsersByApplicationAnalystLeadCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnalystLeadFilter
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnalystLead`.
"""
type CcbcUserCcbcUsersByApplicationAnalystLeadCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationAnalystLeadCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type CcbcUserCcbcUsersByApplicationAnalystLeadCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnalystLeadFilter
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationAnalystLead`.
"""
type CcbcUserApplicationsByApplicationAnalystLeadUpdatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationAnalystLeadUpdatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type CcbcUserApplicationsByApplicationAnalystLeadUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnalystLeadFilter
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `Analyst` values, with data from `ApplicationAnalystLead`.
"""
type CcbcUserAnalystsByApplicationAnalystLeadUpdatedByAndAnalystIdManyToManyConnection {
  """A list of `Analyst` objects."""
  nodes: [Analyst]!

  """
  A list of edges which contains the `Analyst`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserAnalystsByApplicationAnalystLeadUpdatedByAndAnalystIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Analyst` you could get from the connection."""
  totalCount: Int!
}

"""
A `Analyst` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type CcbcUserAnalystsByApplicationAnalystLeadUpdatedByAndAnalystIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Analyst` at the end of the edge."""
  node: Analyst

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByAnalystId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnalystLeadFilter
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnalystLead`.
"""
type CcbcUserCcbcUsersByApplicationAnalystLeadUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationAnalystLeadUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type CcbcUserCcbcUsersByApplicationAnalystLeadUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnalystLeadFilter
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnalystLead`.
"""
type CcbcUserCcbcUsersByApplicationAnalystLeadUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationAnalystLeadUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type CcbcUserCcbcUsersByApplicationAnalystLeadUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnalystLeadFilter
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationAnalystLead`.
"""
type CcbcUserApplicationsByApplicationAnalystLeadArchivedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationAnalystLeadArchivedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type CcbcUserApplicationsByApplicationAnalystLeadArchivedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnalystLeadFilter
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `Analyst` values, with data from `ApplicationAnalystLead`.
"""
type CcbcUserAnalystsByApplicationAnalystLeadArchivedByAndAnalystIdManyToManyConnection {
  """A list of `Analyst` objects."""
  nodes: [Analyst]!

  """
  A list of edges which contains the `Analyst`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserAnalystsByApplicationAnalystLeadArchivedByAndAnalystIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Analyst` you could get from the connection."""
  totalCount: Int!
}

"""
A `Analyst` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type CcbcUserAnalystsByApplicationAnalystLeadArchivedByAndAnalystIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Analyst` at the end of the edge."""
  node: Analyst

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByAnalystId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnalystLeadFilter
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnalystLead`.
"""
type CcbcUserCcbcUsersByApplicationAnalystLeadArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationAnalystLeadArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type CcbcUserCcbcUsersByApplicationAnalystLeadArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnalystLeadFilter
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnalystLead`.
"""
type CcbcUserCcbcUsersByApplicationAnalystLeadArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationAnalystLeadArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type CcbcUserCcbcUsersByApplicationAnalystLeadArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnalystLeadFilter
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `RfiDataStatusType` values, with data from `RfiData`.
"""
type CcbcUserRfiDataStatusTypesByRfiDataCreatedByAndRfiDataStatusTypeIdManyToManyConnection {
  """A list of `RfiDataStatusType` objects."""
  nodes: [RfiDataStatusType]!

  """
  A list of edges which contains the `RfiDataStatusType`, info from the `RfiData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserRfiDataStatusTypesByRfiDataCreatedByAndRfiDataStatusTypeIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `RfiDataStatusType` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `RfiDataStatusType` edge in the connection, with data from `RfiData`.
"""
type CcbcUserRfiDataStatusTypesByRfiDataCreatedByAndRfiDataStatusTypeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RfiDataStatusType` at the end of the edge."""
  node: RfiDataStatusType

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByRfiDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RfiDataFilter
  ): RfiDataConnection!
}

"""Methods to use when ordering `RfiDataStatusType`."""
enum RfiDataStatusTypesOrderBy {
  NATURAL
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `RfiDataStatusType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RfiDataStatusTypeCondition {
  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""A connection to a list of `CcbcUser` values, with data from `RfiData`."""
type CcbcUserCcbcUsersByRfiDataCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `RfiData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByRfiDataCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `RfiData`."""
type CcbcUserCcbcUsersByRfiDataCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RfiDataFilter
  ): RfiDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `RfiData`."""
type CcbcUserCcbcUsersByRfiDataCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `RfiData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByRfiDataCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `RfiData`."""
type CcbcUserCcbcUsersByRfiDataCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RfiDataFilter
  ): RfiDataConnection!
}

"""
A connection to a list of `RfiDataStatusType` values, with data from `RfiData`.
"""
type CcbcUserRfiDataStatusTypesByRfiDataUpdatedByAndRfiDataStatusTypeIdManyToManyConnection {
  """A list of `RfiDataStatusType` objects."""
  nodes: [RfiDataStatusType]!

  """
  A list of edges which contains the `RfiDataStatusType`, info from the `RfiData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserRfiDataStatusTypesByRfiDataUpdatedByAndRfiDataStatusTypeIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `RfiDataStatusType` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `RfiDataStatusType` edge in the connection, with data from `RfiData`.
"""
type CcbcUserRfiDataStatusTypesByRfiDataUpdatedByAndRfiDataStatusTypeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RfiDataStatusType` at the end of the edge."""
  node: RfiDataStatusType

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByRfiDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RfiDataFilter
  ): RfiDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `RfiData`."""
type CcbcUserCcbcUsersByRfiDataUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `RfiData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByRfiDataUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `RfiData`."""
type CcbcUserCcbcUsersByRfiDataUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RfiDataFilter
  ): RfiDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `RfiData`."""
type CcbcUserCcbcUsersByRfiDataUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `RfiData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByRfiDataUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `RfiData`."""
type CcbcUserCcbcUsersByRfiDataUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RfiDataFilter
  ): RfiDataConnection!
}

"""
A connection to a list of `RfiDataStatusType` values, with data from `RfiData`.
"""
type CcbcUserRfiDataStatusTypesByRfiDataArchivedByAndRfiDataStatusTypeIdManyToManyConnection {
  """A list of `RfiDataStatusType` objects."""
  nodes: [RfiDataStatusType]!

  """
  A list of edges which contains the `RfiDataStatusType`, info from the `RfiData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserRfiDataStatusTypesByRfiDataArchivedByAndRfiDataStatusTypeIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `RfiDataStatusType` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `RfiDataStatusType` edge in the connection, with data from `RfiData`.
"""
type CcbcUserRfiDataStatusTypesByRfiDataArchivedByAndRfiDataStatusTypeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RfiDataStatusType` at the end of the edge."""
  node: RfiDataStatusType

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByRfiDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RfiDataFilter
  ): RfiDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `RfiData`."""
type CcbcUserCcbcUsersByRfiDataArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `RfiData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByRfiDataArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `RfiData`."""
type CcbcUserCcbcUsersByRfiDataArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RfiDataFilter
  ): RfiDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `RfiData`."""
type CcbcUserCcbcUsersByRfiDataArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `RfiData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByRfiDataArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `RfiData`."""
type CcbcUserCcbcUsersByRfiDataArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RfiDataFilter
  ): RfiDataConnection!
}

"""
A connection to a list of `Application` values, with data from `AssessmentData`.
"""
type CcbcUserApplicationsByAssessmentDataCreatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `AssessmentData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByAssessmentDataCreatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `AssessmentData`.
"""
type CcbcUserApplicationsByAssessmentDataCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `AssessmentData`."""
  assessmentDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection!
}

"""
A connection to a list of `AssessmentType` values, with data from `AssessmentData`.
"""
type CcbcUserAssessmentTypesByAssessmentDataCreatedByAndAssessmentDataTypeManyToManyConnection {
  """A list of `AssessmentType` objects."""
  nodes: [AssessmentType]!

  """
  A list of edges which contains the `AssessmentType`, info from the `AssessmentData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserAssessmentTypesByAssessmentDataCreatedByAndAssessmentDataTypeManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AssessmentType` you could get from the connection."""
  totalCount: Int!
}

"""
A `AssessmentType` edge in the connection, with data from `AssessmentData`.
"""
type CcbcUserAssessmentTypesByAssessmentDataCreatedByAndAssessmentDataTypeManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AssessmentType` at the end of the edge."""
  node: AssessmentType

  """Reads and enables pagination through a set of `AssessmentData`."""
  assessmentDataByAssessmentDataType(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `AssessmentData`.
"""
type CcbcUserCcbcUsersByAssessmentDataCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `AssessmentData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAssessmentDataCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `AssessmentData`."""
type CcbcUserCcbcUsersByAssessmentDataCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `AssessmentData`."""
  assessmentDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `AssessmentData`.
"""
type CcbcUserCcbcUsersByAssessmentDataCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `AssessmentData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAssessmentDataCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `AssessmentData`."""
type CcbcUserCcbcUsersByAssessmentDataCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `AssessmentData`."""
  assessmentDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection!
}

"""
A connection to a list of `Application` values, with data from `AssessmentData`.
"""
type CcbcUserApplicationsByAssessmentDataUpdatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `AssessmentData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByAssessmentDataUpdatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `AssessmentData`.
"""
type CcbcUserApplicationsByAssessmentDataUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `AssessmentData`."""
  assessmentDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection!
}

"""
A connection to a list of `AssessmentType` values, with data from `AssessmentData`.
"""
type CcbcUserAssessmentTypesByAssessmentDataUpdatedByAndAssessmentDataTypeManyToManyConnection {
  """A list of `AssessmentType` objects."""
  nodes: [AssessmentType]!

  """
  A list of edges which contains the `AssessmentType`, info from the `AssessmentData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserAssessmentTypesByAssessmentDataUpdatedByAndAssessmentDataTypeManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AssessmentType` you could get from the connection."""
  totalCount: Int!
}

"""
A `AssessmentType` edge in the connection, with data from `AssessmentData`.
"""
type CcbcUserAssessmentTypesByAssessmentDataUpdatedByAndAssessmentDataTypeManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AssessmentType` at the end of the edge."""
  node: AssessmentType

  """Reads and enables pagination through a set of `AssessmentData`."""
  assessmentDataByAssessmentDataType(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `AssessmentData`.
"""
type CcbcUserCcbcUsersByAssessmentDataUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `AssessmentData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAssessmentDataUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `AssessmentData`."""
type CcbcUserCcbcUsersByAssessmentDataUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `AssessmentData`."""
  assessmentDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `AssessmentData`.
"""
type CcbcUserCcbcUsersByAssessmentDataUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `AssessmentData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAssessmentDataUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `AssessmentData`."""
type CcbcUserCcbcUsersByAssessmentDataUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `AssessmentData`."""
  assessmentDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection!
}

"""
A connection to a list of `Application` values, with data from `AssessmentData`.
"""
type CcbcUserApplicationsByAssessmentDataArchivedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `AssessmentData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByAssessmentDataArchivedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `AssessmentData`.
"""
type CcbcUserApplicationsByAssessmentDataArchivedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `AssessmentData`."""
  assessmentDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection!
}

"""
A connection to a list of `AssessmentType` values, with data from `AssessmentData`.
"""
type CcbcUserAssessmentTypesByAssessmentDataArchivedByAndAssessmentDataTypeManyToManyConnection {
  """A list of `AssessmentType` objects."""
  nodes: [AssessmentType]!

  """
  A list of edges which contains the `AssessmentType`, info from the `AssessmentData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserAssessmentTypesByAssessmentDataArchivedByAndAssessmentDataTypeManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AssessmentType` you could get from the connection."""
  totalCount: Int!
}

"""
A `AssessmentType` edge in the connection, with data from `AssessmentData`.
"""
type CcbcUserAssessmentTypesByAssessmentDataArchivedByAndAssessmentDataTypeManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AssessmentType` at the end of the edge."""
  node: AssessmentType

  """Reads and enables pagination through a set of `AssessmentData`."""
  assessmentDataByAssessmentDataType(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `AssessmentData`.
"""
type CcbcUserCcbcUsersByAssessmentDataArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `AssessmentData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAssessmentDataArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `AssessmentData`."""
type CcbcUserCcbcUsersByAssessmentDataArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `AssessmentData`."""
  assessmentDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `AssessmentData`.
"""
type CcbcUserCcbcUsersByAssessmentDataArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `AssessmentData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAssessmentDataArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `AssessmentData`."""
type CcbcUserCcbcUsersByAssessmentDataArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `AssessmentData`."""
  assessmentDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AssessmentDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AssessmentDataFilter
  ): AssessmentDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationPackage`.
"""
type CcbcUserApplicationsByApplicationPackageCreatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationPackage`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationPackageCreatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationPackage`.
"""
type CcbcUserApplicationsByApplicationPackageCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ApplicationPackage`."""
  applicationPackagesByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPackage`."""
    orderBy: [ApplicationPackagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPackageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPackageFilter
  ): ApplicationPackagesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationPackage`.
"""
type CcbcUserCcbcUsersByApplicationPackageCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationPackage`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationPackageCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationPackage`.
"""
type CcbcUserCcbcUsersByApplicationPackageCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationPackage`."""
  applicationPackagesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPackage`."""
    orderBy: [ApplicationPackagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPackageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPackageFilter
  ): ApplicationPackagesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationPackage`.
"""
type CcbcUserCcbcUsersByApplicationPackageCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationPackage`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationPackageCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationPackage`.
"""
type CcbcUserCcbcUsersByApplicationPackageCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationPackage`."""
  applicationPackagesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPackage`."""
    orderBy: [ApplicationPackagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPackageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPackageFilter
  ): ApplicationPackagesConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationPackage`.
"""
type CcbcUserApplicationsByApplicationPackageUpdatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationPackage`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationPackageUpdatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationPackage`.
"""
type CcbcUserApplicationsByApplicationPackageUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ApplicationPackage`."""
  applicationPackagesByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPackage`."""
    orderBy: [ApplicationPackagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPackageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPackageFilter
  ): ApplicationPackagesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationPackage`.
"""
type CcbcUserCcbcUsersByApplicationPackageUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationPackage`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationPackageUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationPackage`.
"""
type CcbcUserCcbcUsersByApplicationPackageUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationPackage`."""
  applicationPackagesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPackage`."""
    orderBy: [ApplicationPackagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPackageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPackageFilter
  ): ApplicationPackagesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationPackage`.
"""
type CcbcUserCcbcUsersByApplicationPackageUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationPackage`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationPackageUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationPackage`.
"""
type CcbcUserCcbcUsersByApplicationPackageUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationPackage`."""
  applicationPackagesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPackage`."""
    orderBy: [ApplicationPackagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPackageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPackageFilter
  ): ApplicationPackagesConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationPackage`.
"""
type CcbcUserApplicationsByApplicationPackageArchivedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationPackage`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationPackageArchivedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationPackage`.
"""
type CcbcUserApplicationsByApplicationPackageArchivedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ApplicationPackage`."""
  applicationPackagesByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPackage`."""
    orderBy: [ApplicationPackagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPackageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPackageFilter
  ): ApplicationPackagesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationPackage`.
"""
type CcbcUserCcbcUsersByApplicationPackageArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationPackage`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationPackageArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationPackage`.
"""
type CcbcUserCcbcUsersByApplicationPackageArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationPackage`."""
  applicationPackagesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPackage`."""
    orderBy: [ApplicationPackagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPackageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPackageFilter
  ): ApplicationPackagesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationPackage`.
"""
type CcbcUserCcbcUsersByApplicationPackageArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationPackage`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationPackageArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationPackage`.
"""
type CcbcUserCcbcUsersByApplicationPackageArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationPackage`."""
  applicationPackagesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPackage`."""
    orderBy: [ApplicationPackagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPackageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPackageFilter
  ): ApplicationPackagesConnection!
}

"""
A connection to a list of `Application` values, with data from `ConditionalApprovalData`.
"""
type CcbcUserApplicationsByConditionalApprovalDataCreatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ConditionalApprovalData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByConditionalApprovalDataCreatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ConditionalApprovalData`.
"""
type CcbcUserApplicationsByConditionalApprovalDataCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ConditionalApprovalData`.
  """
  conditionalApprovalDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ConditionalApprovalData`."""
    orderBy: [ConditionalApprovalDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConditionalApprovalDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConditionalApprovalDataFilter
  ): ConditionalApprovalDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ConditionalApprovalData`.
"""
type CcbcUserCcbcUsersByConditionalApprovalDataCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ConditionalApprovalData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByConditionalApprovalDataCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ConditionalApprovalData`.
"""
type CcbcUserCcbcUsersByConditionalApprovalDataCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ConditionalApprovalData`.
  """
  conditionalApprovalDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ConditionalApprovalData`."""
    orderBy: [ConditionalApprovalDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConditionalApprovalDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConditionalApprovalDataFilter
  ): ConditionalApprovalDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ConditionalApprovalData`.
"""
type CcbcUserCcbcUsersByConditionalApprovalDataCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ConditionalApprovalData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByConditionalApprovalDataCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ConditionalApprovalData`.
"""
type CcbcUserCcbcUsersByConditionalApprovalDataCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ConditionalApprovalData`.
  """
  conditionalApprovalDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ConditionalApprovalData`."""
    orderBy: [ConditionalApprovalDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConditionalApprovalDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConditionalApprovalDataFilter
  ): ConditionalApprovalDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ConditionalApprovalData`.
"""
type CcbcUserApplicationsByConditionalApprovalDataUpdatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ConditionalApprovalData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByConditionalApprovalDataUpdatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ConditionalApprovalData`.
"""
type CcbcUserApplicationsByConditionalApprovalDataUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ConditionalApprovalData`.
  """
  conditionalApprovalDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ConditionalApprovalData`."""
    orderBy: [ConditionalApprovalDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConditionalApprovalDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConditionalApprovalDataFilter
  ): ConditionalApprovalDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ConditionalApprovalData`.
"""
type CcbcUserCcbcUsersByConditionalApprovalDataUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ConditionalApprovalData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByConditionalApprovalDataUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ConditionalApprovalData`.
"""
type CcbcUserCcbcUsersByConditionalApprovalDataUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ConditionalApprovalData`.
  """
  conditionalApprovalDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ConditionalApprovalData`."""
    orderBy: [ConditionalApprovalDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConditionalApprovalDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConditionalApprovalDataFilter
  ): ConditionalApprovalDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ConditionalApprovalData`.
"""
type CcbcUserCcbcUsersByConditionalApprovalDataUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ConditionalApprovalData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByConditionalApprovalDataUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ConditionalApprovalData`.
"""
type CcbcUserCcbcUsersByConditionalApprovalDataUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ConditionalApprovalData`.
  """
  conditionalApprovalDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ConditionalApprovalData`."""
    orderBy: [ConditionalApprovalDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConditionalApprovalDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConditionalApprovalDataFilter
  ): ConditionalApprovalDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ConditionalApprovalData`.
"""
type CcbcUserApplicationsByConditionalApprovalDataArchivedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ConditionalApprovalData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByConditionalApprovalDataArchivedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ConditionalApprovalData`.
"""
type CcbcUserApplicationsByConditionalApprovalDataArchivedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ConditionalApprovalData`.
  """
  conditionalApprovalDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ConditionalApprovalData`."""
    orderBy: [ConditionalApprovalDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConditionalApprovalDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConditionalApprovalDataFilter
  ): ConditionalApprovalDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ConditionalApprovalData`.
"""
type CcbcUserCcbcUsersByConditionalApprovalDataArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ConditionalApprovalData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByConditionalApprovalDataArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ConditionalApprovalData`.
"""
type CcbcUserCcbcUsersByConditionalApprovalDataArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ConditionalApprovalData`.
  """
  conditionalApprovalDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ConditionalApprovalData`."""
    orderBy: [ConditionalApprovalDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConditionalApprovalDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConditionalApprovalDataFilter
  ): ConditionalApprovalDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ConditionalApprovalData`.
"""
type CcbcUserCcbcUsersByConditionalApprovalDataArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ConditionalApprovalData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByConditionalApprovalDataArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ConditionalApprovalData`.
"""
type CcbcUserCcbcUsersByConditionalApprovalDataArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ConditionalApprovalData`.
  """
  conditionalApprovalDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ConditionalApprovalData`."""
    orderBy: [ConditionalApprovalDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConditionalApprovalDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConditionalApprovalDataFilter
  ): ConditionalApprovalDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `GisData`."""
type CcbcUserCcbcUsersByGisDataCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `GisData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByGisDataCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `GisData`."""
type CcbcUserCcbcUsersByGisDataCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `GisData`."""
  gisDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GisData`."""
    orderBy: [GisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GisDataFilter
  ): GisDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `GisData`."""
type CcbcUserCcbcUsersByGisDataCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `GisData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByGisDataCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `GisData`."""
type CcbcUserCcbcUsersByGisDataCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `GisData`."""
  gisDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GisData`."""
    orderBy: [GisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GisDataFilter
  ): GisDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `GisData`."""
type CcbcUserCcbcUsersByGisDataUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `GisData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByGisDataUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `GisData`."""
type CcbcUserCcbcUsersByGisDataUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `GisData`."""
  gisDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GisData`."""
    orderBy: [GisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GisDataFilter
  ): GisDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `GisData`."""
type CcbcUserCcbcUsersByGisDataUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `GisData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByGisDataUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `GisData`."""
type CcbcUserCcbcUsersByGisDataUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `GisData`."""
  gisDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GisData`."""
    orderBy: [GisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GisDataFilter
  ): GisDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `GisData`."""
type CcbcUserCcbcUsersByGisDataArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `GisData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByGisDataArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `GisData`."""
type CcbcUserCcbcUsersByGisDataArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `GisData`."""
  gisDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GisData`."""
    orderBy: [GisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GisDataFilter
  ): GisDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `GisData`."""
type CcbcUserCcbcUsersByGisDataArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `GisData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByGisDataArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `GisData`."""
type CcbcUserCcbcUsersByGisDataArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `GisData`."""
  gisDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GisData`."""
    orderBy: [GisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GisDataFilter
  ): GisDataConnection!
}

"""
A connection to a list of `GisData` values, with data from `ApplicationGisData`.
"""
type CcbcUserGisDataByApplicationGisDataCreatedByAndBatchIdManyToManyConnection {
  """A list of `GisData` objects."""
  nodes: [GisData]!

  """
  A list of edges which contains the `GisData`, info from the `ApplicationGisData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserGisDataByApplicationGisDataCreatedByAndBatchIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GisData` you could get from the connection."""
  totalCount: Int!
}

"""
A `GisData` edge in the connection, with data from `ApplicationGisData`.
"""
type CcbcUserGisDataByApplicationGisDataCreatedByAndBatchIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GisData` at the end of the edge."""
  node: GisData

  """Reads and enables pagination through a set of `ApplicationGisData`."""
  applicationGisDataByBatchId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisDataFilter
  ): ApplicationGisDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationGisData`.
"""
type CcbcUserApplicationsByApplicationGisDataCreatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationGisData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationGisDataCreatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationGisData`.
"""
type CcbcUserApplicationsByApplicationGisDataCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ApplicationGisData`."""
  applicationGisDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisDataFilter
  ): ApplicationGisDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationGisData`.
"""
type CcbcUserCcbcUsersByApplicationGisDataCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationGisData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationGisDataCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationGisData`.
"""
type CcbcUserCcbcUsersByApplicationGisDataCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationGisData`."""
  applicationGisDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisDataFilter
  ): ApplicationGisDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationGisData`.
"""
type CcbcUserCcbcUsersByApplicationGisDataCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationGisData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationGisDataCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationGisData`.
"""
type CcbcUserCcbcUsersByApplicationGisDataCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationGisData`."""
  applicationGisDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisDataFilter
  ): ApplicationGisDataConnection!
}

"""
A connection to a list of `GisData` values, with data from `ApplicationGisData`.
"""
type CcbcUserGisDataByApplicationGisDataUpdatedByAndBatchIdManyToManyConnection {
  """A list of `GisData` objects."""
  nodes: [GisData]!

  """
  A list of edges which contains the `GisData`, info from the `ApplicationGisData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserGisDataByApplicationGisDataUpdatedByAndBatchIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GisData` you could get from the connection."""
  totalCount: Int!
}

"""
A `GisData` edge in the connection, with data from `ApplicationGisData`.
"""
type CcbcUserGisDataByApplicationGisDataUpdatedByAndBatchIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GisData` at the end of the edge."""
  node: GisData

  """Reads and enables pagination through a set of `ApplicationGisData`."""
  applicationGisDataByBatchId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisDataFilter
  ): ApplicationGisDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationGisData`.
"""
type CcbcUserApplicationsByApplicationGisDataUpdatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationGisData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationGisDataUpdatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationGisData`.
"""
type CcbcUserApplicationsByApplicationGisDataUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ApplicationGisData`."""
  applicationGisDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisDataFilter
  ): ApplicationGisDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationGisData`.
"""
type CcbcUserCcbcUsersByApplicationGisDataUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationGisData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationGisDataUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationGisData`.
"""
type CcbcUserCcbcUsersByApplicationGisDataUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationGisData`."""
  applicationGisDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisDataFilter
  ): ApplicationGisDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationGisData`.
"""
type CcbcUserCcbcUsersByApplicationGisDataUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationGisData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationGisDataUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationGisData`.
"""
type CcbcUserCcbcUsersByApplicationGisDataUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationGisData`."""
  applicationGisDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisDataFilter
  ): ApplicationGisDataConnection!
}

"""
A connection to a list of `GisData` values, with data from `ApplicationGisData`.
"""
type CcbcUserGisDataByApplicationGisDataArchivedByAndBatchIdManyToManyConnection {
  """A list of `GisData` objects."""
  nodes: [GisData]!

  """
  A list of edges which contains the `GisData`, info from the `ApplicationGisData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserGisDataByApplicationGisDataArchivedByAndBatchIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GisData` you could get from the connection."""
  totalCount: Int!
}

"""
A `GisData` edge in the connection, with data from `ApplicationGisData`.
"""
type CcbcUserGisDataByApplicationGisDataArchivedByAndBatchIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GisData` at the end of the edge."""
  node: GisData

  """Reads and enables pagination through a set of `ApplicationGisData`."""
  applicationGisDataByBatchId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisDataFilter
  ): ApplicationGisDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationGisData`.
"""
type CcbcUserApplicationsByApplicationGisDataArchivedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationGisData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationGisDataArchivedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationGisData`.
"""
type CcbcUserApplicationsByApplicationGisDataArchivedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ApplicationGisData`."""
  applicationGisDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisDataFilter
  ): ApplicationGisDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationGisData`.
"""
type CcbcUserCcbcUsersByApplicationGisDataArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationGisData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationGisDataArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationGisData`.
"""
type CcbcUserCcbcUsersByApplicationGisDataArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationGisData`."""
  applicationGisDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisDataFilter
  ): ApplicationGisDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationGisData`.
"""
type CcbcUserCcbcUsersByApplicationGisDataArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationGisData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationGisDataArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationGisData`.
"""
type CcbcUserCcbcUsersByApplicationGisDataArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationGisData`."""
  applicationGisDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisDataFilter
  ): ApplicationGisDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Announcement`.
"""
type CcbcUserCcbcUsersByAnnouncementCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Announcement`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAnnouncementCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Announcement`."""
type CcbcUserCcbcUsersByAnnouncementCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Announcement`."""
  announcementsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Announcement`."""
    orderBy: [AnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnnouncementFilter
  ): AnnouncementsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Announcement`.
"""
type CcbcUserCcbcUsersByAnnouncementCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Announcement`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAnnouncementCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Announcement`."""
type CcbcUserCcbcUsersByAnnouncementCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Announcement`."""
  announcementsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Announcement`."""
    orderBy: [AnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnnouncementFilter
  ): AnnouncementsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Announcement`.
"""
type CcbcUserCcbcUsersByAnnouncementUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Announcement`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAnnouncementUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Announcement`."""
type CcbcUserCcbcUsersByAnnouncementUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Announcement`."""
  announcementsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Announcement`."""
    orderBy: [AnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnnouncementFilter
  ): AnnouncementsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Announcement`.
"""
type CcbcUserCcbcUsersByAnnouncementUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Announcement`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAnnouncementUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Announcement`."""
type CcbcUserCcbcUsersByAnnouncementUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Announcement`."""
  announcementsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Announcement`."""
    orderBy: [AnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnnouncementFilter
  ): AnnouncementsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Announcement`.
"""
type CcbcUserCcbcUsersByAnnouncementArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Announcement`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAnnouncementArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Announcement`."""
type CcbcUserCcbcUsersByAnnouncementArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Announcement`."""
  announcementsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Announcement`."""
    orderBy: [AnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnnouncementFilter
  ): AnnouncementsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Announcement`.
"""
type CcbcUserCcbcUsersByAnnouncementArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Announcement`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAnnouncementArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Announcement`."""
type CcbcUserCcbcUsersByAnnouncementArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Announcement`."""
  announcementsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Announcement`."""
    orderBy: [AnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AnnouncementFilter
  ): AnnouncementsConnection!
}

"""
A connection to a list of `Announcement` values, with data from `ApplicationAnnouncement`.
"""
type CcbcUserAnnouncementsByApplicationAnnouncementCreatedByAndAnnouncementIdManyToManyConnection {
  """A list of `Announcement` objects."""
  nodes: [Announcement]!

  """
  A list of edges which contains the `Announcement`, info from the `ApplicationAnnouncement`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserAnnouncementsByApplicationAnnouncementCreatedByAndAnnouncementIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Announcement` you could get from the connection."""
  totalCount: Int!
}

"""
A `Announcement` edge in the connection, with data from `ApplicationAnnouncement`.
"""
type CcbcUserAnnouncementsByApplicationAnnouncementCreatedByAndAnnouncementIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Announcement` at the end of the edge."""
  node: Announcement

  """
  Reads and enables pagination through a set of `ApplicationAnnouncement`.
  """
  applicationAnnouncementsByAnnouncementId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncementFilter
  ): ApplicationAnnouncementsConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationAnnouncement`.
"""
type CcbcUserApplicationsByApplicationAnnouncementCreatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationAnnouncement`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationAnnouncementCreatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationAnnouncement`.
"""
type CcbcUserApplicationsByApplicationAnnouncementCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationAnnouncement`.
  """
  applicationAnnouncementsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncementFilter
  ): ApplicationAnnouncementsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnnouncement`.
"""
type CcbcUserCcbcUsersByApplicationAnnouncementCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnnouncement`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationAnnouncementCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnnouncement`.
"""
type CcbcUserCcbcUsersByApplicationAnnouncementCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnnouncement`.
  """
  applicationAnnouncementsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncementFilter
  ): ApplicationAnnouncementsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnnouncement`.
"""
type CcbcUserCcbcUsersByApplicationAnnouncementCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnnouncement`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationAnnouncementCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnnouncement`.
"""
type CcbcUserCcbcUsersByApplicationAnnouncementCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnnouncement`.
  """
  applicationAnnouncementsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncementFilter
  ): ApplicationAnnouncementsConnection!
}

"""
A connection to a list of `Announcement` values, with data from `ApplicationAnnouncement`.
"""
type CcbcUserAnnouncementsByApplicationAnnouncementUpdatedByAndAnnouncementIdManyToManyConnection {
  """A list of `Announcement` objects."""
  nodes: [Announcement]!

  """
  A list of edges which contains the `Announcement`, info from the `ApplicationAnnouncement`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserAnnouncementsByApplicationAnnouncementUpdatedByAndAnnouncementIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Announcement` you could get from the connection."""
  totalCount: Int!
}

"""
A `Announcement` edge in the connection, with data from `ApplicationAnnouncement`.
"""
type CcbcUserAnnouncementsByApplicationAnnouncementUpdatedByAndAnnouncementIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Announcement` at the end of the edge."""
  node: Announcement

  """
  Reads and enables pagination through a set of `ApplicationAnnouncement`.
  """
  applicationAnnouncementsByAnnouncementId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncementFilter
  ): ApplicationAnnouncementsConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationAnnouncement`.
"""
type CcbcUserApplicationsByApplicationAnnouncementUpdatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationAnnouncement`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationAnnouncementUpdatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationAnnouncement`.
"""
type CcbcUserApplicationsByApplicationAnnouncementUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationAnnouncement`.
  """
  applicationAnnouncementsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncementFilter
  ): ApplicationAnnouncementsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnnouncement`.
"""
type CcbcUserCcbcUsersByApplicationAnnouncementUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnnouncement`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationAnnouncementUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnnouncement`.
"""
type CcbcUserCcbcUsersByApplicationAnnouncementUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnnouncement`.
  """
  applicationAnnouncementsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncementFilter
  ): ApplicationAnnouncementsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnnouncement`.
"""
type CcbcUserCcbcUsersByApplicationAnnouncementUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnnouncement`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationAnnouncementUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnnouncement`.
"""
type CcbcUserCcbcUsersByApplicationAnnouncementUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnnouncement`.
  """
  applicationAnnouncementsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncementFilter
  ): ApplicationAnnouncementsConnection!
}

"""
A connection to a list of `Announcement` values, with data from `ApplicationAnnouncement`.
"""
type CcbcUserAnnouncementsByApplicationAnnouncementArchivedByAndAnnouncementIdManyToManyConnection {
  """A list of `Announcement` objects."""
  nodes: [Announcement]!

  """
  A list of edges which contains the `Announcement`, info from the `ApplicationAnnouncement`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserAnnouncementsByApplicationAnnouncementArchivedByAndAnnouncementIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Announcement` you could get from the connection."""
  totalCount: Int!
}

"""
A `Announcement` edge in the connection, with data from `ApplicationAnnouncement`.
"""
type CcbcUserAnnouncementsByApplicationAnnouncementArchivedByAndAnnouncementIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Announcement` at the end of the edge."""
  node: Announcement

  """
  Reads and enables pagination through a set of `ApplicationAnnouncement`.
  """
  applicationAnnouncementsByAnnouncementId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncementFilter
  ): ApplicationAnnouncementsConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationAnnouncement`.
"""
type CcbcUserApplicationsByApplicationAnnouncementArchivedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationAnnouncement`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationAnnouncementArchivedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationAnnouncement`.
"""
type CcbcUserApplicationsByApplicationAnnouncementArchivedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationAnnouncement`.
  """
  applicationAnnouncementsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncementFilter
  ): ApplicationAnnouncementsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnnouncement`.
"""
type CcbcUserCcbcUsersByApplicationAnnouncementArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnnouncement`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationAnnouncementArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnnouncement`.
"""
type CcbcUserCcbcUsersByApplicationAnnouncementArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnnouncement`.
  """
  applicationAnnouncementsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncementFilter
  ): ApplicationAnnouncementsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnnouncement`.
"""
type CcbcUserCcbcUsersByApplicationAnnouncementArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnnouncement`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationAnnouncementArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnnouncement`.
"""
type CcbcUserCcbcUsersByApplicationAnnouncementArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnnouncement`.
  """
  applicationAnnouncementsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncementFilter
  ): ApplicationAnnouncementsConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationGisAssessmentHh`.
"""
type CcbcUserApplicationsByApplicationGisAssessmentHhCreatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationGisAssessmentHh`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationGisAssessmentHhCreatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationGisAssessmentHh`.
"""
type CcbcUserApplicationsByApplicationGisAssessmentHhCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationGisAssessmentHh`.
  """
  applicationGisAssessmentHhsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisAssessmentHh`."""
    orderBy: [ApplicationGisAssessmentHhsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisAssessmentHhCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisAssessmentHhFilter
  ): ApplicationGisAssessmentHhsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationGisAssessmentHh`.
"""
type CcbcUserCcbcUsersByApplicationGisAssessmentHhCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationGisAssessmentHh`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationGisAssessmentHhCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationGisAssessmentHh`.
"""
type CcbcUserCcbcUsersByApplicationGisAssessmentHhCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationGisAssessmentHh`.
  """
  applicationGisAssessmentHhsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisAssessmentHh`."""
    orderBy: [ApplicationGisAssessmentHhsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisAssessmentHhCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisAssessmentHhFilter
  ): ApplicationGisAssessmentHhsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationGisAssessmentHh`.
"""
type CcbcUserCcbcUsersByApplicationGisAssessmentHhCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationGisAssessmentHh`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationGisAssessmentHhCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationGisAssessmentHh`.
"""
type CcbcUserCcbcUsersByApplicationGisAssessmentHhCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationGisAssessmentHh`.
  """
  applicationGisAssessmentHhsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisAssessmentHh`."""
    orderBy: [ApplicationGisAssessmentHhsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisAssessmentHhCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisAssessmentHhFilter
  ): ApplicationGisAssessmentHhsConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationGisAssessmentHh`.
"""
type CcbcUserApplicationsByApplicationGisAssessmentHhUpdatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationGisAssessmentHh`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationGisAssessmentHhUpdatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationGisAssessmentHh`.
"""
type CcbcUserApplicationsByApplicationGisAssessmentHhUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationGisAssessmentHh`.
  """
  applicationGisAssessmentHhsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisAssessmentHh`."""
    orderBy: [ApplicationGisAssessmentHhsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisAssessmentHhCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisAssessmentHhFilter
  ): ApplicationGisAssessmentHhsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationGisAssessmentHh`.
"""
type CcbcUserCcbcUsersByApplicationGisAssessmentHhUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationGisAssessmentHh`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationGisAssessmentHhUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationGisAssessmentHh`.
"""
type CcbcUserCcbcUsersByApplicationGisAssessmentHhUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationGisAssessmentHh`.
  """
  applicationGisAssessmentHhsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisAssessmentHh`."""
    orderBy: [ApplicationGisAssessmentHhsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisAssessmentHhCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisAssessmentHhFilter
  ): ApplicationGisAssessmentHhsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationGisAssessmentHh`.
"""
type CcbcUserCcbcUsersByApplicationGisAssessmentHhUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationGisAssessmentHh`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationGisAssessmentHhUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationGisAssessmentHh`.
"""
type CcbcUserCcbcUsersByApplicationGisAssessmentHhUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationGisAssessmentHh`.
  """
  applicationGisAssessmentHhsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisAssessmentHh`."""
    orderBy: [ApplicationGisAssessmentHhsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisAssessmentHhCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisAssessmentHhFilter
  ): ApplicationGisAssessmentHhsConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationGisAssessmentHh`.
"""
type CcbcUserApplicationsByApplicationGisAssessmentHhArchivedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationGisAssessmentHh`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationGisAssessmentHhArchivedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationGisAssessmentHh`.
"""
type CcbcUserApplicationsByApplicationGisAssessmentHhArchivedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationGisAssessmentHh`.
  """
  applicationGisAssessmentHhsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisAssessmentHh`."""
    orderBy: [ApplicationGisAssessmentHhsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisAssessmentHhCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisAssessmentHhFilter
  ): ApplicationGisAssessmentHhsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationGisAssessmentHh`.
"""
type CcbcUserCcbcUsersByApplicationGisAssessmentHhArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationGisAssessmentHh`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationGisAssessmentHhArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationGisAssessmentHh`.
"""
type CcbcUserCcbcUsersByApplicationGisAssessmentHhArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationGisAssessmentHh`.
  """
  applicationGisAssessmentHhsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisAssessmentHh`."""
    orderBy: [ApplicationGisAssessmentHhsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisAssessmentHhCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisAssessmentHhFilter
  ): ApplicationGisAssessmentHhsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationGisAssessmentHh`.
"""
type CcbcUserCcbcUsersByApplicationGisAssessmentHhArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationGisAssessmentHh`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationGisAssessmentHhArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationGisAssessmentHh`.
"""
type CcbcUserCcbcUsersByApplicationGisAssessmentHhArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationGisAssessmentHh`.
  """
  applicationGisAssessmentHhsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationGisAssessmentHh`."""
    orderBy: [ApplicationGisAssessmentHhsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationGisAssessmentHhCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationGisAssessmentHhFilter
  ): ApplicationGisAssessmentHhsConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationSowData`.
"""
type CcbcUserApplicationsByApplicationSowDataCreatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationSowData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationSowDataCreatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationSowData`.
"""
type CcbcUserApplicationsByApplicationSowDataCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): ApplicationSowDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationSowData`.
"""
type CcbcUserCcbcUsersByApplicationSowDataCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationSowData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationSowDataCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationSowData`.
"""
type CcbcUserCcbcUsersByApplicationSowDataCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): ApplicationSowDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationSowData`.
"""
type CcbcUserCcbcUsersByApplicationSowDataCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationSowData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationSowDataCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationSowData`.
"""
type CcbcUserCcbcUsersByApplicationSowDataCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): ApplicationSowDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationSowData`.
"""
type CcbcUserApplicationsByApplicationSowDataUpdatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationSowData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationSowDataUpdatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationSowData`.
"""
type CcbcUserApplicationsByApplicationSowDataUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): ApplicationSowDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationSowData`.
"""
type CcbcUserCcbcUsersByApplicationSowDataUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationSowData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationSowDataUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationSowData`.
"""
type CcbcUserCcbcUsersByApplicationSowDataUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): ApplicationSowDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationSowData`.
"""
type CcbcUserCcbcUsersByApplicationSowDataUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationSowData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationSowDataUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationSowData`.
"""
type CcbcUserCcbcUsersByApplicationSowDataUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): ApplicationSowDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationSowData`.
"""
type CcbcUserApplicationsByApplicationSowDataArchivedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationSowData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationSowDataArchivedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationSowData`.
"""
type CcbcUserApplicationsByApplicationSowDataArchivedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): ApplicationSowDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationSowData`.
"""
type CcbcUserCcbcUsersByApplicationSowDataArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationSowData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationSowDataArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationSowData`.
"""
type CcbcUserCcbcUsersByApplicationSowDataArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): ApplicationSowDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationSowData`.
"""
type CcbcUserCcbcUsersByApplicationSowDataArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationSowData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationSowDataArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationSowData`.
"""
type CcbcUserCcbcUsersByApplicationSowDataArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationSowData`."""
  applicationSowDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSowDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationSowDataFilter
  ): ApplicationSowDataConnection!
}

"""
A connection to a list of `ApplicationSowData` values, with data from `SowTab2`.
"""
type CcbcUserApplicationSowDataBySowTab2CreatedByAndSowIdManyToManyConnection {
  """A list of `ApplicationSowData` objects."""
  nodes: [ApplicationSowData]!

  """
  A list of edges which contains the `ApplicationSowData`, info from the `SowTab2`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationSowDataBySowTab2CreatedByAndSowIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationSowData` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ApplicationSowData` edge in the connection, with data from `SowTab2`.
"""
type CcbcUserApplicationSowDataBySowTab2CreatedByAndSowIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationSowData` at the end of the edge."""
  node: ApplicationSowData

  """Reads and enables pagination through a set of `SowTab2`."""
  sowTab2SBySowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab2`."""
    orderBy: [SowTab2SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab2Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab2Filter
  ): SowTab2SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab2`."""
type CcbcUserCcbcUsersBySowTab2CreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab2`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersBySowTab2CreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab2`."""
type CcbcUserCcbcUsersBySowTab2CreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab2`."""
  sowTab2SByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab2`."""
    orderBy: [SowTab2SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab2Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab2Filter
  ): SowTab2SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab2`."""
type CcbcUserCcbcUsersBySowTab2CreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab2`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersBySowTab2CreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab2`."""
type CcbcUserCcbcUsersBySowTab2CreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab2`."""
  sowTab2SByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab2`."""
    orderBy: [SowTab2SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab2Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab2Filter
  ): SowTab2SConnection!
}

"""
A connection to a list of `ApplicationSowData` values, with data from `SowTab2`.
"""
type CcbcUserApplicationSowDataBySowTab2UpdatedByAndSowIdManyToManyConnection {
  """A list of `ApplicationSowData` objects."""
  nodes: [ApplicationSowData]!

  """
  A list of edges which contains the `ApplicationSowData`, info from the `SowTab2`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationSowDataBySowTab2UpdatedByAndSowIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationSowData` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ApplicationSowData` edge in the connection, with data from `SowTab2`.
"""
type CcbcUserApplicationSowDataBySowTab2UpdatedByAndSowIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationSowData` at the end of the edge."""
  node: ApplicationSowData

  """Reads and enables pagination through a set of `SowTab2`."""
  sowTab2SBySowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab2`."""
    orderBy: [SowTab2SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab2Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab2Filter
  ): SowTab2SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab2`."""
type CcbcUserCcbcUsersBySowTab2UpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab2`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersBySowTab2UpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab2`."""
type CcbcUserCcbcUsersBySowTab2UpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab2`."""
  sowTab2SByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab2`."""
    orderBy: [SowTab2SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab2Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab2Filter
  ): SowTab2SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab2`."""
type CcbcUserCcbcUsersBySowTab2UpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab2`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersBySowTab2UpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab2`."""
type CcbcUserCcbcUsersBySowTab2UpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab2`."""
  sowTab2SByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab2`."""
    orderBy: [SowTab2SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab2Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab2Filter
  ): SowTab2SConnection!
}

"""
A connection to a list of `ApplicationSowData` values, with data from `SowTab2`.
"""
type CcbcUserApplicationSowDataBySowTab2ArchivedByAndSowIdManyToManyConnection {
  """A list of `ApplicationSowData` objects."""
  nodes: [ApplicationSowData]!

  """
  A list of edges which contains the `ApplicationSowData`, info from the `SowTab2`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationSowDataBySowTab2ArchivedByAndSowIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationSowData` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ApplicationSowData` edge in the connection, with data from `SowTab2`.
"""
type CcbcUserApplicationSowDataBySowTab2ArchivedByAndSowIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationSowData` at the end of the edge."""
  node: ApplicationSowData

  """Reads and enables pagination through a set of `SowTab2`."""
  sowTab2SBySowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab2`."""
    orderBy: [SowTab2SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab2Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab2Filter
  ): SowTab2SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab2`."""
type CcbcUserCcbcUsersBySowTab2ArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab2`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersBySowTab2ArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab2`."""
type CcbcUserCcbcUsersBySowTab2ArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab2`."""
  sowTab2SByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab2`."""
    orderBy: [SowTab2SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab2Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab2Filter
  ): SowTab2SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab2`."""
type CcbcUserCcbcUsersBySowTab2ArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab2`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersBySowTab2ArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab2`."""
type CcbcUserCcbcUsersBySowTab2ArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab2`."""
  sowTab2SByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab2`."""
    orderBy: [SowTab2SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab2Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab2Filter
  ): SowTab2SConnection!
}

"""
A connection to a list of `ApplicationSowData` values, with data from `SowTab1`.
"""
type CcbcUserApplicationSowDataBySowTab1CreatedByAndSowIdManyToManyConnection {
  """A list of `ApplicationSowData` objects."""
  nodes: [ApplicationSowData]!

  """
  A list of edges which contains the `ApplicationSowData`, info from the `SowTab1`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationSowDataBySowTab1CreatedByAndSowIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationSowData` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ApplicationSowData` edge in the connection, with data from `SowTab1`.
"""
type CcbcUserApplicationSowDataBySowTab1CreatedByAndSowIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationSowData` at the end of the edge."""
  node: ApplicationSowData

  """Reads and enables pagination through a set of `SowTab1`."""
  sowTab1SBySowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab1`."""
    orderBy: [SowTab1SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab1Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab1Filter
  ): SowTab1SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab1`."""
type CcbcUserCcbcUsersBySowTab1CreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab1`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersBySowTab1CreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab1`."""
type CcbcUserCcbcUsersBySowTab1CreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab1`."""
  sowTab1SByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab1`."""
    orderBy: [SowTab1SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab1Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab1Filter
  ): SowTab1SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab1`."""
type CcbcUserCcbcUsersBySowTab1CreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab1`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersBySowTab1CreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab1`."""
type CcbcUserCcbcUsersBySowTab1CreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab1`."""
  sowTab1SByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab1`."""
    orderBy: [SowTab1SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab1Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab1Filter
  ): SowTab1SConnection!
}

"""
A connection to a list of `ApplicationSowData` values, with data from `SowTab1`.
"""
type CcbcUserApplicationSowDataBySowTab1UpdatedByAndSowIdManyToManyConnection {
  """A list of `ApplicationSowData` objects."""
  nodes: [ApplicationSowData]!

  """
  A list of edges which contains the `ApplicationSowData`, info from the `SowTab1`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationSowDataBySowTab1UpdatedByAndSowIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationSowData` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ApplicationSowData` edge in the connection, with data from `SowTab1`.
"""
type CcbcUserApplicationSowDataBySowTab1UpdatedByAndSowIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationSowData` at the end of the edge."""
  node: ApplicationSowData

  """Reads and enables pagination through a set of `SowTab1`."""
  sowTab1SBySowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab1`."""
    orderBy: [SowTab1SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab1Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab1Filter
  ): SowTab1SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab1`."""
type CcbcUserCcbcUsersBySowTab1UpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab1`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersBySowTab1UpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab1`."""
type CcbcUserCcbcUsersBySowTab1UpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab1`."""
  sowTab1SByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab1`."""
    orderBy: [SowTab1SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab1Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab1Filter
  ): SowTab1SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab1`."""
type CcbcUserCcbcUsersBySowTab1UpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab1`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersBySowTab1UpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab1`."""
type CcbcUserCcbcUsersBySowTab1UpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab1`."""
  sowTab1SByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab1`."""
    orderBy: [SowTab1SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab1Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab1Filter
  ): SowTab1SConnection!
}

"""
A connection to a list of `ApplicationSowData` values, with data from `SowTab1`.
"""
type CcbcUserApplicationSowDataBySowTab1ArchivedByAndSowIdManyToManyConnection {
  """A list of `ApplicationSowData` objects."""
  nodes: [ApplicationSowData]!

  """
  A list of edges which contains the `ApplicationSowData`, info from the `SowTab1`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationSowDataBySowTab1ArchivedByAndSowIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationSowData` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ApplicationSowData` edge in the connection, with data from `SowTab1`.
"""
type CcbcUserApplicationSowDataBySowTab1ArchivedByAndSowIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationSowData` at the end of the edge."""
  node: ApplicationSowData

  """Reads and enables pagination through a set of `SowTab1`."""
  sowTab1SBySowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab1`."""
    orderBy: [SowTab1SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab1Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab1Filter
  ): SowTab1SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab1`."""
type CcbcUserCcbcUsersBySowTab1ArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab1`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersBySowTab1ArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab1`."""
type CcbcUserCcbcUsersBySowTab1ArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab1`."""
  sowTab1SByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab1`."""
    orderBy: [SowTab1SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab1Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab1Filter
  ): SowTab1SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab1`."""
type CcbcUserCcbcUsersBySowTab1ArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab1`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersBySowTab1ArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab1`."""
type CcbcUserCcbcUsersBySowTab1ArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab1`."""
  sowTab1SByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab1`."""
    orderBy: [SowTab1SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab1Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab1Filter
  ): SowTab1SConnection!
}

"""
A connection to a list of `Application` values, with data from `ProjectInformationData`.
"""
type CcbcUserApplicationsByProjectInformationDataCreatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ProjectInformationData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByProjectInformationDataCreatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ProjectInformationData`.
"""
type CcbcUserApplicationsByProjectInformationDataCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ProjectInformationData`.
  """
  projectInformationDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProjectInformationData`."""
    orderBy: [ProjectInformationDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectInformationDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectInformationDataFilter
  ): ProjectInformationDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ProjectInformationData`.
"""
type CcbcUserCcbcUsersByProjectInformationDataCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ProjectInformationData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByProjectInformationDataCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ProjectInformationData`.
"""
type CcbcUserCcbcUsersByProjectInformationDataCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ProjectInformationData`.
  """
  projectInformationDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProjectInformationData`."""
    orderBy: [ProjectInformationDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectInformationDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectInformationDataFilter
  ): ProjectInformationDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ProjectInformationData`.
"""
type CcbcUserCcbcUsersByProjectInformationDataCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ProjectInformationData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByProjectInformationDataCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ProjectInformationData`.
"""
type CcbcUserCcbcUsersByProjectInformationDataCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ProjectInformationData`.
  """
  projectInformationDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProjectInformationData`."""
    orderBy: [ProjectInformationDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectInformationDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectInformationDataFilter
  ): ProjectInformationDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ProjectInformationData`.
"""
type CcbcUserApplicationsByProjectInformationDataUpdatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ProjectInformationData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByProjectInformationDataUpdatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ProjectInformationData`.
"""
type CcbcUserApplicationsByProjectInformationDataUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ProjectInformationData`.
  """
  projectInformationDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProjectInformationData`."""
    orderBy: [ProjectInformationDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectInformationDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectInformationDataFilter
  ): ProjectInformationDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ProjectInformationData`.
"""
type CcbcUserCcbcUsersByProjectInformationDataUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ProjectInformationData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByProjectInformationDataUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ProjectInformationData`.
"""
type CcbcUserCcbcUsersByProjectInformationDataUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ProjectInformationData`.
  """
  projectInformationDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProjectInformationData`."""
    orderBy: [ProjectInformationDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectInformationDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectInformationDataFilter
  ): ProjectInformationDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ProjectInformationData`.
"""
type CcbcUserCcbcUsersByProjectInformationDataUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ProjectInformationData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByProjectInformationDataUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ProjectInformationData`.
"""
type CcbcUserCcbcUsersByProjectInformationDataUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ProjectInformationData`.
  """
  projectInformationDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProjectInformationData`."""
    orderBy: [ProjectInformationDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectInformationDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectInformationDataFilter
  ): ProjectInformationDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ProjectInformationData`.
"""
type CcbcUserApplicationsByProjectInformationDataArchivedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ProjectInformationData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByProjectInformationDataArchivedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ProjectInformationData`.
"""
type CcbcUserApplicationsByProjectInformationDataArchivedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ProjectInformationData`.
  """
  projectInformationDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProjectInformationData`."""
    orderBy: [ProjectInformationDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectInformationDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectInformationDataFilter
  ): ProjectInformationDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ProjectInformationData`.
"""
type CcbcUserCcbcUsersByProjectInformationDataArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ProjectInformationData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByProjectInformationDataArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ProjectInformationData`.
"""
type CcbcUserCcbcUsersByProjectInformationDataArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ProjectInformationData`.
  """
  projectInformationDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProjectInformationData`."""
    orderBy: [ProjectInformationDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectInformationDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectInformationDataFilter
  ): ProjectInformationDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ProjectInformationData`.
"""
type CcbcUserCcbcUsersByProjectInformationDataArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ProjectInformationData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByProjectInformationDataArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ProjectInformationData`.
"""
type CcbcUserCcbcUsersByProjectInformationDataArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ProjectInformationData`.
  """
  projectInformationDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProjectInformationData`."""
    orderBy: [ProjectInformationDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectInformationDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectInformationDataFilter
  ): ProjectInformationDataConnection!
}

"""
A connection to a list of `ApplicationSowData` values, with data from `SowTab7`.
"""
type CcbcUserApplicationSowDataBySowTab7CreatedByAndSowIdManyToManyConnection {
  """A list of `ApplicationSowData` objects."""
  nodes: [ApplicationSowData]!

  """
  A list of edges which contains the `ApplicationSowData`, info from the `SowTab7`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationSowDataBySowTab7CreatedByAndSowIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationSowData` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ApplicationSowData` edge in the connection, with data from `SowTab7`.
"""
type CcbcUserApplicationSowDataBySowTab7CreatedByAndSowIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationSowData` at the end of the edge."""
  node: ApplicationSowData

  """Reads and enables pagination through a set of `SowTab7`."""
  sowTab7SBySowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab7`."""
    orderBy: [SowTab7SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab7Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab7Filter
  ): SowTab7SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab7`."""
type CcbcUserCcbcUsersBySowTab7CreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab7`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersBySowTab7CreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab7`."""
type CcbcUserCcbcUsersBySowTab7CreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab7`."""
  sowTab7SByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab7`."""
    orderBy: [SowTab7SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab7Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab7Filter
  ): SowTab7SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab7`."""
type CcbcUserCcbcUsersBySowTab7CreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab7`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersBySowTab7CreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab7`."""
type CcbcUserCcbcUsersBySowTab7CreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab7`."""
  sowTab7SByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab7`."""
    orderBy: [SowTab7SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab7Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab7Filter
  ): SowTab7SConnection!
}

"""
A connection to a list of `ApplicationSowData` values, with data from `SowTab7`.
"""
type CcbcUserApplicationSowDataBySowTab7UpdatedByAndSowIdManyToManyConnection {
  """A list of `ApplicationSowData` objects."""
  nodes: [ApplicationSowData]!

  """
  A list of edges which contains the `ApplicationSowData`, info from the `SowTab7`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationSowDataBySowTab7UpdatedByAndSowIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationSowData` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ApplicationSowData` edge in the connection, with data from `SowTab7`.
"""
type CcbcUserApplicationSowDataBySowTab7UpdatedByAndSowIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationSowData` at the end of the edge."""
  node: ApplicationSowData

  """Reads and enables pagination through a set of `SowTab7`."""
  sowTab7SBySowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab7`."""
    orderBy: [SowTab7SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab7Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab7Filter
  ): SowTab7SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab7`."""
type CcbcUserCcbcUsersBySowTab7UpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab7`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersBySowTab7UpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab7`."""
type CcbcUserCcbcUsersBySowTab7UpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab7`."""
  sowTab7SByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab7`."""
    orderBy: [SowTab7SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab7Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab7Filter
  ): SowTab7SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab7`."""
type CcbcUserCcbcUsersBySowTab7UpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab7`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersBySowTab7UpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab7`."""
type CcbcUserCcbcUsersBySowTab7UpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab7`."""
  sowTab7SByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab7`."""
    orderBy: [SowTab7SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab7Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab7Filter
  ): SowTab7SConnection!
}

"""
A connection to a list of `ApplicationSowData` values, with data from `SowTab7`.
"""
type CcbcUserApplicationSowDataBySowTab7ArchivedByAndSowIdManyToManyConnection {
  """A list of `ApplicationSowData` objects."""
  nodes: [ApplicationSowData]!

  """
  A list of edges which contains the `ApplicationSowData`, info from the `SowTab7`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationSowDataBySowTab7ArchivedByAndSowIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationSowData` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ApplicationSowData` edge in the connection, with data from `SowTab7`.
"""
type CcbcUserApplicationSowDataBySowTab7ArchivedByAndSowIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationSowData` at the end of the edge."""
  node: ApplicationSowData

  """Reads and enables pagination through a set of `SowTab7`."""
  sowTab7SBySowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab7`."""
    orderBy: [SowTab7SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab7Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab7Filter
  ): SowTab7SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab7`."""
type CcbcUserCcbcUsersBySowTab7ArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab7`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersBySowTab7ArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab7`."""
type CcbcUserCcbcUsersBySowTab7ArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab7`."""
  sowTab7SByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab7`."""
    orderBy: [SowTab7SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab7Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab7Filter
  ): SowTab7SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab7`."""
type CcbcUserCcbcUsersBySowTab7ArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab7`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersBySowTab7ArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab7`."""
type CcbcUserCcbcUsersBySowTab7ArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab7`."""
  sowTab7SByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab7`."""
    orderBy: [SowTab7SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab7Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab7Filter
  ): SowTab7SConnection!
}

"""
A connection to a list of `ApplicationSowData` values, with data from `SowTab8`.
"""
type CcbcUserApplicationSowDataBySowTab8CreatedByAndSowIdManyToManyConnection {
  """A list of `ApplicationSowData` objects."""
  nodes: [ApplicationSowData]!

  """
  A list of edges which contains the `ApplicationSowData`, info from the `SowTab8`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationSowDataBySowTab8CreatedByAndSowIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationSowData` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ApplicationSowData` edge in the connection, with data from `SowTab8`.
"""
type CcbcUserApplicationSowDataBySowTab8CreatedByAndSowIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationSowData` at the end of the edge."""
  node: ApplicationSowData

  """Reads and enables pagination through a set of `SowTab8`."""
  sowTab8SBySowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab8`."""
    orderBy: [SowTab8SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab8Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab8Filter
  ): SowTab8SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab8`."""
type CcbcUserCcbcUsersBySowTab8CreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab8`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersBySowTab8CreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab8`."""
type CcbcUserCcbcUsersBySowTab8CreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab8`."""
  sowTab8SByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab8`."""
    orderBy: [SowTab8SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab8Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab8Filter
  ): SowTab8SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab8`."""
type CcbcUserCcbcUsersBySowTab8CreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab8`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersBySowTab8CreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab8`."""
type CcbcUserCcbcUsersBySowTab8CreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab8`."""
  sowTab8SByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab8`."""
    orderBy: [SowTab8SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab8Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab8Filter
  ): SowTab8SConnection!
}

"""
A connection to a list of `ApplicationSowData` values, with data from `SowTab8`.
"""
type CcbcUserApplicationSowDataBySowTab8UpdatedByAndSowIdManyToManyConnection {
  """A list of `ApplicationSowData` objects."""
  nodes: [ApplicationSowData]!

  """
  A list of edges which contains the `ApplicationSowData`, info from the `SowTab8`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationSowDataBySowTab8UpdatedByAndSowIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationSowData` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ApplicationSowData` edge in the connection, with data from `SowTab8`.
"""
type CcbcUserApplicationSowDataBySowTab8UpdatedByAndSowIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationSowData` at the end of the edge."""
  node: ApplicationSowData

  """Reads and enables pagination through a set of `SowTab8`."""
  sowTab8SBySowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab8`."""
    orderBy: [SowTab8SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab8Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab8Filter
  ): SowTab8SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab8`."""
type CcbcUserCcbcUsersBySowTab8UpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab8`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersBySowTab8UpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab8`."""
type CcbcUserCcbcUsersBySowTab8UpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab8`."""
  sowTab8SByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab8`."""
    orderBy: [SowTab8SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab8Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab8Filter
  ): SowTab8SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab8`."""
type CcbcUserCcbcUsersBySowTab8UpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab8`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersBySowTab8UpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab8`."""
type CcbcUserCcbcUsersBySowTab8UpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab8`."""
  sowTab8SByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab8`."""
    orderBy: [SowTab8SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab8Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab8Filter
  ): SowTab8SConnection!
}

"""
A connection to a list of `ApplicationSowData` values, with data from `SowTab8`.
"""
type CcbcUserApplicationSowDataBySowTab8ArchivedByAndSowIdManyToManyConnection {
  """A list of `ApplicationSowData` objects."""
  nodes: [ApplicationSowData]!

  """
  A list of edges which contains the `ApplicationSowData`, info from the `SowTab8`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationSowDataBySowTab8ArchivedByAndSowIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationSowData` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ApplicationSowData` edge in the connection, with data from `SowTab8`.
"""
type CcbcUserApplicationSowDataBySowTab8ArchivedByAndSowIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationSowData` at the end of the edge."""
  node: ApplicationSowData

  """Reads and enables pagination through a set of `SowTab8`."""
  sowTab8SBySowId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab8`."""
    orderBy: [SowTab8SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab8Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab8Filter
  ): SowTab8SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab8`."""
type CcbcUserCcbcUsersBySowTab8ArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab8`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersBySowTab8ArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab8`."""
type CcbcUserCcbcUsersBySowTab8ArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab8`."""
  sowTab8SByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab8`."""
    orderBy: [SowTab8SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab8Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab8Filter
  ): SowTab8SConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `SowTab8`."""
type CcbcUserCcbcUsersBySowTab8ArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `SowTab8`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersBySowTab8ArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `SowTab8`."""
type CcbcUserCcbcUsersBySowTab8ArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `SowTab8`."""
  sowTab8SByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SowTab8`."""
    orderBy: [SowTab8SOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SowTab8Condition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SowTab8Filter
  ): SowTab8SConnection!
}

"""
A connection to a list of `Application` values, with data from `ChangeRequestData`.
"""
type CcbcUserApplicationsByChangeRequestDataCreatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ChangeRequestData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByChangeRequestDataCreatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ChangeRequestData`.
"""
type CcbcUserApplicationsByChangeRequestDataCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ChangeRequestData`."""
  changeRequestDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChangeRequestData`."""
    orderBy: [ChangeRequestDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeRequestDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeRequestDataFilter
  ): ChangeRequestDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ChangeRequestData`.
"""
type CcbcUserCcbcUsersByChangeRequestDataCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ChangeRequestData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByChangeRequestDataCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ChangeRequestData`.
"""
type CcbcUserCcbcUsersByChangeRequestDataCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ChangeRequestData`."""
  changeRequestDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChangeRequestData`."""
    orderBy: [ChangeRequestDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeRequestDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeRequestDataFilter
  ): ChangeRequestDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ChangeRequestData`.
"""
type CcbcUserCcbcUsersByChangeRequestDataCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ChangeRequestData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByChangeRequestDataCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ChangeRequestData`.
"""
type CcbcUserCcbcUsersByChangeRequestDataCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ChangeRequestData`."""
  changeRequestDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChangeRequestData`."""
    orderBy: [ChangeRequestDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeRequestDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeRequestDataFilter
  ): ChangeRequestDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ChangeRequestData`.
"""
type CcbcUserApplicationsByChangeRequestDataUpdatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ChangeRequestData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByChangeRequestDataUpdatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ChangeRequestData`.
"""
type CcbcUserApplicationsByChangeRequestDataUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ChangeRequestData`."""
  changeRequestDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChangeRequestData`."""
    orderBy: [ChangeRequestDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeRequestDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeRequestDataFilter
  ): ChangeRequestDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ChangeRequestData`.
"""
type CcbcUserCcbcUsersByChangeRequestDataUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ChangeRequestData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByChangeRequestDataUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ChangeRequestData`.
"""
type CcbcUserCcbcUsersByChangeRequestDataUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ChangeRequestData`."""
  changeRequestDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChangeRequestData`."""
    orderBy: [ChangeRequestDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeRequestDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeRequestDataFilter
  ): ChangeRequestDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ChangeRequestData`.
"""
type CcbcUserCcbcUsersByChangeRequestDataUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ChangeRequestData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByChangeRequestDataUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ChangeRequestData`.
"""
type CcbcUserCcbcUsersByChangeRequestDataUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ChangeRequestData`."""
  changeRequestDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChangeRequestData`."""
    orderBy: [ChangeRequestDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeRequestDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeRequestDataFilter
  ): ChangeRequestDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ChangeRequestData`.
"""
type CcbcUserApplicationsByChangeRequestDataArchivedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ChangeRequestData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByChangeRequestDataArchivedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ChangeRequestData`.
"""
type CcbcUserApplicationsByChangeRequestDataArchivedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ChangeRequestData`."""
  changeRequestDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChangeRequestData`."""
    orderBy: [ChangeRequestDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeRequestDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeRequestDataFilter
  ): ChangeRequestDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ChangeRequestData`.
"""
type CcbcUserCcbcUsersByChangeRequestDataArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ChangeRequestData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByChangeRequestDataArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ChangeRequestData`.
"""
type CcbcUserCcbcUsersByChangeRequestDataArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ChangeRequestData`."""
  changeRequestDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChangeRequestData`."""
    orderBy: [ChangeRequestDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeRequestDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeRequestDataFilter
  ): ChangeRequestDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ChangeRequestData`.
"""
type CcbcUserCcbcUsersByChangeRequestDataArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ChangeRequestData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByChangeRequestDataArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ChangeRequestData`.
"""
type CcbcUserCcbcUsersByChangeRequestDataArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ChangeRequestData`."""
  changeRequestDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChangeRequestData`."""
    orderBy: [ChangeRequestDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeRequestDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeRequestDataFilter
  ): ChangeRequestDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationCommunityProgressReportData`.
"""
type CcbcUserApplicationsByApplicationCommunityProgressReportDataCreatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationCommunityProgressReportData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationCommunityProgressReportDataCreatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationCommunityProgressReportData`.
"""
type CcbcUserApplicationsByApplicationCommunityProgressReportDataCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationCommunityProgressReportData`.
  """
  applicationCommunityProgressReportDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    The method to use when ordering `ApplicationCommunityProgressReportData`.
    """
    orderBy: [ApplicationCommunityProgressReportDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityProgressReportDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityProgressReportDataFilter
  ): ApplicationCommunityProgressReportDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationCommunityProgressReportData`.
"""
type CcbcUserCcbcUsersByApplicationCommunityProgressReportDataCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationCommunityProgressReportData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationCommunityProgressReportDataCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationCommunityProgressReportData`.
"""
type CcbcUserCcbcUsersByApplicationCommunityProgressReportDataCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationCommunityProgressReportData`.
  """
  applicationCommunityProgressReportDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    The method to use when ordering `ApplicationCommunityProgressReportData`.
    """
    orderBy: [ApplicationCommunityProgressReportDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityProgressReportDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityProgressReportDataFilter
  ): ApplicationCommunityProgressReportDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationCommunityProgressReportData`.
"""
type CcbcUserCcbcUsersByApplicationCommunityProgressReportDataCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationCommunityProgressReportData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationCommunityProgressReportDataCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationCommunityProgressReportData`.
"""
type CcbcUserCcbcUsersByApplicationCommunityProgressReportDataCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationCommunityProgressReportData`.
  """
  applicationCommunityProgressReportDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    The method to use when ordering `ApplicationCommunityProgressReportData`.
    """
    orderBy: [ApplicationCommunityProgressReportDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityProgressReportDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityProgressReportDataFilter
  ): ApplicationCommunityProgressReportDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationCommunityProgressReportData`.
"""
type CcbcUserApplicationsByApplicationCommunityProgressReportDataUpdatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationCommunityProgressReportData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationCommunityProgressReportDataUpdatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationCommunityProgressReportData`.
"""
type CcbcUserApplicationsByApplicationCommunityProgressReportDataUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationCommunityProgressReportData`.
  """
  applicationCommunityProgressReportDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    The method to use when ordering `ApplicationCommunityProgressReportData`.
    """
    orderBy: [ApplicationCommunityProgressReportDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityProgressReportDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityProgressReportDataFilter
  ): ApplicationCommunityProgressReportDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationCommunityProgressReportData`.
"""
type CcbcUserCcbcUsersByApplicationCommunityProgressReportDataUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationCommunityProgressReportData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationCommunityProgressReportDataUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationCommunityProgressReportData`.
"""
type CcbcUserCcbcUsersByApplicationCommunityProgressReportDataUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationCommunityProgressReportData`.
  """
  applicationCommunityProgressReportDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    The method to use when ordering `ApplicationCommunityProgressReportData`.
    """
    orderBy: [ApplicationCommunityProgressReportDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityProgressReportDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityProgressReportDataFilter
  ): ApplicationCommunityProgressReportDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationCommunityProgressReportData`.
"""
type CcbcUserCcbcUsersByApplicationCommunityProgressReportDataUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationCommunityProgressReportData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationCommunityProgressReportDataUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationCommunityProgressReportData`.
"""
type CcbcUserCcbcUsersByApplicationCommunityProgressReportDataUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationCommunityProgressReportData`.
  """
  applicationCommunityProgressReportDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    The method to use when ordering `ApplicationCommunityProgressReportData`.
    """
    orderBy: [ApplicationCommunityProgressReportDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityProgressReportDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityProgressReportDataFilter
  ): ApplicationCommunityProgressReportDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationCommunityProgressReportData`.
"""
type CcbcUserApplicationsByApplicationCommunityProgressReportDataArchivedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationCommunityProgressReportData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationCommunityProgressReportDataArchivedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationCommunityProgressReportData`.
"""
type CcbcUserApplicationsByApplicationCommunityProgressReportDataArchivedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationCommunityProgressReportData`.
  """
  applicationCommunityProgressReportDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    The method to use when ordering `ApplicationCommunityProgressReportData`.
    """
    orderBy: [ApplicationCommunityProgressReportDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityProgressReportDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityProgressReportDataFilter
  ): ApplicationCommunityProgressReportDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationCommunityProgressReportData`.
"""
type CcbcUserCcbcUsersByApplicationCommunityProgressReportDataArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationCommunityProgressReportData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationCommunityProgressReportDataArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationCommunityProgressReportData`.
"""
type CcbcUserCcbcUsersByApplicationCommunityProgressReportDataArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationCommunityProgressReportData`.
  """
  applicationCommunityProgressReportDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    The method to use when ordering `ApplicationCommunityProgressReportData`.
    """
    orderBy: [ApplicationCommunityProgressReportDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityProgressReportDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityProgressReportDataFilter
  ): ApplicationCommunityProgressReportDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationCommunityProgressReportData`.
"""
type CcbcUserCcbcUsersByApplicationCommunityProgressReportDataArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationCommunityProgressReportData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationCommunityProgressReportDataArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationCommunityProgressReportData`.
"""
type CcbcUserCcbcUsersByApplicationCommunityProgressReportDataArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationCommunityProgressReportData`.
  """
  applicationCommunityProgressReportDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """
    The method to use when ordering `ApplicationCommunityProgressReportData`.
    """
    orderBy: [ApplicationCommunityProgressReportDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityProgressReportDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityProgressReportDataFilter
  ): ApplicationCommunityProgressReportDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationCommunityReportExcelData`.
"""
type CcbcUserApplicationsByApplicationCommunityReportExcelDataCreatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationCommunityReportExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationCommunityReportExcelDataCreatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationCommunityReportExcelData`.
"""
type CcbcUserApplicationsByApplicationCommunityReportExcelDataCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationCommunityReportExcelData`.
  """
  applicationCommunityReportExcelDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationCommunityReportExcelData`."""
    orderBy: [ApplicationCommunityReportExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityReportExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityReportExcelDataFilter
  ): ApplicationCommunityReportExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationCommunityReportExcelData`.
"""
type CcbcUserCcbcUsersByApplicationCommunityReportExcelDataCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationCommunityReportExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationCommunityReportExcelDataCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationCommunityReportExcelData`.
"""
type CcbcUserCcbcUsersByApplicationCommunityReportExcelDataCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationCommunityReportExcelData`.
  """
  applicationCommunityReportExcelDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationCommunityReportExcelData`."""
    orderBy: [ApplicationCommunityReportExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityReportExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityReportExcelDataFilter
  ): ApplicationCommunityReportExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationCommunityReportExcelData`.
"""
type CcbcUserCcbcUsersByApplicationCommunityReportExcelDataCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationCommunityReportExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationCommunityReportExcelDataCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationCommunityReportExcelData`.
"""
type CcbcUserCcbcUsersByApplicationCommunityReportExcelDataCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationCommunityReportExcelData`.
  """
  applicationCommunityReportExcelDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationCommunityReportExcelData`."""
    orderBy: [ApplicationCommunityReportExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityReportExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityReportExcelDataFilter
  ): ApplicationCommunityReportExcelDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationCommunityReportExcelData`.
"""
type CcbcUserApplicationsByApplicationCommunityReportExcelDataUpdatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationCommunityReportExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationCommunityReportExcelDataUpdatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationCommunityReportExcelData`.
"""
type CcbcUserApplicationsByApplicationCommunityReportExcelDataUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationCommunityReportExcelData`.
  """
  applicationCommunityReportExcelDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationCommunityReportExcelData`."""
    orderBy: [ApplicationCommunityReportExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityReportExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityReportExcelDataFilter
  ): ApplicationCommunityReportExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationCommunityReportExcelData`.
"""
type CcbcUserCcbcUsersByApplicationCommunityReportExcelDataUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationCommunityReportExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationCommunityReportExcelDataUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationCommunityReportExcelData`.
"""
type CcbcUserCcbcUsersByApplicationCommunityReportExcelDataUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationCommunityReportExcelData`.
  """
  applicationCommunityReportExcelDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationCommunityReportExcelData`."""
    orderBy: [ApplicationCommunityReportExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityReportExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityReportExcelDataFilter
  ): ApplicationCommunityReportExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationCommunityReportExcelData`.
"""
type CcbcUserCcbcUsersByApplicationCommunityReportExcelDataUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationCommunityReportExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationCommunityReportExcelDataUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationCommunityReportExcelData`.
"""
type CcbcUserCcbcUsersByApplicationCommunityReportExcelDataUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationCommunityReportExcelData`.
  """
  applicationCommunityReportExcelDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationCommunityReportExcelData`."""
    orderBy: [ApplicationCommunityReportExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityReportExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityReportExcelDataFilter
  ): ApplicationCommunityReportExcelDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationCommunityReportExcelData`.
"""
type CcbcUserApplicationsByApplicationCommunityReportExcelDataArchivedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationCommunityReportExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationCommunityReportExcelDataArchivedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationCommunityReportExcelData`.
"""
type CcbcUserApplicationsByApplicationCommunityReportExcelDataArchivedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationCommunityReportExcelData`.
  """
  applicationCommunityReportExcelDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationCommunityReportExcelData`."""
    orderBy: [ApplicationCommunityReportExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityReportExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityReportExcelDataFilter
  ): ApplicationCommunityReportExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationCommunityReportExcelData`.
"""
type CcbcUserCcbcUsersByApplicationCommunityReportExcelDataArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationCommunityReportExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationCommunityReportExcelDataArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationCommunityReportExcelData`.
"""
type CcbcUserCcbcUsersByApplicationCommunityReportExcelDataArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationCommunityReportExcelData`.
  """
  applicationCommunityReportExcelDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationCommunityReportExcelData`."""
    orderBy: [ApplicationCommunityReportExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityReportExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityReportExcelDataFilter
  ): ApplicationCommunityReportExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationCommunityReportExcelData`.
"""
type CcbcUserCcbcUsersByApplicationCommunityReportExcelDataArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationCommunityReportExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationCommunityReportExcelDataArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationCommunityReportExcelData`.
"""
type CcbcUserCcbcUsersByApplicationCommunityReportExcelDataArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationCommunityReportExcelData`.
  """
  applicationCommunityReportExcelDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationCommunityReportExcelData`."""
    orderBy: [ApplicationCommunityReportExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCommunityReportExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationCommunityReportExcelDataFilter
  ): ApplicationCommunityReportExcelDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationClaimsData`.
"""
type CcbcUserApplicationsByApplicationClaimsDataCreatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationClaimsData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationClaimsDataCreatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationClaimsData`.
"""
type CcbcUserApplicationsByApplicationClaimsDataCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ApplicationClaimsData`."""
  applicationClaimsDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsData`."""
    orderBy: [ApplicationClaimsDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsDataFilter
  ): ApplicationClaimsDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationClaimsData`.
"""
type CcbcUserCcbcUsersByApplicationClaimsDataCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationClaimsData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationClaimsDataCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationClaimsData`.
"""
type CcbcUserCcbcUsersByApplicationClaimsDataCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationClaimsData`."""
  applicationClaimsDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsData`."""
    orderBy: [ApplicationClaimsDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsDataFilter
  ): ApplicationClaimsDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationClaimsData`.
"""
type CcbcUserCcbcUsersByApplicationClaimsDataCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationClaimsData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationClaimsDataCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationClaimsData`.
"""
type CcbcUserCcbcUsersByApplicationClaimsDataCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationClaimsData`."""
  applicationClaimsDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsData`."""
    orderBy: [ApplicationClaimsDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsDataFilter
  ): ApplicationClaimsDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationClaimsData`.
"""
type CcbcUserApplicationsByApplicationClaimsDataUpdatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationClaimsData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationClaimsDataUpdatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationClaimsData`.
"""
type CcbcUserApplicationsByApplicationClaimsDataUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ApplicationClaimsData`."""
  applicationClaimsDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsData`."""
    orderBy: [ApplicationClaimsDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsDataFilter
  ): ApplicationClaimsDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationClaimsData`.
"""
type CcbcUserCcbcUsersByApplicationClaimsDataUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationClaimsData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationClaimsDataUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationClaimsData`.
"""
type CcbcUserCcbcUsersByApplicationClaimsDataUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationClaimsData`."""
  applicationClaimsDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsData`."""
    orderBy: [ApplicationClaimsDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsDataFilter
  ): ApplicationClaimsDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationClaimsData`.
"""
type CcbcUserCcbcUsersByApplicationClaimsDataUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationClaimsData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationClaimsDataUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationClaimsData`.
"""
type CcbcUserCcbcUsersByApplicationClaimsDataUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationClaimsData`."""
  applicationClaimsDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsData`."""
    orderBy: [ApplicationClaimsDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsDataFilter
  ): ApplicationClaimsDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationClaimsData`.
"""
type CcbcUserApplicationsByApplicationClaimsDataArchivedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationClaimsData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationClaimsDataArchivedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationClaimsData`.
"""
type CcbcUserApplicationsByApplicationClaimsDataArchivedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ApplicationClaimsData`."""
  applicationClaimsDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsData`."""
    orderBy: [ApplicationClaimsDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsDataFilter
  ): ApplicationClaimsDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationClaimsData`.
"""
type CcbcUserCcbcUsersByApplicationClaimsDataArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationClaimsData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationClaimsDataArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationClaimsData`.
"""
type CcbcUserCcbcUsersByApplicationClaimsDataArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationClaimsData`."""
  applicationClaimsDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsData`."""
    orderBy: [ApplicationClaimsDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsDataFilter
  ): ApplicationClaimsDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationClaimsData`.
"""
type CcbcUserCcbcUsersByApplicationClaimsDataArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationClaimsData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationClaimsDataArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationClaimsData`.
"""
type CcbcUserCcbcUsersByApplicationClaimsDataArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationClaimsData`."""
  applicationClaimsDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsData`."""
    orderBy: [ApplicationClaimsDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsDataFilter
  ): ApplicationClaimsDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationClaimsExcelData`.
"""
type CcbcUserApplicationsByApplicationClaimsExcelDataCreatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationClaimsExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationClaimsExcelDataCreatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationClaimsExcelData`.
"""
type CcbcUserApplicationsByApplicationClaimsExcelDataCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationClaimsExcelData`.
  """
  applicationClaimsExcelDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsExcelData`."""
    orderBy: [ApplicationClaimsExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsExcelDataFilter
  ): ApplicationClaimsExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationClaimsExcelData`.
"""
type CcbcUserCcbcUsersByApplicationClaimsExcelDataCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationClaimsExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationClaimsExcelDataCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationClaimsExcelData`.
"""
type CcbcUserCcbcUsersByApplicationClaimsExcelDataCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationClaimsExcelData`.
  """
  applicationClaimsExcelDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsExcelData`."""
    orderBy: [ApplicationClaimsExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsExcelDataFilter
  ): ApplicationClaimsExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationClaimsExcelData`.
"""
type CcbcUserCcbcUsersByApplicationClaimsExcelDataCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationClaimsExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationClaimsExcelDataCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationClaimsExcelData`.
"""
type CcbcUserCcbcUsersByApplicationClaimsExcelDataCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationClaimsExcelData`.
  """
  applicationClaimsExcelDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsExcelData`."""
    orderBy: [ApplicationClaimsExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsExcelDataFilter
  ): ApplicationClaimsExcelDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationClaimsExcelData`.
"""
type CcbcUserApplicationsByApplicationClaimsExcelDataUpdatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationClaimsExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationClaimsExcelDataUpdatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationClaimsExcelData`.
"""
type CcbcUserApplicationsByApplicationClaimsExcelDataUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationClaimsExcelData`.
  """
  applicationClaimsExcelDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsExcelData`."""
    orderBy: [ApplicationClaimsExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsExcelDataFilter
  ): ApplicationClaimsExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationClaimsExcelData`.
"""
type CcbcUserCcbcUsersByApplicationClaimsExcelDataUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationClaimsExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationClaimsExcelDataUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationClaimsExcelData`.
"""
type CcbcUserCcbcUsersByApplicationClaimsExcelDataUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationClaimsExcelData`.
  """
  applicationClaimsExcelDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsExcelData`."""
    orderBy: [ApplicationClaimsExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsExcelDataFilter
  ): ApplicationClaimsExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationClaimsExcelData`.
"""
type CcbcUserCcbcUsersByApplicationClaimsExcelDataUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationClaimsExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationClaimsExcelDataUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationClaimsExcelData`.
"""
type CcbcUserCcbcUsersByApplicationClaimsExcelDataUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationClaimsExcelData`.
  """
  applicationClaimsExcelDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsExcelData`."""
    orderBy: [ApplicationClaimsExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsExcelDataFilter
  ): ApplicationClaimsExcelDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationClaimsExcelData`.
"""
type CcbcUserApplicationsByApplicationClaimsExcelDataArchivedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationClaimsExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationClaimsExcelDataArchivedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationClaimsExcelData`.
"""
type CcbcUserApplicationsByApplicationClaimsExcelDataArchivedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationClaimsExcelData`.
  """
  applicationClaimsExcelDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsExcelData`."""
    orderBy: [ApplicationClaimsExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsExcelDataFilter
  ): ApplicationClaimsExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationClaimsExcelData`.
"""
type CcbcUserCcbcUsersByApplicationClaimsExcelDataArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationClaimsExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationClaimsExcelDataArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationClaimsExcelData`.
"""
type CcbcUserCcbcUsersByApplicationClaimsExcelDataArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationClaimsExcelData`.
  """
  applicationClaimsExcelDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsExcelData`."""
    orderBy: [ApplicationClaimsExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsExcelDataFilter
  ): ApplicationClaimsExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationClaimsExcelData`.
"""
type CcbcUserCcbcUsersByApplicationClaimsExcelDataArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationClaimsExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationClaimsExcelDataArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationClaimsExcelData`.
"""
type CcbcUserCcbcUsersByApplicationClaimsExcelDataArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationClaimsExcelData`.
  """
  applicationClaimsExcelDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationClaimsExcelData`."""
    orderBy: [ApplicationClaimsExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationClaimsExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationClaimsExcelDataFilter
  ): ApplicationClaimsExcelDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationMilestoneData`.
"""
type CcbcUserApplicationsByApplicationMilestoneDataCreatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationMilestoneData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationMilestoneDataCreatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationMilestoneData`.
"""
type CcbcUserApplicationsByApplicationMilestoneDataCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationMilestoneData`.
  """
  applicationMilestoneDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneData`."""
    orderBy: [ApplicationMilestoneDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneDataFilter
  ): ApplicationMilestoneDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationMilestoneData`.
"""
type CcbcUserCcbcUsersByApplicationMilestoneDataCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationMilestoneData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationMilestoneDataCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationMilestoneData`.
"""
type CcbcUserCcbcUsersByApplicationMilestoneDataCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationMilestoneData`.
  """
  applicationMilestoneDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneData`."""
    orderBy: [ApplicationMilestoneDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneDataFilter
  ): ApplicationMilestoneDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationMilestoneData`.
"""
type CcbcUserCcbcUsersByApplicationMilestoneDataCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationMilestoneData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationMilestoneDataCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationMilestoneData`.
"""
type CcbcUserCcbcUsersByApplicationMilestoneDataCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationMilestoneData`.
  """
  applicationMilestoneDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneData`."""
    orderBy: [ApplicationMilestoneDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneDataFilter
  ): ApplicationMilestoneDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationMilestoneData`.
"""
type CcbcUserApplicationsByApplicationMilestoneDataUpdatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationMilestoneData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationMilestoneDataUpdatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationMilestoneData`.
"""
type CcbcUserApplicationsByApplicationMilestoneDataUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationMilestoneData`.
  """
  applicationMilestoneDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneData`."""
    orderBy: [ApplicationMilestoneDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneDataFilter
  ): ApplicationMilestoneDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationMilestoneData`.
"""
type CcbcUserCcbcUsersByApplicationMilestoneDataUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationMilestoneData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationMilestoneDataUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationMilestoneData`.
"""
type CcbcUserCcbcUsersByApplicationMilestoneDataUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationMilestoneData`.
  """
  applicationMilestoneDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneData`."""
    orderBy: [ApplicationMilestoneDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneDataFilter
  ): ApplicationMilestoneDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationMilestoneData`.
"""
type CcbcUserCcbcUsersByApplicationMilestoneDataUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationMilestoneData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationMilestoneDataUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationMilestoneData`.
"""
type CcbcUserCcbcUsersByApplicationMilestoneDataUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationMilestoneData`.
  """
  applicationMilestoneDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneData`."""
    orderBy: [ApplicationMilestoneDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneDataFilter
  ): ApplicationMilestoneDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationMilestoneData`.
"""
type CcbcUserApplicationsByApplicationMilestoneDataArchivedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationMilestoneData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationMilestoneDataArchivedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationMilestoneData`.
"""
type CcbcUserApplicationsByApplicationMilestoneDataArchivedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationMilestoneData`.
  """
  applicationMilestoneDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneData`."""
    orderBy: [ApplicationMilestoneDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneDataFilter
  ): ApplicationMilestoneDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationMilestoneData`.
"""
type CcbcUserCcbcUsersByApplicationMilestoneDataArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationMilestoneData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationMilestoneDataArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationMilestoneData`.
"""
type CcbcUserCcbcUsersByApplicationMilestoneDataArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationMilestoneData`.
  """
  applicationMilestoneDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneData`."""
    orderBy: [ApplicationMilestoneDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneDataFilter
  ): ApplicationMilestoneDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationMilestoneData`.
"""
type CcbcUserCcbcUsersByApplicationMilestoneDataArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationMilestoneData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationMilestoneDataArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationMilestoneData`.
"""
type CcbcUserCcbcUsersByApplicationMilestoneDataArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationMilestoneData`.
  """
  applicationMilestoneDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneData`."""
    orderBy: [ApplicationMilestoneDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneDataFilter
  ): ApplicationMilestoneDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationMilestoneExcelData`.
"""
type CcbcUserApplicationsByApplicationMilestoneExcelDataCreatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationMilestoneExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationMilestoneExcelDataCreatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationMilestoneExcelData`.
"""
type CcbcUserApplicationsByApplicationMilestoneExcelDataCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationMilestoneExcelData`.
  """
  applicationMilestoneExcelDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneExcelData`."""
    orderBy: [ApplicationMilestoneExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneExcelDataFilter
  ): ApplicationMilestoneExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationMilestoneExcelData`.
"""
type CcbcUserCcbcUsersByApplicationMilestoneExcelDataCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationMilestoneExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationMilestoneExcelDataCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationMilestoneExcelData`.
"""
type CcbcUserCcbcUsersByApplicationMilestoneExcelDataCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationMilestoneExcelData`.
  """
  applicationMilestoneExcelDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneExcelData`."""
    orderBy: [ApplicationMilestoneExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneExcelDataFilter
  ): ApplicationMilestoneExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationMilestoneExcelData`.
"""
type CcbcUserCcbcUsersByApplicationMilestoneExcelDataCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationMilestoneExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationMilestoneExcelDataCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationMilestoneExcelData`.
"""
type CcbcUserCcbcUsersByApplicationMilestoneExcelDataCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationMilestoneExcelData`.
  """
  applicationMilestoneExcelDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneExcelData`."""
    orderBy: [ApplicationMilestoneExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneExcelDataFilter
  ): ApplicationMilestoneExcelDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationMilestoneExcelData`.
"""
type CcbcUserApplicationsByApplicationMilestoneExcelDataUpdatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationMilestoneExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationMilestoneExcelDataUpdatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationMilestoneExcelData`.
"""
type CcbcUserApplicationsByApplicationMilestoneExcelDataUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationMilestoneExcelData`.
  """
  applicationMilestoneExcelDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneExcelData`."""
    orderBy: [ApplicationMilestoneExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneExcelDataFilter
  ): ApplicationMilestoneExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationMilestoneExcelData`.
"""
type CcbcUserCcbcUsersByApplicationMilestoneExcelDataUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationMilestoneExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationMilestoneExcelDataUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationMilestoneExcelData`.
"""
type CcbcUserCcbcUsersByApplicationMilestoneExcelDataUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationMilestoneExcelData`.
  """
  applicationMilestoneExcelDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneExcelData`."""
    orderBy: [ApplicationMilestoneExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneExcelDataFilter
  ): ApplicationMilestoneExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationMilestoneExcelData`.
"""
type CcbcUserCcbcUsersByApplicationMilestoneExcelDataUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationMilestoneExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationMilestoneExcelDataUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationMilestoneExcelData`.
"""
type CcbcUserCcbcUsersByApplicationMilestoneExcelDataUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationMilestoneExcelData`.
  """
  applicationMilestoneExcelDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneExcelData`."""
    orderBy: [ApplicationMilestoneExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneExcelDataFilter
  ): ApplicationMilestoneExcelDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationMilestoneExcelData`.
"""
type CcbcUserApplicationsByApplicationMilestoneExcelDataArchivedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationMilestoneExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationMilestoneExcelDataArchivedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationMilestoneExcelData`.
"""
type CcbcUserApplicationsByApplicationMilestoneExcelDataArchivedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationMilestoneExcelData`.
  """
  applicationMilestoneExcelDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneExcelData`."""
    orderBy: [ApplicationMilestoneExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneExcelDataFilter
  ): ApplicationMilestoneExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationMilestoneExcelData`.
"""
type CcbcUserCcbcUsersByApplicationMilestoneExcelDataArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationMilestoneExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationMilestoneExcelDataArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationMilestoneExcelData`.
"""
type CcbcUserCcbcUsersByApplicationMilestoneExcelDataArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationMilestoneExcelData`.
  """
  applicationMilestoneExcelDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneExcelData`."""
    orderBy: [ApplicationMilestoneExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneExcelDataFilter
  ): ApplicationMilestoneExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationMilestoneExcelData`.
"""
type CcbcUserCcbcUsersByApplicationMilestoneExcelDataArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationMilestoneExcelData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationMilestoneExcelDataArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationMilestoneExcelData`.
"""
type CcbcUserCcbcUsersByApplicationMilestoneExcelDataArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationMilestoneExcelData`.
  """
  applicationMilestoneExcelDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationMilestoneExcelData`."""
    orderBy: [ApplicationMilestoneExcelDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationMilestoneExcelDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationMilestoneExcelDataFilter
  ): ApplicationMilestoneExcelDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcProject`.
"""
type CcbcUserCcbcUsersByCbcProjectCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcProject`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcProjectCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CbcProject`."""
type CcbcUserCcbcUsersByCbcProjectCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcProject`."""
  cbcProjectsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProject`."""
    orderBy: [CbcProjectsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectFilter
  ): CbcProjectsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcProject`.
"""
type CcbcUserCcbcUsersByCbcProjectCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcProject`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcProjectCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CbcProject`."""
type CcbcUserCcbcUsersByCbcProjectCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcProject`."""
  cbcProjectsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProject`."""
    orderBy: [CbcProjectsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectFilter
  ): CbcProjectsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcProject`.
"""
type CcbcUserCcbcUsersByCbcProjectUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcProject`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcProjectUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CbcProject`."""
type CcbcUserCcbcUsersByCbcProjectUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcProject`."""
  cbcProjectsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProject`."""
    orderBy: [CbcProjectsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectFilter
  ): CbcProjectsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcProject`.
"""
type CcbcUserCcbcUsersByCbcProjectUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcProject`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcProjectUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CbcProject`."""
type CcbcUserCcbcUsersByCbcProjectUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcProject`."""
  cbcProjectsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProject`."""
    orderBy: [CbcProjectsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectFilter
  ): CbcProjectsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcProject`.
"""
type CcbcUserCcbcUsersByCbcProjectArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcProject`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcProjectArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CbcProject`."""
type CcbcUserCcbcUsersByCbcProjectArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcProject`."""
  cbcProjectsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProject`."""
    orderBy: [CbcProjectsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectFilter
  ): CbcProjectsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcProject`.
"""
type CcbcUserCcbcUsersByCbcProjectArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcProject`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcProjectArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CbcProject`."""
type CcbcUserCcbcUsersByCbcProjectArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcProject`."""
  cbcProjectsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProject`."""
    orderBy: [CbcProjectsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectFilter
  ): CbcProjectsConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationInternalDescription`.
"""
type CcbcUserApplicationsByApplicationInternalDescriptionCreatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationInternalDescription`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationInternalDescriptionCreatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationInternalDescription`.
"""
type CcbcUserApplicationsByApplicationInternalDescriptionCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationInternalDescription`.
  """
  applicationInternalDescriptionsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationInternalDescription`."""
    orderBy: [ApplicationInternalDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationInternalDescriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationInternalDescriptionFilter
  ): ApplicationInternalDescriptionsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationInternalDescription`.
"""
type CcbcUserCcbcUsersByApplicationInternalDescriptionCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationInternalDescription`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationInternalDescriptionCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationInternalDescription`.
"""
type CcbcUserCcbcUsersByApplicationInternalDescriptionCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationInternalDescription`.
  """
  applicationInternalDescriptionsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationInternalDescription`."""
    orderBy: [ApplicationInternalDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationInternalDescriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationInternalDescriptionFilter
  ): ApplicationInternalDescriptionsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationInternalDescription`.
"""
type CcbcUserCcbcUsersByApplicationInternalDescriptionCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationInternalDescription`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationInternalDescriptionCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationInternalDescription`.
"""
type CcbcUserCcbcUsersByApplicationInternalDescriptionCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationInternalDescription`.
  """
  applicationInternalDescriptionsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationInternalDescription`."""
    orderBy: [ApplicationInternalDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationInternalDescriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationInternalDescriptionFilter
  ): ApplicationInternalDescriptionsConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationInternalDescription`.
"""
type CcbcUserApplicationsByApplicationInternalDescriptionUpdatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationInternalDescription`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationInternalDescriptionUpdatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationInternalDescription`.
"""
type CcbcUserApplicationsByApplicationInternalDescriptionUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationInternalDescription`.
  """
  applicationInternalDescriptionsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationInternalDescription`."""
    orderBy: [ApplicationInternalDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationInternalDescriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationInternalDescriptionFilter
  ): ApplicationInternalDescriptionsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationInternalDescription`.
"""
type CcbcUserCcbcUsersByApplicationInternalDescriptionUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationInternalDescription`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationInternalDescriptionUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationInternalDescription`.
"""
type CcbcUserCcbcUsersByApplicationInternalDescriptionUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationInternalDescription`.
  """
  applicationInternalDescriptionsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationInternalDescription`."""
    orderBy: [ApplicationInternalDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationInternalDescriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationInternalDescriptionFilter
  ): ApplicationInternalDescriptionsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationInternalDescription`.
"""
type CcbcUserCcbcUsersByApplicationInternalDescriptionUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationInternalDescription`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationInternalDescriptionUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationInternalDescription`.
"""
type CcbcUserCcbcUsersByApplicationInternalDescriptionUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationInternalDescription`.
  """
  applicationInternalDescriptionsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationInternalDescription`."""
    orderBy: [ApplicationInternalDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationInternalDescriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationInternalDescriptionFilter
  ): ApplicationInternalDescriptionsConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationInternalDescription`.
"""
type CcbcUserApplicationsByApplicationInternalDescriptionArchivedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationInternalDescription`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationInternalDescriptionArchivedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationInternalDescription`.
"""
type CcbcUserApplicationsByApplicationInternalDescriptionArchivedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationInternalDescription`.
  """
  applicationInternalDescriptionsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationInternalDescription`."""
    orderBy: [ApplicationInternalDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationInternalDescriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationInternalDescriptionFilter
  ): ApplicationInternalDescriptionsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationInternalDescription`.
"""
type CcbcUserCcbcUsersByApplicationInternalDescriptionArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationInternalDescription`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationInternalDescriptionArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationInternalDescription`.
"""
type CcbcUserCcbcUsersByApplicationInternalDescriptionArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationInternalDescription`.
  """
  applicationInternalDescriptionsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationInternalDescription`."""
    orderBy: [ApplicationInternalDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationInternalDescriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationInternalDescriptionFilter
  ): ApplicationInternalDescriptionsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationInternalDescription`.
"""
type CcbcUserCcbcUsersByApplicationInternalDescriptionArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationInternalDescription`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationInternalDescriptionArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationInternalDescription`.
"""
type CcbcUserCcbcUsersByApplicationInternalDescriptionArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationInternalDescription`.
  """
  applicationInternalDescriptionsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationInternalDescription`."""
    orderBy: [ApplicationInternalDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationInternalDescriptionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationInternalDescriptionFilter
  ): ApplicationInternalDescriptionsConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationProjectType`.
"""
type CcbcUserApplicationsByApplicationProjectTypeCreatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationProjectType`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationProjectTypeCreatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationProjectType`.
"""
type CcbcUserApplicationsByApplicationProjectTypeCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationProjectType`.
  """
  applicationProjectTypesByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationProjectType`."""
    orderBy: [ApplicationProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationProjectTypeFilter
  ): ApplicationProjectTypesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationProjectType`.
"""
type CcbcUserCcbcUsersByApplicationProjectTypeCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationProjectType`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationProjectTypeCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationProjectType`.
"""
type CcbcUserCcbcUsersByApplicationProjectTypeCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationProjectType`.
  """
  applicationProjectTypesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationProjectType`."""
    orderBy: [ApplicationProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationProjectTypeFilter
  ): ApplicationProjectTypesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationProjectType`.
"""
type CcbcUserCcbcUsersByApplicationProjectTypeCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationProjectType`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationProjectTypeCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationProjectType`.
"""
type CcbcUserCcbcUsersByApplicationProjectTypeCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationProjectType`.
  """
  applicationProjectTypesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationProjectType`."""
    orderBy: [ApplicationProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationProjectTypeFilter
  ): ApplicationProjectTypesConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationProjectType`.
"""
type CcbcUserApplicationsByApplicationProjectTypeUpdatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationProjectType`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationProjectTypeUpdatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationProjectType`.
"""
type CcbcUserApplicationsByApplicationProjectTypeUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationProjectType`.
  """
  applicationProjectTypesByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationProjectType`."""
    orderBy: [ApplicationProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationProjectTypeFilter
  ): ApplicationProjectTypesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationProjectType`.
"""
type CcbcUserCcbcUsersByApplicationProjectTypeUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationProjectType`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationProjectTypeUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationProjectType`.
"""
type CcbcUserCcbcUsersByApplicationProjectTypeUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationProjectType`.
  """
  applicationProjectTypesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationProjectType`."""
    orderBy: [ApplicationProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationProjectTypeFilter
  ): ApplicationProjectTypesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationProjectType`.
"""
type CcbcUserCcbcUsersByApplicationProjectTypeUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationProjectType`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationProjectTypeUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationProjectType`.
"""
type CcbcUserCcbcUsersByApplicationProjectTypeUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationProjectType`.
  """
  applicationProjectTypesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationProjectType`."""
    orderBy: [ApplicationProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationProjectTypeFilter
  ): ApplicationProjectTypesConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationProjectType`.
"""
type CcbcUserApplicationsByApplicationProjectTypeArchivedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationProjectType`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationProjectTypeArchivedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationProjectType`.
"""
type CcbcUserApplicationsByApplicationProjectTypeArchivedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationProjectType`.
  """
  applicationProjectTypesByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationProjectType`."""
    orderBy: [ApplicationProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationProjectTypeFilter
  ): ApplicationProjectTypesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationProjectType`.
"""
type CcbcUserCcbcUsersByApplicationProjectTypeArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationProjectType`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationProjectTypeArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationProjectType`.
"""
type CcbcUserCcbcUsersByApplicationProjectTypeArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationProjectType`.
  """
  applicationProjectTypesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationProjectType`."""
    orderBy: [ApplicationProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationProjectTypeFilter
  ): ApplicationProjectTypesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationProjectType`.
"""
type CcbcUserCcbcUsersByApplicationProjectTypeArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationProjectType`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationProjectTypeArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationProjectType`.
"""
type CcbcUserCcbcUsersByApplicationProjectTypeArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationProjectType`.
  """
  applicationProjectTypesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationProjectType`."""
    orderBy: [ApplicationProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationProjectTypeFilter
  ): ApplicationProjectTypesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `EmailRecord`.
"""
type CcbcUserCcbcUsersByEmailRecordCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `EmailRecord`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByEmailRecordCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `EmailRecord`."""
type CcbcUserCcbcUsersByEmailRecordCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `EmailRecord`."""
  emailRecordsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EmailRecord`."""
    orderBy: [EmailRecordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmailRecordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmailRecordFilter
  ): EmailRecordsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `EmailRecord`.
"""
type CcbcUserCcbcUsersByEmailRecordCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `EmailRecord`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByEmailRecordCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `EmailRecord`."""
type CcbcUserCcbcUsersByEmailRecordCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `EmailRecord`."""
  emailRecordsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EmailRecord`."""
    orderBy: [EmailRecordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmailRecordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmailRecordFilter
  ): EmailRecordsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `EmailRecord`.
"""
type CcbcUserCcbcUsersByEmailRecordUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `EmailRecord`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByEmailRecordUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `EmailRecord`."""
type CcbcUserCcbcUsersByEmailRecordUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `EmailRecord`."""
  emailRecordsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EmailRecord`."""
    orderBy: [EmailRecordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmailRecordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmailRecordFilter
  ): EmailRecordsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `EmailRecord`.
"""
type CcbcUserCcbcUsersByEmailRecordUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `EmailRecord`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByEmailRecordUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `EmailRecord`."""
type CcbcUserCcbcUsersByEmailRecordUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `EmailRecord`."""
  emailRecordsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EmailRecord`."""
    orderBy: [EmailRecordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmailRecordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmailRecordFilter
  ): EmailRecordsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `EmailRecord`.
"""
type CcbcUserCcbcUsersByEmailRecordArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `EmailRecord`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByEmailRecordArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `EmailRecord`."""
type CcbcUserCcbcUsersByEmailRecordArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `EmailRecord`."""
  emailRecordsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EmailRecord`."""
    orderBy: [EmailRecordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmailRecordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmailRecordFilter
  ): EmailRecordsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `EmailRecord`.
"""
type CcbcUserCcbcUsersByEmailRecordArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `EmailRecord`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByEmailRecordArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `EmailRecord`."""
type CcbcUserCcbcUsersByEmailRecordArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `EmailRecord`."""
  emailRecordsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EmailRecord`."""
    orderBy: [EmailRecordsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmailRecordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmailRecordFilter
  ): EmailRecordsConnection!
}

"""
A connection to a list of `Application` values, with data from `Notification`.
"""
type CcbcUserApplicationsByNotificationCreatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `Notification`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByNotificationCreatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""A `Application` edge in the connection, with data from `Notification`."""
type CcbcUserApplicationsByNotificationCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!
}

"""
A connection to a list of `EmailRecord` values, with data from `Notification`.
"""
type CcbcUserEmailRecordsByNotificationCreatedByAndEmailRecordIdManyToManyConnection {
  """A list of `EmailRecord` objects."""
  nodes: [EmailRecord]!

  """
  A list of edges which contains the `EmailRecord`, info from the `Notification`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserEmailRecordsByNotificationCreatedByAndEmailRecordIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EmailRecord` you could get from the connection."""
  totalCount: Int!
}

"""A `EmailRecord` edge in the connection, with data from `Notification`."""
type CcbcUserEmailRecordsByNotificationCreatedByAndEmailRecordIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EmailRecord` at the end of the edge."""
  node: EmailRecord

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByEmailRecordId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Notification`.
"""
type CcbcUserCcbcUsersByNotificationCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Notification`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByNotificationCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Notification`."""
type CcbcUserCcbcUsersByNotificationCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Notification`.
"""
type CcbcUserCcbcUsersByNotificationCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Notification`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByNotificationCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Notification`."""
type CcbcUserCcbcUsersByNotificationCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!
}

"""
A connection to a list of `Application` values, with data from `Notification`.
"""
type CcbcUserApplicationsByNotificationUpdatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `Notification`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByNotificationUpdatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""A `Application` edge in the connection, with data from `Notification`."""
type CcbcUserApplicationsByNotificationUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!
}

"""
A connection to a list of `EmailRecord` values, with data from `Notification`.
"""
type CcbcUserEmailRecordsByNotificationUpdatedByAndEmailRecordIdManyToManyConnection {
  """A list of `EmailRecord` objects."""
  nodes: [EmailRecord]!

  """
  A list of edges which contains the `EmailRecord`, info from the `Notification`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserEmailRecordsByNotificationUpdatedByAndEmailRecordIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EmailRecord` you could get from the connection."""
  totalCount: Int!
}

"""A `EmailRecord` edge in the connection, with data from `Notification`."""
type CcbcUserEmailRecordsByNotificationUpdatedByAndEmailRecordIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EmailRecord` at the end of the edge."""
  node: EmailRecord

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByEmailRecordId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Notification`.
"""
type CcbcUserCcbcUsersByNotificationUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Notification`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByNotificationUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Notification`."""
type CcbcUserCcbcUsersByNotificationUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Notification`.
"""
type CcbcUserCcbcUsersByNotificationUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Notification`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByNotificationUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Notification`."""
type CcbcUserCcbcUsersByNotificationUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!
}

"""
A connection to a list of `Application` values, with data from `Notification`.
"""
type CcbcUserApplicationsByNotificationArchivedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `Notification`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByNotificationArchivedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""A `Application` edge in the connection, with data from `Notification`."""
type CcbcUserApplicationsByNotificationArchivedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!
}

"""
A connection to a list of `EmailRecord` values, with data from `Notification`.
"""
type CcbcUserEmailRecordsByNotificationArchivedByAndEmailRecordIdManyToManyConnection {
  """A list of `EmailRecord` objects."""
  nodes: [EmailRecord]!

  """
  A list of edges which contains the `EmailRecord`, info from the `Notification`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserEmailRecordsByNotificationArchivedByAndEmailRecordIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EmailRecord` you could get from the connection."""
  totalCount: Int!
}

"""A `EmailRecord` edge in the connection, with data from `Notification`."""
type CcbcUserEmailRecordsByNotificationArchivedByAndEmailRecordIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EmailRecord` at the end of the edge."""
  node: EmailRecord

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByEmailRecordId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Notification`.
"""
type CcbcUserCcbcUsersByNotificationArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Notification`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByNotificationArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Notification`."""
type CcbcUserCcbcUsersByNotificationArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Notification`.
"""
type CcbcUserCcbcUsersByNotificationArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Notification`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByNotificationArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Notification`."""
type CcbcUserCcbcUsersByNotificationArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NotificationFilter
  ): NotificationsConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationPendingChangeRequest`.
"""
type CcbcUserApplicationsByApplicationPendingChangeRequestCreatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationPendingChangeRequest`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationPendingChangeRequestCreatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationPendingChangeRequest`.
"""
type CcbcUserApplicationsByApplicationPendingChangeRequestCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationPendingChangeRequest`.
  """
  applicationPendingChangeRequestsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPendingChangeRequest`."""
    orderBy: [ApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPendingChangeRequestFilter
  ): ApplicationPendingChangeRequestsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationPendingChangeRequest`.
"""
type CcbcUserCcbcUsersByApplicationPendingChangeRequestCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationPendingChangeRequest`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationPendingChangeRequestCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationPendingChangeRequest`.
"""
type CcbcUserCcbcUsersByApplicationPendingChangeRequestCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationPendingChangeRequest`.
  """
  applicationPendingChangeRequestsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPendingChangeRequest`."""
    orderBy: [ApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPendingChangeRequestFilter
  ): ApplicationPendingChangeRequestsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationPendingChangeRequest`.
"""
type CcbcUserCcbcUsersByApplicationPendingChangeRequestCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationPendingChangeRequest`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationPendingChangeRequestCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationPendingChangeRequest`.
"""
type CcbcUserCcbcUsersByApplicationPendingChangeRequestCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationPendingChangeRequest`.
  """
  applicationPendingChangeRequestsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPendingChangeRequest`."""
    orderBy: [ApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPendingChangeRequestFilter
  ): ApplicationPendingChangeRequestsConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationPendingChangeRequest`.
"""
type CcbcUserApplicationsByApplicationPendingChangeRequestUpdatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationPendingChangeRequest`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationPendingChangeRequestUpdatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationPendingChangeRequest`.
"""
type CcbcUserApplicationsByApplicationPendingChangeRequestUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationPendingChangeRequest`.
  """
  applicationPendingChangeRequestsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPendingChangeRequest`."""
    orderBy: [ApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPendingChangeRequestFilter
  ): ApplicationPendingChangeRequestsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationPendingChangeRequest`.
"""
type CcbcUserCcbcUsersByApplicationPendingChangeRequestUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationPendingChangeRequest`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationPendingChangeRequestUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationPendingChangeRequest`.
"""
type CcbcUserCcbcUsersByApplicationPendingChangeRequestUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationPendingChangeRequest`.
  """
  applicationPendingChangeRequestsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPendingChangeRequest`."""
    orderBy: [ApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPendingChangeRequestFilter
  ): ApplicationPendingChangeRequestsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationPendingChangeRequest`.
"""
type CcbcUserCcbcUsersByApplicationPendingChangeRequestUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationPendingChangeRequest`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationPendingChangeRequestUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationPendingChangeRequest`.
"""
type CcbcUserCcbcUsersByApplicationPendingChangeRequestUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationPendingChangeRequest`.
  """
  applicationPendingChangeRequestsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPendingChangeRequest`."""
    orderBy: [ApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPendingChangeRequestFilter
  ): ApplicationPendingChangeRequestsConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationPendingChangeRequest`.
"""
type CcbcUserApplicationsByApplicationPendingChangeRequestArchivedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationPendingChangeRequest`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationPendingChangeRequestArchivedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationPendingChangeRequest`.
"""
type CcbcUserApplicationsByApplicationPendingChangeRequestArchivedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationPendingChangeRequest`.
  """
  applicationPendingChangeRequestsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPendingChangeRequest`."""
    orderBy: [ApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPendingChangeRequestFilter
  ): ApplicationPendingChangeRequestsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationPendingChangeRequest`.
"""
type CcbcUserCcbcUsersByApplicationPendingChangeRequestArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationPendingChangeRequest`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationPendingChangeRequestArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationPendingChangeRequest`.
"""
type CcbcUserCcbcUsersByApplicationPendingChangeRequestArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationPendingChangeRequest`.
  """
  applicationPendingChangeRequestsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPendingChangeRequest`."""
    orderBy: [ApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPendingChangeRequestFilter
  ): ApplicationPendingChangeRequestsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationPendingChangeRequest`.
"""
type CcbcUserCcbcUsersByApplicationPendingChangeRequestArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationPendingChangeRequest`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationPendingChangeRequestArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationPendingChangeRequest`.
"""
type CcbcUserCcbcUsersByApplicationPendingChangeRequestArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationPendingChangeRequest`.
  """
  applicationPendingChangeRequestsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPendingChangeRequest`."""
    orderBy: [ApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationPendingChangeRequestFilter
  ): ApplicationPendingChangeRequestsConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Cbc`."""
type CcbcUserCcbcUsersByCbcCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Cbc`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Cbc`."""
type CcbcUserCcbcUsersByCbcCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Cbc`."""
  cbcsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcFilter
  ): CbcsConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Cbc`."""
type CcbcUserCcbcUsersByCbcCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Cbc`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Cbc`."""
type CcbcUserCcbcUsersByCbcCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Cbc`."""
  cbcsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcFilter
  ): CbcsConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Cbc`."""
type CcbcUserCcbcUsersByCbcUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Cbc`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Cbc`."""
type CcbcUserCcbcUsersByCbcUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Cbc`."""
  cbcsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcFilter
  ): CbcsConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Cbc`."""
type CcbcUserCcbcUsersByCbcUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Cbc`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Cbc`."""
type CcbcUserCcbcUsersByCbcUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Cbc`."""
  cbcsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcFilter
  ): CbcsConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Cbc`."""
type CcbcUserCcbcUsersByCbcArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Cbc`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Cbc`."""
type CcbcUserCcbcUsersByCbcArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Cbc`."""
  cbcsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcFilter
  ): CbcsConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Cbc`."""
type CcbcUserCcbcUsersByCbcArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Cbc`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Cbc`."""
type CcbcUserCcbcUsersByCbcArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Cbc`."""
  cbcsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcFilter
  ): CbcsConnection!
}

"""A connection to a list of `Cbc` values, with data from `CbcData`."""
type CcbcUserCbcsByCbcDataCreatedByAndCbcIdManyToManyConnection {
  """A list of `Cbc` objects."""
  nodes: [Cbc]!

  """
  A list of edges which contains the `Cbc`, info from the `CbcData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCbcsByCbcDataCreatedByAndCbcIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Cbc` you could get from the connection."""
  totalCount: Int!
}

"""A `Cbc` edge in the connection, with data from `CbcData`."""
type CcbcUserCbcsByCbcDataCreatedByAndCbcIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Cbc` at the end of the edge."""
  node: Cbc

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByCbcId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CbcDataConnection!
}

"""A connection to a list of `Cbc` values, with data from `CbcData`."""
type CcbcUserCbcsByCbcDataCreatedByAndProjectNumberManyToManyConnection {
  """A list of `Cbc` objects."""
  nodes: [Cbc]!

  """
  A list of edges which contains the `Cbc`, info from the `CbcData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCbcsByCbcDataCreatedByAndProjectNumberManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Cbc` you could get from the connection."""
  totalCount: Int!
}

"""A `Cbc` edge in the connection, with data from `CbcData`."""
type CcbcUserCbcsByCbcDataCreatedByAndProjectNumberManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Cbc` at the end of the edge."""
  node: Cbc

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByProjectNumber(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CbcDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `CbcData`."""
type CcbcUserCcbcUsersByCbcDataCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcDataCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CbcData`."""
type CcbcUserCcbcUsersByCbcDataCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CbcDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `CbcData`."""
type CcbcUserCcbcUsersByCbcDataCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcDataCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CbcData`."""
type CcbcUserCcbcUsersByCbcDataCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CbcDataConnection!
}

"""A connection to a list of `Cbc` values, with data from `CbcData`."""
type CcbcUserCbcsByCbcDataUpdatedByAndCbcIdManyToManyConnection {
  """A list of `Cbc` objects."""
  nodes: [Cbc]!

  """
  A list of edges which contains the `Cbc`, info from the `CbcData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCbcsByCbcDataUpdatedByAndCbcIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Cbc` you could get from the connection."""
  totalCount: Int!
}

"""A `Cbc` edge in the connection, with data from `CbcData`."""
type CcbcUserCbcsByCbcDataUpdatedByAndCbcIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Cbc` at the end of the edge."""
  node: Cbc

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByCbcId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CbcDataConnection!
}

"""A connection to a list of `Cbc` values, with data from `CbcData`."""
type CcbcUserCbcsByCbcDataUpdatedByAndProjectNumberManyToManyConnection {
  """A list of `Cbc` objects."""
  nodes: [Cbc]!

  """
  A list of edges which contains the `Cbc`, info from the `CbcData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCbcsByCbcDataUpdatedByAndProjectNumberManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Cbc` you could get from the connection."""
  totalCount: Int!
}

"""A `Cbc` edge in the connection, with data from `CbcData`."""
type CcbcUserCbcsByCbcDataUpdatedByAndProjectNumberManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Cbc` at the end of the edge."""
  node: Cbc

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByProjectNumber(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CbcDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `CbcData`."""
type CcbcUserCcbcUsersByCbcDataUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcDataUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CbcData`."""
type CcbcUserCcbcUsersByCbcDataUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CbcDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `CbcData`."""
type CcbcUserCcbcUsersByCbcDataUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcDataUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CbcData`."""
type CcbcUserCcbcUsersByCbcDataUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CbcDataConnection!
}

"""A connection to a list of `Cbc` values, with data from `CbcData`."""
type CcbcUserCbcsByCbcDataArchivedByAndCbcIdManyToManyConnection {
  """A list of `Cbc` objects."""
  nodes: [Cbc]!

  """
  A list of edges which contains the `Cbc`, info from the `CbcData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCbcsByCbcDataArchivedByAndCbcIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Cbc` you could get from the connection."""
  totalCount: Int!
}

"""A `Cbc` edge in the connection, with data from `CbcData`."""
type CcbcUserCbcsByCbcDataArchivedByAndCbcIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Cbc` at the end of the edge."""
  node: Cbc

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByCbcId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CbcDataConnection!
}

"""A connection to a list of `Cbc` values, with data from `CbcData`."""
type CcbcUserCbcsByCbcDataArchivedByAndProjectNumberManyToManyConnection {
  """A list of `Cbc` objects."""
  nodes: [Cbc]!

  """
  A list of edges which contains the `Cbc`, info from the `CbcData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCbcsByCbcDataArchivedByAndProjectNumberManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Cbc` you could get from the connection."""
  totalCount: Int!
}

"""A `Cbc` edge in the connection, with data from `CbcData`."""
type CcbcUserCbcsByCbcDataArchivedByAndProjectNumberManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Cbc` at the end of the edge."""
  node: Cbc

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByProjectNumber(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CbcDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `CbcData`."""
type CcbcUserCcbcUsersByCbcDataArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcDataArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CbcData`."""
type CcbcUserCcbcUsersByCbcDataArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CbcDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `CbcData`."""
type CcbcUserCcbcUsersByCbcDataArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcDataArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CbcData`."""
type CcbcUserCcbcUsersByCbcDataArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcData`."""
  cbcDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataFilter
  ): CbcDataConnection!
}

"""
A connection to a list of `Cbc` values, with data from `CbcApplicationPendingChangeRequest`.
"""
type CcbcUserCbcsByCbcApplicationPendingChangeRequestCreatedByAndCbcIdManyToManyConnection {
  """A list of `Cbc` objects."""
  nodes: [Cbc]!

  """
  A list of edges which contains the `Cbc`, info from the `CbcApplicationPendingChangeRequest`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCbcsByCbcApplicationPendingChangeRequestCreatedByAndCbcIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Cbc` you could get from the connection."""
  totalCount: Int!
}

"""
A `Cbc` edge in the connection, with data from `CbcApplicationPendingChangeRequest`.
"""
type CcbcUserCbcsByCbcApplicationPendingChangeRequestCreatedByAndCbcIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Cbc` at the end of the edge."""
  node: Cbc

  """
  Reads and enables pagination through a set of `CbcApplicationPendingChangeRequest`.
  """
  cbcApplicationPendingChangeRequestsByCbcId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcApplicationPendingChangeRequest`."""
    orderBy: [CbcApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcApplicationPendingChangeRequestFilter
  ): CbcApplicationPendingChangeRequestsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcApplicationPendingChangeRequest`.
"""
type CcbcUserCcbcUsersByCbcApplicationPendingChangeRequestCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcApplicationPendingChangeRequest`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcApplicationPendingChangeRequestCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcApplicationPendingChangeRequest`.
"""
type CcbcUserCcbcUsersByCbcApplicationPendingChangeRequestCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `CbcApplicationPendingChangeRequest`.
  """
  cbcApplicationPendingChangeRequestsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcApplicationPendingChangeRequest`."""
    orderBy: [CbcApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcApplicationPendingChangeRequestFilter
  ): CbcApplicationPendingChangeRequestsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcApplicationPendingChangeRequest`.
"""
type CcbcUserCcbcUsersByCbcApplicationPendingChangeRequestCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcApplicationPendingChangeRequest`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcApplicationPendingChangeRequestCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcApplicationPendingChangeRequest`.
"""
type CcbcUserCcbcUsersByCbcApplicationPendingChangeRequestCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `CbcApplicationPendingChangeRequest`.
  """
  cbcApplicationPendingChangeRequestsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcApplicationPendingChangeRequest`."""
    orderBy: [CbcApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcApplicationPendingChangeRequestFilter
  ): CbcApplicationPendingChangeRequestsConnection!
}

"""
A connection to a list of `Cbc` values, with data from `CbcApplicationPendingChangeRequest`.
"""
type CcbcUserCbcsByCbcApplicationPendingChangeRequestUpdatedByAndCbcIdManyToManyConnection {
  """A list of `Cbc` objects."""
  nodes: [Cbc]!

  """
  A list of edges which contains the `Cbc`, info from the `CbcApplicationPendingChangeRequest`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCbcsByCbcApplicationPendingChangeRequestUpdatedByAndCbcIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Cbc` you could get from the connection."""
  totalCount: Int!
}

"""
A `Cbc` edge in the connection, with data from `CbcApplicationPendingChangeRequest`.
"""
type CcbcUserCbcsByCbcApplicationPendingChangeRequestUpdatedByAndCbcIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Cbc` at the end of the edge."""
  node: Cbc

  """
  Reads and enables pagination through a set of `CbcApplicationPendingChangeRequest`.
  """
  cbcApplicationPendingChangeRequestsByCbcId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcApplicationPendingChangeRequest`."""
    orderBy: [CbcApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcApplicationPendingChangeRequestFilter
  ): CbcApplicationPendingChangeRequestsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcApplicationPendingChangeRequest`.
"""
type CcbcUserCcbcUsersByCbcApplicationPendingChangeRequestUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcApplicationPendingChangeRequest`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcApplicationPendingChangeRequestUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcApplicationPendingChangeRequest`.
"""
type CcbcUserCcbcUsersByCbcApplicationPendingChangeRequestUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `CbcApplicationPendingChangeRequest`.
  """
  cbcApplicationPendingChangeRequestsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcApplicationPendingChangeRequest`."""
    orderBy: [CbcApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcApplicationPendingChangeRequestFilter
  ): CbcApplicationPendingChangeRequestsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcApplicationPendingChangeRequest`.
"""
type CcbcUserCcbcUsersByCbcApplicationPendingChangeRequestUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcApplicationPendingChangeRequest`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcApplicationPendingChangeRequestUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcApplicationPendingChangeRequest`.
"""
type CcbcUserCcbcUsersByCbcApplicationPendingChangeRequestUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `CbcApplicationPendingChangeRequest`.
  """
  cbcApplicationPendingChangeRequestsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcApplicationPendingChangeRequest`."""
    orderBy: [CbcApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcApplicationPendingChangeRequestFilter
  ): CbcApplicationPendingChangeRequestsConnection!
}

"""
A connection to a list of `Cbc` values, with data from `CbcApplicationPendingChangeRequest`.
"""
type CcbcUserCbcsByCbcApplicationPendingChangeRequestArchivedByAndCbcIdManyToManyConnection {
  """A list of `Cbc` objects."""
  nodes: [Cbc]!

  """
  A list of edges which contains the `Cbc`, info from the `CbcApplicationPendingChangeRequest`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCbcsByCbcApplicationPendingChangeRequestArchivedByAndCbcIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Cbc` you could get from the connection."""
  totalCount: Int!
}

"""
A `Cbc` edge in the connection, with data from `CbcApplicationPendingChangeRequest`.
"""
type CcbcUserCbcsByCbcApplicationPendingChangeRequestArchivedByAndCbcIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Cbc` at the end of the edge."""
  node: Cbc

  """
  Reads and enables pagination through a set of `CbcApplicationPendingChangeRequest`.
  """
  cbcApplicationPendingChangeRequestsByCbcId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcApplicationPendingChangeRequest`."""
    orderBy: [CbcApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcApplicationPendingChangeRequestFilter
  ): CbcApplicationPendingChangeRequestsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcApplicationPendingChangeRequest`.
"""
type CcbcUserCcbcUsersByCbcApplicationPendingChangeRequestArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcApplicationPendingChangeRequest`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcApplicationPendingChangeRequestArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcApplicationPendingChangeRequest`.
"""
type CcbcUserCcbcUsersByCbcApplicationPendingChangeRequestArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `CbcApplicationPendingChangeRequest`.
  """
  cbcApplicationPendingChangeRequestsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcApplicationPendingChangeRequest`."""
    orderBy: [CbcApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcApplicationPendingChangeRequestFilter
  ): CbcApplicationPendingChangeRequestsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcApplicationPendingChangeRequest`.
"""
type CcbcUserCcbcUsersByCbcApplicationPendingChangeRequestArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcApplicationPendingChangeRequest`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcApplicationPendingChangeRequestArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcApplicationPendingChangeRequest`.
"""
type CcbcUserCcbcUsersByCbcApplicationPendingChangeRequestArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `CbcApplicationPendingChangeRequest`.
  """
  cbcApplicationPendingChangeRequestsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcApplicationPendingChangeRequest`."""
    orderBy: [CbcApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcApplicationPendingChangeRequestCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcApplicationPendingChangeRequestFilter
  ): CbcApplicationPendingChangeRequestsConnection!
}

"""
A connection to a list of `CbcData` values, with data from `CbcDataChangeReason`.
"""
type CcbcUserCbcDataByCbcDataChangeReasonCreatedByAndCbcDataIdManyToManyConnection {
  """A list of `CbcData` objects."""
  nodes: [CbcData]!

  """
  A list of edges which contains the `CbcData`, info from the `CbcDataChangeReason`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCbcDataByCbcDataChangeReasonCreatedByAndCbcDataIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CbcData` you could get from the connection."""
  totalCount: Int!
}

"""
A `CbcData` edge in the connection, with data from `CbcDataChangeReason`.
"""
type CcbcUserCbcDataByCbcDataChangeReasonCreatedByAndCbcDataIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CbcData` at the end of the edge."""
  node: CbcData

  """Reads and enables pagination through a set of `CbcDataChangeReason`."""
  cbcDataChangeReasonsByCbcDataId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcDataChangeReason`."""
    orderBy: [CbcDataChangeReasonsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataChangeReasonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataChangeReasonFilter
  ): CbcDataChangeReasonsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcDataChangeReason`.
"""
type CcbcUserCcbcUsersByCbcDataChangeReasonCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcDataChangeReason`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcDataChangeReasonCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcDataChangeReason`.
"""
type CcbcUserCcbcUsersByCbcDataChangeReasonCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcDataChangeReason`."""
  cbcDataChangeReasonsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcDataChangeReason`."""
    orderBy: [CbcDataChangeReasonsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataChangeReasonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataChangeReasonFilter
  ): CbcDataChangeReasonsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcDataChangeReason`.
"""
type CcbcUserCcbcUsersByCbcDataChangeReasonCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcDataChangeReason`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcDataChangeReasonCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcDataChangeReason`.
"""
type CcbcUserCcbcUsersByCbcDataChangeReasonCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcDataChangeReason`."""
  cbcDataChangeReasonsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcDataChangeReason`."""
    orderBy: [CbcDataChangeReasonsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataChangeReasonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataChangeReasonFilter
  ): CbcDataChangeReasonsConnection!
}

"""
A connection to a list of `CbcData` values, with data from `CbcDataChangeReason`.
"""
type CcbcUserCbcDataByCbcDataChangeReasonUpdatedByAndCbcDataIdManyToManyConnection {
  """A list of `CbcData` objects."""
  nodes: [CbcData]!

  """
  A list of edges which contains the `CbcData`, info from the `CbcDataChangeReason`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCbcDataByCbcDataChangeReasonUpdatedByAndCbcDataIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CbcData` you could get from the connection."""
  totalCount: Int!
}

"""
A `CbcData` edge in the connection, with data from `CbcDataChangeReason`.
"""
type CcbcUserCbcDataByCbcDataChangeReasonUpdatedByAndCbcDataIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CbcData` at the end of the edge."""
  node: CbcData

  """Reads and enables pagination through a set of `CbcDataChangeReason`."""
  cbcDataChangeReasonsByCbcDataId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcDataChangeReason`."""
    orderBy: [CbcDataChangeReasonsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataChangeReasonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataChangeReasonFilter
  ): CbcDataChangeReasonsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcDataChangeReason`.
"""
type CcbcUserCcbcUsersByCbcDataChangeReasonUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcDataChangeReason`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcDataChangeReasonUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcDataChangeReason`.
"""
type CcbcUserCcbcUsersByCbcDataChangeReasonUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcDataChangeReason`."""
  cbcDataChangeReasonsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcDataChangeReason`."""
    orderBy: [CbcDataChangeReasonsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataChangeReasonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataChangeReasonFilter
  ): CbcDataChangeReasonsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcDataChangeReason`.
"""
type CcbcUserCcbcUsersByCbcDataChangeReasonUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcDataChangeReason`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcDataChangeReasonUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcDataChangeReason`.
"""
type CcbcUserCcbcUsersByCbcDataChangeReasonUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcDataChangeReason`."""
  cbcDataChangeReasonsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcDataChangeReason`."""
    orderBy: [CbcDataChangeReasonsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataChangeReasonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataChangeReasonFilter
  ): CbcDataChangeReasonsConnection!
}

"""
A connection to a list of `CbcData` values, with data from `CbcDataChangeReason`.
"""
type CcbcUserCbcDataByCbcDataChangeReasonArchivedByAndCbcDataIdManyToManyConnection {
  """A list of `CbcData` objects."""
  nodes: [CbcData]!

  """
  A list of edges which contains the `CbcData`, info from the `CbcDataChangeReason`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCbcDataByCbcDataChangeReasonArchivedByAndCbcDataIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CbcData` you could get from the connection."""
  totalCount: Int!
}

"""
A `CbcData` edge in the connection, with data from `CbcDataChangeReason`.
"""
type CcbcUserCbcDataByCbcDataChangeReasonArchivedByAndCbcDataIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CbcData` at the end of the edge."""
  node: CbcData

  """Reads and enables pagination through a set of `CbcDataChangeReason`."""
  cbcDataChangeReasonsByCbcDataId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcDataChangeReason`."""
    orderBy: [CbcDataChangeReasonsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataChangeReasonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataChangeReasonFilter
  ): CbcDataChangeReasonsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcDataChangeReason`.
"""
type CcbcUserCcbcUsersByCbcDataChangeReasonArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcDataChangeReason`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcDataChangeReasonArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcDataChangeReason`.
"""
type CcbcUserCcbcUsersByCbcDataChangeReasonArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcDataChangeReason`."""
  cbcDataChangeReasonsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcDataChangeReason`."""
    orderBy: [CbcDataChangeReasonsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataChangeReasonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataChangeReasonFilter
  ): CbcDataChangeReasonsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcDataChangeReason`.
"""
type CcbcUserCcbcUsersByCbcDataChangeReasonArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcDataChangeReason`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcDataChangeReasonArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcDataChangeReason`.
"""
type CcbcUserCcbcUsersByCbcDataChangeReasonArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcDataChangeReason`."""
  cbcDataChangeReasonsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcDataChangeReason`."""
    orderBy: [CbcDataChangeReasonsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcDataChangeReasonCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcDataChangeReasonFilter
  ): CbcDataChangeReasonsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CommunitiesSourceData`.
"""
type CcbcUserCcbcUsersByCommunitiesSourceDataCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CommunitiesSourceData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCommunitiesSourceDataCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CommunitiesSourceData`.
"""
type CcbcUserCcbcUsersByCommunitiesSourceDataCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CommunitiesSourceData`."""
  communitiesSourceDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CommunitiesSourceData`."""
    orderBy: [CommunitiesSourceDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommunitiesSourceDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommunitiesSourceDataFilter
  ): CommunitiesSourceDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CommunitiesSourceData`.
"""
type CcbcUserCcbcUsersByCommunitiesSourceDataCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CommunitiesSourceData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCommunitiesSourceDataCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CommunitiesSourceData`.
"""
type CcbcUserCcbcUsersByCommunitiesSourceDataCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CommunitiesSourceData`."""
  communitiesSourceDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CommunitiesSourceData`."""
    orderBy: [CommunitiesSourceDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommunitiesSourceDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommunitiesSourceDataFilter
  ): CommunitiesSourceDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CommunitiesSourceData`.
"""
type CcbcUserCcbcUsersByCommunitiesSourceDataUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CommunitiesSourceData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCommunitiesSourceDataUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CommunitiesSourceData`.
"""
type CcbcUserCcbcUsersByCommunitiesSourceDataUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CommunitiesSourceData`."""
  communitiesSourceDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CommunitiesSourceData`."""
    orderBy: [CommunitiesSourceDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommunitiesSourceDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommunitiesSourceDataFilter
  ): CommunitiesSourceDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CommunitiesSourceData`.
"""
type CcbcUserCcbcUsersByCommunitiesSourceDataUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CommunitiesSourceData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCommunitiesSourceDataUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CommunitiesSourceData`.
"""
type CcbcUserCcbcUsersByCommunitiesSourceDataUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CommunitiesSourceData`."""
  communitiesSourceDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CommunitiesSourceData`."""
    orderBy: [CommunitiesSourceDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommunitiesSourceDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommunitiesSourceDataFilter
  ): CommunitiesSourceDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CommunitiesSourceData`.
"""
type CcbcUserCcbcUsersByCommunitiesSourceDataArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CommunitiesSourceData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCommunitiesSourceDataArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CommunitiesSourceData`.
"""
type CcbcUserCcbcUsersByCommunitiesSourceDataArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CommunitiesSourceData`."""
  communitiesSourceDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CommunitiesSourceData`."""
    orderBy: [CommunitiesSourceDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommunitiesSourceDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommunitiesSourceDataFilter
  ): CommunitiesSourceDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CommunitiesSourceData`.
"""
type CcbcUserCcbcUsersByCommunitiesSourceDataArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CommunitiesSourceData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCommunitiesSourceDataArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CommunitiesSourceData`.
"""
type CcbcUserCcbcUsersByCommunitiesSourceDataArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CommunitiesSourceData`."""
  communitiesSourceDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CommunitiesSourceData`."""
    orderBy: [CommunitiesSourceDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommunitiesSourceDataCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommunitiesSourceDataFilter
  ): CommunitiesSourceDataConnection!
}

"""
A connection to a list of `Cbc` values, with data from `CbcProjectCommunity`.
"""
type CcbcUserCbcsByCbcProjectCommunityCreatedByAndCbcIdManyToManyConnection {
  """A list of `Cbc` objects."""
  nodes: [Cbc]!

  """
  A list of edges which contains the `Cbc`, info from the `CbcProjectCommunity`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCbcsByCbcProjectCommunityCreatedByAndCbcIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Cbc` you could get from the connection."""
  totalCount: Int!
}

"""A `Cbc` edge in the connection, with data from `CbcProjectCommunity`."""
type CcbcUserCbcsByCbcProjectCommunityCreatedByAndCbcIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Cbc` at the end of the edge."""
  node: Cbc

  """Reads and enables pagination through a set of `CbcProjectCommunity`."""
  cbcProjectCommunitiesByCbcId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCommunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectCommunityFilter
  ): CbcProjectCommunitiesConnection!
}

"""
A connection to a list of `CommunitiesSourceData` values, with data from `CbcProjectCommunity`.
"""
type CcbcUserCommunitiesSourceDataByCbcProjectCommunityCreatedByAndCommunitiesSourceDataIdManyToManyConnection {
  """A list of `CommunitiesSourceData` objects."""
  nodes: [CommunitiesSourceData]!

  """
  A list of edges which contains the `CommunitiesSourceData`, info from the `CbcProjectCommunity`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCommunitiesSourceDataByCbcProjectCommunityCreatedByAndCommunitiesSourceDataIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CommunitiesSourceData` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `CommunitiesSourceData` edge in the connection, with data from `CbcProjectCommunity`.
"""
type CcbcUserCommunitiesSourceDataByCbcProjectCommunityCreatedByAndCommunitiesSourceDataIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CommunitiesSourceData` at the end of the edge."""
  node: CommunitiesSourceData

  """Reads and enables pagination through a set of `CbcProjectCommunity`."""
  cbcProjectCommunitiesByCommunitiesSourceDataId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCommunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectCommunityFilter
  ): CbcProjectCommunitiesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcProjectCommunity`.
"""
type CcbcUserCcbcUsersByCbcProjectCommunityCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcProjectCommunity`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcProjectCommunityCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcProjectCommunity`.
"""
type CcbcUserCcbcUsersByCbcProjectCommunityCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcProjectCommunity`."""
  cbcProjectCommunitiesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCommunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectCommunityFilter
  ): CbcProjectCommunitiesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcProjectCommunity`.
"""
type CcbcUserCcbcUsersByCbcProjectCommunityCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcProjectCommunity`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcProjectCommunityCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcProjectCommunity`.
"""
type CcbcUserCcbcUsersByCbcProjectCommunityCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcProjectCommunity`."""
  cbcProjectCommunitiesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCommunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectCommunityFilter
  ): CbcProjectCommunitiesConnection!
}

"""
A connection to a list of `Cbc` values, with data from `CbcProjectCommunity`.
"""
type CcbcUserCbcsByCbcProjectCommunityUpdatedByAndCbcIdManyToManyConnection {
  """A list of `Cbc` objects."""
  nodes: [Cbc]!

  """
  A list of edges which contains the `Cbc`, info from the `CbcProjectCommunity`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCbcsByCbcProjectCommunityUpdatedByAndCbcIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Cbc` you could get from the connection."""
  totalCount: Int!
}

"""A `Cbc` edge in the connection, with data from `CbcProjectCommunity`."""
type CcbcUserCbcsByCbcProjectCommunityUpdatedByAndCbcIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Cbc` at the end of the edge."""
  node: Cbc

  """Reads and enables pagination through a set of `CbcProjectCommunity`."""
  cbcProjectCommunitiesByCbcId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCommunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectCommunityFilter
  ): CbcProjectCommunitiesConnection!
}

"""
A connection to a list of `CommunitiesSourceData` values, with data from `CbcProjectCommunity`.
"""
type CcbcUserCommunitiesSourceDataByCbcProjectCommunityUpdatedByAndCommunitiesSourceDataIdManyToManyConnection {
  """A list of `CommunitiesSourceData` objects."""
  nodes: [CommunitiesSourceData]!

  """
  A list of edges which contains the `CommunitiesSourceData`, info from the `CbcProjectCommunity`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCommunitiesSourceDataByCbcProjectCommunityUpdatedByAndCommunitiesSourceDataIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CommunitiesSourceData` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `CommunitiesSourceData` edge in the connection, with data from `CbcProjectCommunity`.
"""
type CcbcUserCommunitiesSourceDataByCbcProjectCommunityUpdatedByAndCommunitiesSourceDataIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CommunitiesSourceData` at the end of the edge."""
  node: CommunitiesSourceData

  """Reads and enables pagination through a set of `CbcProjectCommunity`."""
  cbcProjectCommunitiesByCommunitiesSourceDataId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCommunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectCommunityFilter
  ): CbcProjectCommunitiesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcProjectCommunity`.
"""
type CcbcUserCcbcUsersByCbcProjectCommunityUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcProjectCommunity`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcProjectCommunityUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcProjectCommunity`.
"""
type CcbcUserCcbcUsersByCbcProjectCommunityUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcProjectCommunity`."""
  cbcProjectCommunitiesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCommunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectCommunityFilter
  ): CbcProjectCommunitiesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcProjectCommunity`.
"""
type CcbcUserCcbcUsersByCbcProjectCommunityUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcProjectCommunity`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcProjectCommunityUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcProjectCommunity`.
"""
type CcbcUserCcbcUsersByCbcProjectCommunityUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcProjectCommunity`."""
  cbcProjectCommunitiesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCommunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectCommunityFilter
  ): CbcProjectCommunitiesConnection!
}

"""
A connection to a list of `Cbc` values, with data from `CbcProjectCommunity`.
"""
type CcbcUserCbcsByCbcProjectCommunityArchivedByAndCbcIdManyToManyConnection {
  """A list of `Cbc` objects."""
  nodes: [Cbc]!

  """
  A list of edges which contains the `Cbc`, info from the `CbcProjectCommunity`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCbcsByCbcProjectCommunityArchivedByAndCbcIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Cbc` you could get from the connection."""
  totalCount: Int!
}

"""A `Cbc` edge in the connection, with data from `CbcProjectCommunity`."""
type CcbcUserCbcsByCbcProjectCommunityArchivedByAndCbcIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Cbc` at the end of the edge."""
  node: Cbc

  """Reads and enables pagination through a set of `CbcProjectCommunity`."""
  cbcProjectCommunitiesByCbcId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCommunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectCommunityFilter
  ): CbcProjectCommunitiesConnection!
}

"""
A connection to a list of `CommunitiesSourceData` values, with data from `CbcProjectCommunity`.
"""
type CcbcUserCommunitiesSourceDataByCbcProjectCommunityArchivedByAndCommunitiesSourceDataIdManyToManyConnection {
  """A list of `CommunitiesSourceData` objects."""
  nodes: [CommunitiesSourceData]!

  """
  A list of edges which contains the `CommunitiesSourceData`, info from the `CbcProjectCommunity`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCommunitiesSourceDataByCbcProjectCommunityArchivedByAndCommunitiesSourceDataIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CommunitiesSourceData` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `CommunitiesSourceData` edge in the connection, with data from `CbcProjectCommunity`.
"""
type CcbcUserCommunitiesSourceDataByCbcProjectCommunityArchivedByAndCommunitiesSourceDataIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CommunitiesSourceData` at the end of the edge."""
  node: CommunitiesSourceData

  """Reads and enables pagination through a set of `CbcProjectCommunity`."""
  cbcProjectCommunitiesByCommunitiesSourceDataId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCommunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectCommunityFilter
  ): CbcProjectCommunitiesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcProjectCommunity`.
"""
type CcbcUserCcbcUsersByCbcProjectCommunityArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcProjectCommunity`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcProjectCommunityArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcProjectCommunity`.
"""
type CcbcUserCcbcUsersByCbcProjectCommunityArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcProjectCommunity`."""
  cbcProjectCommunitiesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCommunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectCommunityFilter
  ): CbcProjectCommunitiesConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CbcProjectCommunity`.
"""
type CcbcUserCcbcUsersByCbcProjectCommunityArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CbcProjectCommunity`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCbcProjectCommunityArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `CbcProjectCommunity`.
"""
type CcbcUserCcbcUsersByCbcProjectCommunityArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CbcProjectCommunity`."""
  cbcProjectCommunitiesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CbcProjectCommunityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CbcProjectCommunityFilter
  ): CbcProjectCommunitiesConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationAnnounced`.
"""
type CcbcUserApplicationsByApplicationAnnouncedCreatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationAnnounced`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationAnnouncedCreatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationAnnounced`.
"""
type CcbcUserApplicationsByApplicationAnnouncedCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ApplicationAnnounced`."""
  applicationAnnouncedsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnounced`."""
    orderBy: [ApplicationAnnouncedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncedCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncedFilter
  ): ApplicationAnnouncedsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnnounced`.
"""
type CcbcUserCcbcUsersByApplicationAnnouncedCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnnounced`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationAnnouncedCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnnounced`.
"""
type CcbcUserCcbcUsersByApplicationAnnouncedCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationAnnounced`."""
  applicationAnnouncedsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnounced`."""
    orderBy: [ApplicationAnnouncedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncedCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncedFilter
  ): ApplicationAnnouncedsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnnounced`.
"""
type CcbcUserCcbcUsersByApplicationAnnouncedCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnnounced`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationAnnouncedCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnnounced`.
"""
type CcbcUserCcbcUsersByApplicationAnnouncedCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationAnnounced`."""
  applicationAnnouncedsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnounced`."""
    orderBy: [ApplicationAnnouncedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncedCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncedFilter
  ): ApplicationAnnouncedsConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationAnnounced`.
"""
type CcbcUserApplicationsByApplicationAnnouncedUpdatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationAnnounced`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationAnnouncedUpdatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationAnnounced`.
"""
type CcbcUserApplicationsByApplicationAnnouncedUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ApplicationAnnounced`."""
  applicationAnnouncedsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnounced`."""
    orderBy: [ApplicationAnnouncedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncedCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncedFilter
  ): ApplicationAnnouncedsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnnounced`.
"""
type CcbcUserCcbcUsersByApplicationAnnouncedUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnnounced`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationAnnouncedUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnnounced`.
"""
type CcbcUserCcbcUsersByApplicationAnnouncedUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationAnnounced`."""
  applicationAnnouncedsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnounced`."""
    orderBy: [ApplicationAnnouncedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncedCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncedFilter
  ): ApplicationAnnouncedsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnnounced`.
"""
type CcbcUserCcbcUsersByApplicationAnnouncedUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnnounced`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationAnnouncedUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnnounced`.
"""
type CcbcUserCcbcUsersByApplicationAnnouncedUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationAnnounced`."""
  applicationAnnouncedsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnounced`."""
    orderBy: [ApplicationAnnouncedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncedCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncedFilter
  ): ApplicationAnnouncedsConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationAnnounced`.
"""
type CcbcUserApplicationsByApplicationAnnouncedArchivedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationAnnounced`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationAnnouncedArchivedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationAnnounced`.
"""
type CcbcUserApplicationsByApplicationAnnouncedArchivedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ApplicationAnnounced`."""
  applicationAnnouncedsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnounced`."""
    orderBy: [ApplicationAnnouncedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncedCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncedFilter
  ): ApplicationAnnouncedsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnnounced`.
"""
type CcbcUserCcbcUsersByApplicationAnnouncedArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnnounced`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationAnnouncedArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnnounced`.
"""
type CcbcUserCcbcUsersByApplicationAnnouncedArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationAnnounced`."""
  applicationAnnouncedsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnounced`."""
    orderBy: [ApplicationAnnouncedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncedCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncedFilter
  ): ApplicationAnnouncedsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnnounced`.
"""
type CcbcUserCcbcUsersByApplicationAnnouncedArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnnounced`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationAnnouncedArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnnounced`.
"""
type CcbcUserCcbcUsersByApplicationAnnouncedArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationAnnounced`."""
  applicationAnnouncedsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnnounced`."""
    orderBy: [ApplicationAnnouncedsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnnouncedCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnnouncedFilter
  ): ApplicationAnnouncedsConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationAnalystLead`.
"""
type AnalystApplicationsByApplicationAnalystLeadAnalystIdAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [AnalystApplicationsByApplicationAnalystLeadAnalystIdAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type AnalystApplicationsByApplicationAnalystLeadAnalystIdAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnalystLeadFilter
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnalystLead`.
"""
type AnalystCcbcUsersByApplicationAnalystLeadAnalystIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [AnalystCcbcUsersByApplicationAnalystLeadAnalystIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type AnalystCcbcUsersByApplicationAnalystLeadAnalystIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnalystLeadFilter
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnalystLead`.
"""
type AnalystCcbcUsersByApplicationAnalystLeadAnalystIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [AnalystCcbcUsersByApplicationAnalystLeadAnalystIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type AnalystCcbcUsersByApplicationAnalystLeadAnalystIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnalystLeadFilter
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnalystLead`.
"""
type AnalystCcbcUsersByApplicationAnalystLeadAnalystIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [AnalystCcbcUsersByApplicationAnalystLeadAnalystIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type AnalystCcbcUsersByApplicationAnalystLeadAnalystIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ApplicationAnalystLeadFilter
  ): ApplicationAnalystLeadsConnection!
}

"""A `Analyst` edge in the connection."""
type AnalystsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Analyst` at the end of the edge."""
  node: Analyst
}

"""A connection to a list of `ApplicationStatusType` values."""
type ApplicationStatusTypesConnection {
  """A list of `ApplicationStatusType` objects."""
  nodes: [ApplicationStatusType]!

  """
  A list of edges which contains the `ApplicationStatusType` and cursor to aid in pagination.
  """
  edges: [ApplicationStatusTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationStatusType` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ApplicationStatusType` edge in the connection."""
type ApplicationStatusTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationStatusType` at the end of the edge."""
  node: ApplicationStatusType
}

"""A connection to a list of `AssessmentType` values."""
type AssessmentTypesConnection {
  """A list of `AssessmentType` objects."""
  nodes: [AssessmentType]!

  """
  A list of edges which contains the `AssessmentType` and cursor to aid in pagination.
  """
  edges: [AssessmentTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AssessmentType` you could get from the connection."""
  totalCount: Int!
}

"""A `AssessmentType` edge in the connection."""
type AssessmentTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AssessmentType` at the end of the edge."""
  node: AssessmentType
}

"""A connection to a list of `FormDataStatusType` values."""
type FormDataStatusTypesConnection {
  """A list of `FormDataStatusType` objects."""
  nodes: [FormDataStatusType]!

  """
  A list of edges which contains the `FormDataStatusType` and cursor to aid in pagination.
  """
  edges: [FormDataStatusTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FormDataStatusType` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FormDataStatusType` edge in the connection."""
type FormDataStatusTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormDataStatusType` at the end of the edge."""
  node: FormDataStatusType
}

"""A connection to a list of `FormType` values."""
type FormTypesConnection {
  """A list of `FormType` objects."""
  nodes: [FormType]!

  """
  A list of edges which contains the `FormType` and cursor to aid in pagination.
  """
  edges: [FormTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormType` you could get from the connection."""
  totalCount: Int!
}

"""A `FormType` edge in the connection."""
type FormTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormType` at the end of the edge."""
  node: FormType
}

"""Methods to use when ordering `FormType`."""
enum FormTypesOrderBy {
  NATURAL
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `FormType` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FormTypeCondition {
  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""A connection to a list of `GaplessCounter` values."""
type GaplessCountersConnection {
  """A list of `GaplessCounter` objects."""
  nodes: [GaplessCounter]!

  """
  A list of edges which contains the `GaplessCounter` and cursor to aid in pagination.
  """
  edges: [GaplessCountersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GaplessCounter` you could get from the connection."""
  totalCount: Int!
}

"""A `GaplessCounter` edge in the connection."""
type GaplessCountersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GaplessCounter` at the end of the edge."""
  node: GaplessCounter
}

"""Methods to use when ordering `HistoryItem`."""
enum HistoryItemsOrderBy {
  NATURAL
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  OP_ASC
  OP_DESC
  TABLE_NAME_ASC
  TABLE_NAME_DESC
  RECORD_ID_ASC
  RECORD_ID_DESC
  RECORD_ASC
  RECORD_DESC
  OLD_RECORD_ASC
  OLD_RECORD_DESC
  ITEM_ASC
  ITEM_DESC
  FAMILY_NAME_ASC
  FAMILY_NAME_DESC
  GIVEN_NAME_ASC
  GIVEN_NAME_DESC
  SESSION_SUB_ASC
  SESSION_SUB_DESC
  EXTERNAL_ANALYST_ASC
  EXTERNAL_ANALYST_DESC
}

"""
A condition to be used against `HistoryItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input HistoryItemCondition {
  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `op` field."""
  op: Operation

  """Checks for equality with the object’s `tableName` field."""
  tableName: String

  """Checks for equality with the object’s `recordId` field."""
  recordId: UUID

  """Checks for equality with the object’s `record` field."""
  record: JSON

  """Checks for equality with the object’s `oldRecord` field."""
  oldRecord: JSON

  """Checks for equality with the object’s `item` field."""
  item: String

  """Checks for equality with the object’s `familyName` field."""
  familyName: String

  """Checks for equality with the object’s `givenName` field."""
  givenName: String

  """Checks for equality with the object’s `sessionSub` field."""
  sessionSub: String

  """Checks for equality with the object’s `externalAnalyst` field."""
  externalAnalyst: Boolean
}

"""A connection to a list of `RfiDataStatusType` values."""
type RfiDataStatusTypesConnection {
  """A list of `RfiDataStatusType` objects."""
  nodes: [RfiDataStatusType]!

  """
  A list of edges which contains the `RfiDataStatusType` and cursor to aid in pagination.
  """
  edges: [RfiDataStatusTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `RfiDataStatusType` you could get from the connection.
  """
  totalCount: Int!
}

"""A `RfiDataStatusType` edge in the connection."""
type RfiDataStatusTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RfiDataStatusType` at the end of the edge."""
  node: RfiDataStatusType
}

"""A connection to a list of `GisDataCount` values."""
type GisDataCountsConnection {
  """A list of `GisDataCount` objects."""
  nodes: [GisDataCount]!

  """
  A list of edges which contains the `GisDataCount` and cursor to aid in pagination.
  """
  edges: [GisDataCountsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GisDataCount` you could get from the connection."""
  totalCount: Int!
}

type GisDataCount {
  """number of records that fit specofoc criteria"""
  total: Int

  """type of the counter (one of "new", "updated","total")"""
  countType: String

  """list of ccbc_number of the applications included in counter"""
  ccbcNumbers: String
}

"""A `GisDataCount` edge in the connection."""
type GisDataCountsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GisDataCount` at the end of the edge."""
  node: GisDataCount
}

"""
A filter to be used against `GisDataCount` object types. All fields are combined with a logical ‘and.’
"""
input GisDataCountFilter {
  """Filter by the object’s `total` field."""
  total: IntFilter

  """Filter by the object’s `countType` field."""
  countType: StringFilter

  """Filter by the object’s `ccbcNumbers` field."""
  ccbcNumbers: StringFilter

  """Checks for all expressions in this list."""
  and: [GisDataCountFilter!]

  """Checks for any expressions in this list."""
  or: [GisDataCountFilter!]

  """Negates the expression."""
  not: GisDataCountFilter
}

type KeycloakJwt {
  """
  OPTIONAL - The "jti" (JWT ID) claim provides a unique identifier for the JWT.
     The identifier value MUST be assigned in a manner that ensures that
     there is a negligible probability that the same value will be
     accidentally assigned to a different data object; if the application
     uses multiple issuers, collisions MUST be prevented among values
     produced by different issuers as well.  The "jti" claim can be used
     to prevent the JWT from being replayed.  The "jti" value is a case-
     sensitive string.
  """
  jti: UUID

  """
  REQUIRED - The "exp" (expiration time) claim identifies the expiration time on
     or after which the JWT MUST NOT be accepted for processing.  The
     processing of the "exp" claim requires that the current date/time
     MUST be before the expiration date/time listed in the "exp" claim.
  """
  exp: Int

  """
  OPTIONAL - The "nbf" (not before) claim identifies the time before which the JWT
     MUST NOT be accepted for processing.  The processing of the "nbf"
     claim requires that the current date/time MUST be after or equal to
     the not-before date/time listed in the "nbf" claim.  Implementers MAY
     provide for some small leeway, usually no more than a few minutes, to
     account for clock skew.  Its value MUST be a number containing a
     NumericDate value.
  """
  nbf: Int

  """
  REQUIRED - The "iat" (issued at) claim identifies the time at which the JWT was
     issued.  This claim can be used to determine the age of the JWT.  Its
     value MUST be a number containing a NumericDate value.
  """
  iat: Int

  """
  REQUIRED - The "iss" (issuer) claim identifies the principal that issued the
     JWT.  The processing of this claim is generally application specific.
     The "iss" value is a case-sensitive string containing a StringOrURI
     value.
  """
  iss: String

  """
  REQUIRED - The "aud" (audience) claim identifies the recipients that the JWT is
     intended for.  Each principal intended to process the JWT MUST
     identify itself with a value in the audience claim.  If the principal
     processing the claim does not identify itself with a value in the
     "aud" claim when this claim is present, then the JWT MUST be
     rejected.  In the general case, the "aud" value is an array of case-
     sensitive strings, each containing a StringOrURI value.  In the
     special case when the JWT has one audience, the "aud" value MAY be a
     single case-sensitive string containing a StringOrURI value.  The
     interpretation of audience values is generally application specific.
  """
  aud: String

  """
  REQUIRED - The "sub" (subject) claim identifies the principal that is the
     subject of the JWT.  The claims in a JWT are normally statements
     about the subject.  The subject value MUST either be scoped to be
     locally unique in the context of the issuer or be globally unique.
     The processing of this claim is generally application specific.  The
     "sub" value is a case-sensitive string containing a StringOrURI
     value.
  """
  sub: String

  """
  OPTIONAL - The "typ" (type) Header Parameter defined by [JWS] and [JWE] is used
     by JWT applications to declare the media type [IANA.MediaTypes] of
     this complete JWT.  This is intended for use by the JWT application
     when values that are not JWTs could also be present in an application
     data structure that can contain a JWT object; the application can use
     this value to disambiguate among the different kinds of objects that
     might be present.  It will typically not be used by applications when
     it is already known that the object is a JWT.  This parameter is
     ignored by JWT implementations; any processing of this parameter is
     performed by the JWT application.  If present, it is RECOMMENDED that
     its value be "JWT" to indicate that this object is a JWT.  While
     media type names are not case sensitive, it is RECOMMENDED that "JWT"
     always be spelled using uppercase characters for compatibility with
     legacy implementations.
  """
  typ: String

  """
  OPTIONAL - Authorized party - the party to which the ID Token was issued. If 
    present, it MUST contain the OAuth 2.0 Client ID of this party. This 
    Claim is only needed when the ID Token has a single audience value and 
    that audience is different than the authorized party. It MAY be included 
    even when the authorized party is the same as the sole audience. The azp
    value is a case sensitive string containing a StringOrURI value.
  """
  azp: String

  """
  Time when the End-User authentication occurred. Its value is a JSON number
     representing the number of seconds from 1970-01-01T0:0:0Z as measured 
     in UTC until the date/time. When a max_age request is made or when auth_time 
     is requested as an Essential Claim, then this Claim is REQUIRED; otherwise, 
     its inclusion is OPTIONAL
  """
  authTime: Int

  """
  Session State. JSON string that represents the End-Users login state at the OP. 
    It MUST NOT contain the space (" ") character. This value is opaque to the RP. 
    This is REQUIRED if session management is supported. The Session State value is 
    initially calculated on the server. The same Session State value is also 
    recalculated by the OP iframe in the browser client. The generation of suitable 
    Session State values is specified in Section 4.2, and is based on a salted 
    cryptographic hash of Client ID, origin URL, and OP browser state. For the origin 
    URL, the server can use the origin URL of the Authentication Response, following 
    the algorithm specified in Section 4 of RFC 6454 [RFC6454].
  """
  sessionState: UUID

  """
  OPTIONAL - Authentication Context Class Reference. String specifying an 
    Authentication Context Class Reference value that identifies the Authentication 
    Context Class that the authentication performed satisfied. The value "0" 
    indicates the End-User authentication did not meet the requirements of ISO/IEC 29115 
    [ISO29115] level 1. Authentication using a long-lived browser cookie, for instance, 
    is one example where the use of "level 0" is appropriate. Authentications with 
    level 0 SHOULD NOT be used to authorize access to any resource of any monetary 
    value. (This corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] nist_auth_level 0.) 
    An absolute URI or an RFC 6711 [RFC6711] registered name SHOULD be used as the acr 
    value; registered names MUST NOT be used with a different meaning than that which 
    is registered. Parties using this claim will need to agree upon the meanings of 
    the values used, which may be context-specific. The acr value is a case sensitive 
    string.
  """
  acr: String

  """Whether or not a users email is verified with the login provider."""
  emailVerified: Boolean

  """
  Users full name by combining given_name and family_name set and returned by login provider.
  """
  name: String

  """
  Username as set and returned by provider including provider name separated by @. eg. username@github
  """
  preferredUsername: String

  """First name as set and returned by login provider."""
  givenName: String

  """Last name as set and returned by login provider."""
  familyName: String

  """Email address as set and returned by login provider."""
  email: String

  """
  If created via a broker external login, this is an identifier that can be used to 
    match external broker backchannel logout requests to a UserSession
  """
  brokerSessionId: String
  priorityGroup: String

  """Name of the identity provider."""
  identityProvider: String
  userGroups: [String]

  """Role of the user from the login provider"""
  authRole: String

  """Reads a single `CcbcUser` that is related to this `KeycloakJwt`."""
  ccbcUserBySub: CcbcUser
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Analyst`."""
  createAnalyst(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAnalystInput!
  ): CreateAnalystPayload

  """Creates a single `ApplicationAnalystLead`."""
  createApplicationAnalystLead(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationAnalystLeadInput!
  ): CreateApplicationAnalystLeadPayload

  """Creates a single `ApplicationAnnounced`."""
  createApplicationAnnounced(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationAnnouncedInput!
  ): CreateApplicationAnnouncedPayload

  """Creates a single `ApplicationAnnouncement`."""
  createApplicationAnnouncement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationAnnouncementInput!
  ): CreateApplicationAnnouncementPayload

  """Creates a single `ApplicationFormData`."""
  createApplicationFormData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationFormDataInput!
  ): CreateApplicationFormDataPayload

  """Creates a single `ApplicationGisAssessmentHh`."""
  createApplicationGisAssessmentHh(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationGisAssessmentHhInput!
  ): CreateApplicationGisAssessmentHhPayload

  """Creates a single `ApplicationGisData`."""
  createApplicationGisData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationGisDataInput!
  ): CreateApplicationGisDataPayload

  """Creates a single `ApplicationPackage`."""
  createApplicationPackage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationPackageInput!
  ): CreateApplicationPackagePayload

  """Creates a single `ApplicationPendingChangeRequest`."""
  createApplicationPendingChangeRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationPendingChangeRequestInput!
  ): CreateApplicationPendingChangeRequestPayload

  """Creates a single `ApplicationProjectType`."""
  createApplicationProjectType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationProjectTypeInput!
  ): CreateApplicationProjectTypePayload

  """Creates a single `ApplicationRfiData`."""
  createApplicationRfiData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationRfiDataInput!
  ): CreateApplicationRfiDataPayload

  """Creates a single `ApplicationStatus`."""
  createApplicationStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationStatusInput!
  ): CreateApplicationStatusPayload

  """Creates a single `ApplicationStatusType`."""
  createApplicationStatusType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationStatusTypeInput!
  ): CreateApplicationStatusTypePayload

  """Creates a single `AssessmentData`."""
  createAssessmentData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAssessmentDataInput!
  ): CreateAssessmentDataPayload

  """Creates a single `AssessmentType`."""
  createAssessmentType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAssessmentTypeInput!
  ): CreateAssessmentTypePayload

  """Creates a single `Attachment`."""
  createAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAttachmentInput!
  ): CreateAttachmentPayload

  """Creates a single `Cbc`."""
  createCbc(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCbcInput!
  ): CreateCbcPayload

  """Creates a single `CbcApplicationPendingChangeRequest`."""
  createCbcApplicationPendingChangeRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCbcApplicationPendingChangeRequestInput!
  ): CreateCbcApplicationPendingChangeRequestPayload

  """Creates a single `CbcData`."""
  createCbcData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCbcDataInput!
  ): CreateCbcDataPayload

  """Creates a single `CbcDataChangeReason`."""
  createCbcDataChangeReason(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCbcDataChangeReasonInput!
  ): CreateCbcDataChangeReasonPayload

  """Creates a single `CbcProjectCommunity`."""
  createCbcProjectCommunity(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCbcProjectCommunityInput!
  ): CreateCbcProjectCommunityPayload

  """Creates a single `CcbcUser`."""
  createCcbcUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCcbcUserInput!
  ): CreateCcbcUserPayload

  """Creates a single `ChangeRequestData`."""
  createChangeRequestData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChangeRequestDataInput!
  ): CreateChangeRequestDataPayload

  """Creates a single `CommunitiesSourceData`."""
  createCommunitiesSourceData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCommunitiesSourceDataInput!
  ): CreateCommunitiesSourceDataPayload

  """Creates a single `ConditionalApprovalData`."""
  createConditionalApprovalData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateConditionalApprovalDataInput!
  ): CreateConditionalApprovalDataPayload

  """Creates a single `EmailRecord`."""
  createEmailRecord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEmailRecordInput!
  ): CreateEmailRecordPayload

  """Creates a single `Form`."""
  createForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormInput!
  ): CreateFormPayload

  """Creates a single `FormData`."""
  createFormData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormDataInput!
  ): CreateFormDataPayload

  """Creates a single `FormDataStatusType`."""
  createFormDataStatusType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormDataStatusTypeInput!
  ): CreateFormDataStatusTypePayload

  """Creates a single `FormType`."""
  createFormType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormTypeInput!
  ): CreateFormTypePayload

  """Creates a single `GaplessCounter`."""
  createGaplessCounter(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGaplessCounterInput!
  ): CreateGaplessCounterPayload

  """Creates a single `GisData`."""
  createGisData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGisDataInput!
  ): CreateGisDataPayload

  """Creates a single `HistoryItem`."""
  createHistoryItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHistoryItemInput!
  ): CreateHistoryItemPayload

  """Creates a single `Notification`."""
  createNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNotificationInput!
  ): CreateNotificationPayload

  """Creates a single `ProjectInformationData`."""
  createProjectInformationData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectInformationDataInput!
  ): CreateProjectInformationDataPayload

  """Creates a single `RecordVersion`."""
  createRecordVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRecordVersionInput!
  ): CreateRecordVersionPayload

  """Creates a single `RfiData`."""
  createRfiData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRfiDataInput!
  ): CreateRfiDataPayload

  """Creates a single `RfiDataStatusType`."""
  createRfiDataStatusType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRfiDataStatusTypeInput!
  ): CreateRfiDataStatusTypePayload

  """Creates a single `SowTab1`."""
  createSowTab1(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSowTab1Input!
  ): CreateSowTab1Payload

  """Creates a single `SowTab2`."""
  createSowTab2(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSowTab2Input!
  ): CreateSowTab2Payload

  """Creates a single `SowTab7`."""
  createSowTab7(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSowTab7Input!
  ): CreateSowTab7Payload

  """Creates a single `SowTab8`."""
  createSowTab8(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSowTab8Input!
  ): CreateSowTab8Payload

  """Updates a single `Analyst` using its globally unique id and a patch."""
  updateAnalyst(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAnalystInput!
  ): UpdateAnalystPayload

  """Updates a single `Analyst` using a unique key and a patch."""
  updateAnalystByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAnalystByRowIdInput!
  ): UpdateAnalystPayload

  """
  Updates a single `Application` using its globally unique id and a patch.
  """
  updateApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationInput!
  ): UpdateApplicationPayload

  """Updates a single `Application` using a unique key and a patch."""
  updateApplicationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationByRowIdInput!
  ): UpdateApplicationPayload

  """
  Updates a single `ApplicationAnalystLead` using its globally unique id and a patch.
  """
  updateApplicationAnalystLead(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationAnalystLeadInput!
  ): UpdateApplicationAnalystLeadPayload

  """
  Updates a single `ApplicationAnalystLead` using a unique key and a patch.
  """
  updateApplicationAnalystLeadByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationAnalystLeadByRowIdInput!
  ): UpdateApplicationAnalystLeadPayload

  """
  Updates a single `ApplicationAnnounced` using its globally unique id and a patch.
  """
  updateApplicationAnnounced(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationAnnouncedInput!
  ): UpdateApplicationAnnouncedPayload

  """
  Updates a single `ApplicationAnnounced` using a unique key and a patch.
  """
  updateApplicationAnnouncedByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationAnnouncedByRowIdInput!
  ): UpdateApplicationAnnouncedPayload

  """
  Updates a single `ApplicationAnnouncement` using its globally unique id and a patch.
  """
  updateApplicationAnnouncement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationAnnouncementInput!
  ): UpdateApplicationAnnouncementPayload

  """
  Updates a single `ApplicationAnnouncement` using a unique key and a patch.
  """
  updateApplicationAnnouncementByAnnouncementIdAndApplicationId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationAnnouncementByAnnouncementIdAndApplicationIdInput!
  ): UpdateApplicationAnnouncementPayload

  """
  Updates a single `ApplicationClaimsData` using its globally unique id and a patch.
  """
  updateApplicationClaimsData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationClaimsDataInput!
  ): UpdateApplicationClaimsDataPayload

  """
  Updates a single `ApplicationClaimsData` using a unique key and a patch.
  """
  updateApplicationClaimsDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationClaimsDataByRowIdInput!
  ): UpdateApplicationClaimsDataPayload

  """
  Updates a single `ApplicationClaimsExcelData` using its globally unique id and a patch.
  """
  updateApplicationClaimsExcelData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationClaimsExcelDataInput!
  ): UpdateApplicationClaimsExcelDataPayload

  """
  Updates a single `ApplicationClaimsExcelData` using a unique key and a patch.
  """
  updateApplicationClaimsExcelDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationClaimsExcelDataByRowIdInput!
  ): UpdateApplicationClaimsExcelDataPayload

  """
  Updates a single `ApplicationCommunityProgressReportData` using its globally unique id and a patch.
  """
  updateApplicationCommunityProgressReportData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationCommunityProgressReportDataInput!
  ): UpdateApplicationCommunityProgressReportDataPayload

  """
  Updates a single `ApplicationCommunityProgressReportData` using a unique key and a patch.
  """
  updateApplicationCommunityProgressReportDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationCommunityProgressReportDataByRowIdInput!
  ): UpdateApplicationCommunityProgressReportDataPayload

  """
  Updates a single `ApplicationCommunityReportExcelData` using its globally unique id and a patch.
  """
  updateApplicationCommunityReportExcelData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationCommunityReportExcelDataInput!
  ): UpdateApplicationCommunityReportExcelDataPayload

  """
  Updates a single `ApplicationCommunityReportExcelData` using a unique key and a patch.
  """
  updateApplicationCommunityReportExcelDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationCommunityReportExcelDataByRowIdInput!
  ): UpdateApplicationCommunityReportExcelDataPayload

  """
  Updates a single `ApplicationFormData` using its globally unique id and a patch.
  """
  updateApplicationFormData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationFormDataInput!
  ): UpdateApplicationFormDataPayload

  """Updates a single `ApplicationFormData` using a unique key and a patch."""
  updateApplicationFormDataByFormDataIdAndApplicationId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationFormDataByFormDataIdAndApplicationIdInput!
  ): UpdateApplicationFormDataPayload

  """
  Updates a single `ApplicationGisAssessmentHh` using its globally unique id and a patch.
  """
  updateApplicationGisAssessmentHh(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationGisAssessmentHhInput!
  ): UpdateApplicationGisAssessmentHhPayload

  """
  Updates a single `ApplicationGisAssessmentHh` using a unique key and a patch.
  """
  updateApplicationGisAssessmentHhByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationGisAssessmentHhByRowIdInput!
  ): UpdateApplicationGisAssessmentHhPayload

  """
  Updates a single `ApplicationGisData` using its globally unique id and a patch.
  """
  updateApplicationGisData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationGisDataInput!
  ): UpdateApplicationGisDataPayload

  """Updates a single `ApplicationGisData` using a unique key and a patch."""
  updateApplicationGisDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationGisDataByRowIdInput!
  ): UpdateApplicationGisDataPayload

  """
  Updates a single `ApplicationInternalDescription` using its globally unique id and a patch.
  """
  updateApplicationInternalDescription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationInternalDescriptionInput!
  ): UpdateApplicationInternalDescriptionPayload

  """
  Updates a single `ApplicationInternalDescription` using a unique key and a patch.
  """
  updateApplicationInternalDescriptionByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationInternalDescriptionByRowIdInput!
  ): UpdateApplicationInternalDescriptionPayload

  """
  Updates a single `ApplicationMilestoneData` using its globally unique id and a patch.
  """
  updateApplicationMilestoneData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationMilestoneDataInput!
  ): UpdateApplicationMilestoneDataPayload

  """
  Updates a single `ApplicationMilestoneData` using a unique key and a patch.
  """
  updateApplicationMilestoneDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationMilestoneDataByRowIdInput!
  ): UpdateApplicationMilestoneDataPayload

  """
  Updates a single `ApplicationMilestoneExcelData` using its globally unique id and a patch.
  """
  updateApplicationMilestoneExcelData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationMilestoneExcelDataInput!
  ): UpdateApplicationMilestoneExcelDataPayload

  """
  Updates a single `ApplicationMilestoneExcelData` using a unique key and a patch.
  """
  updateApplicationMilestoneExcelDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationMilestoneExcelDataByRowIdInput!
  ): UpdateApplicationMilestoneExcelDataPayload

  """
  Updates a single `ApplicationPackage` using its globally unique id and a patch.
  """
  updateApplicationPackage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationPackageInput!
  ): UpdateApplicationPackagePayload

  """Updates a single `ApplicationPackage` using a unique key and a patch."""
  updateApplicationPackageByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationPackageByRowIdInput!
  ): UpdateApplicationPackagePayload

  """
  Updates a single `ApplicationPendingChangeRequest` using its globally unique id and a patch.
  """
  updateApplicationPendingChangeRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationPendingChangeRequestInput!
  ): UpdateApplicationPendingChangeRequestPayload

  """
  Updates a single `ApplicationPendingChangeRequest` using a unique key and a patch.
  """
  updateApplicationPendingChangeRequestByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationPendingChangeRequestByRowIdInput!
  ): UpdateApplicationPendingChangeRequestPayload

  """
  Updates a single `ApplicationProjectType` using its globally unique id and a patch.
  """
  updateApplicationProjectType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationProjectTypeInput!
  ): UpdateApplicationProjectTypePayload

  """
  Updates a single `ApplicationProjectType` using a unique key and a patch.
  """
  updateApplicationProjectTypeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationProjectTypeByRowIdInput!
  ): UpdateApplicationProjectTypePayload

  """
  Updates a single `ApplicationRfiData` using its globally unique id and a patch.
  """
  updateApplicationRfiData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationRfiDataInput!
  ): UpdateApplicationRfiDataPayload

  """Updates a single `ApplicationRfiData` using a unique key and a patch."""
  updateApplicationRfiDataByRfiDataIdAndApplicationId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationRfiDataByRfiDataIdAndApplicationIdInput!
  ): UpdateApplicationRfiDataPayload

  """
  Updates a single `ApplicationSowData` using its globally unique id and a patch.
  """
  updateApplicationSowData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationSowDataInput!
  ): UpdateApplicationSowDataPayload

  """Updates a single `ApplicationSowData` using a unique key and a patch."""
  updateApplicationSowDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationSowDataByRowIdInput!
  ): UpdateApplicationSowDataPayload

  """
  Updates a single `ApplicationStatus` using its globally unique id and a patch.
  """
  updateApplicationStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationStatusInput!
  ): UpdateApplicationStatusPayload

  """Updates a single `ApplicationStatus` using a unique key and a patch."""
  updateApplicationStatusByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationStatusByRowIdInput!
  ): UpdateApplicationStatusPayload

  """
  Updates a single `ApplicationStatusType` using its globally unique id and a patch.
  """
  updateApplicationStatusType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationStatusTypeInput!
  ): UpdateApplicationStatusTypePayload

  """
  Updates a single `ApplicationStatusType` using a unique key and a patch.
  """
  updateApplicationStatusTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationStatusTypeByNameInput!
  ): UpdateApplicationStatusTypePayload

  """
  Updates a single `ApplicationStatusType` using a unique key and a patch.
  """
  updateApplicationStatusTypeByStatusOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationStatusTypeByStatusOrderInput!
  ): UpdateApplicationStatusTypePayload

  """
  Updates a single `AssessmentData` using its globally unique id and a patch.
  """
  updateAssessmentData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAssessmentDataInput!
  ): UpdateAssessmentDataPayload

  """Updates a single `AssessmentData` using a unique key and a patch."""
  updateAssessmentDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAssessmentDataByRowIdInput!
  ): UpdateAssessmentDataPayload

  """
  Updates a single `AssessmentType` using its globally unique id and a patch.
  """
  updateAssessmentType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAssessmentTypeInput!
  ): UpdateAssessmentTypePayload

  """Updates a single `AssessmentType` using a unique key and a patch."""
  updateAssessmentTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAssessmentTypeByNameInput!
  ): UpdateAssessmentTypePayload

  """
  Updates a single `Attachment` using its globally unique id and a patch.
  """
  updateAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAttachmentInput!
  ): UpdateAttachmentPayload

  """Updates a single `Attachment` using a unique key and a patch."""
  updateAttachmentByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAttachmentByRowIdInput!
  ): UpdateAttachmentPayload

  """Updates a single `Cbc` using its globally unique id and a patch."""
  updateCbc(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCbcInput!
  ): UpdateCbcPayload

  """Updates a single `Cbc` using a unique key and a patch."""
  updateCbcByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCbcByRowIdInput!
  ): UpdateCbcPayload

  """Updates a single `Cbc` using a unique key and a patch."""
  updateCbcByProjectNumber(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCbcByProjectNumberInput!
  ): UpdateCbcPayload

  """
  Updates a single `CbcApplicationPendingChangeRequest` using its globally unique id and a patch.
  """
  updateCbcApplicationPendingChangeRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCbcApplicationPendingChangeRequestInput!
  ): UpdateCbcApplicationPendingChangeRequestPayload

  """
  Updates a single `CbcApplicationPendingChangeRequest` using a unique key and a patch.
  """
  updateCbcApplicationPendingChangeRequestByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCbcApplicationPendingChangeRequestByRowIdInput!
  ): UpdateCbcApplicationPendingChangeRequestPayload

  """Updates a single `CbcData` using its globally unique id and a patch."""
  updateCbcData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCbcDataInput!
  ): UpdateCbcDataPayload

  """Updates a single `CbcData` using a unique key and a patch."""
  updateCbcDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCbcDataByRowIdInput!
  ): UpdateCbcDataPayload

  """
  Updates a single `CbcDataChangeReason` using its globally unique id and a patch.
  """
  updateCbcDataChangeReason(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCbcDataChangeReasonInput!
  ): UpdateCbcDataChangeReasonPayload

  """Updates a single `CbcDataChangeReason` using a unique key and a patch."""
  updateCbcDataChangeReasonByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCbcDataChangeReasonByRowIdInput!
  ): UpdateCbcDataChangeReasonPayload

  """
  Updates a single `CbcProject` using its globally unique id and a patch.
  """
  updateCbcProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCbcProjectInput!
  ): UpdateCbcProjectPayload

  """Updates a single `CbcProject` using a unique key and a patch."""
  updateCbcProjectByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCbcProjectByRowIdInput!
  ): UpdateCbcProjectPayload

  """
  Updates a single `CbcProjectCommunity` using its globally unique id and a patch.
  """
  updateCbcProjectCommunity(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCbcProjectCommunityInput!
  ): UpdateCbcProjectCommunityPayload

  """Updates a single `CbcProjectCommunity` using a unique key and a patch."""
  updateCbcProjectCommunityByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCbcProjectCommunityByRowIdInput!
  ): UpdateCbcProjectCommunityPayload

  """Updates a single `CcbcUser` using its globally unique id and a patch."""
  updateCcbcUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCcbcUserInput!
  ): UpdateCcbcUserPayload

  """Updates a single `CcbcUser` using a unique key and a patch."""
  updateCcbcUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCcbcUserByRowIdInput!
  ): UpdateCcbcUserPayload

  """
  Updates a single `ChangeRequestData` using its globally unique id and a patch.
  """
  updateChangeRequestData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChangeRequestDataInput!
  ): UpdateChangeRequestDataPayload

  """Updates a single `ChangeRequestData` using a unique key and a patch."""
  updateChangeRequestDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChangeRequestDataByRowIdInput!
  ): UpdateChangeRequestDataPayload

  """
  Updates a single `CommunitiesSourceData` using its globally unique id and a patch.
  """
  updateCommunitiesSourceData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCommunitiesSourceDataInput!
  ): UpdateCommunitiesSourceDataPayload

  """
  Updates a single `CommunitiesSourceData` using a unique key and a patch.
  """
  updateCommunitiesSourceDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCommunitiesSourceDataByRowIdInput!
  ): UpdateCommunitiesSourceDataPayload

  """
  Updates a single `CommunitiesSourceData` using a unique key and a patch.
  """
  updateCommunitiesSourceDataByGeographicNameId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCommunitiesSourceDataByGeographicNameIdInput!
  ): UpdateCommunitiesSourceDataPayload

  """
  Updates a single `ConditionalApprovalData` using its globally unique id and a patch.
  """
  updateConditionalApprovalData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateConditionalApprovalDataInput!
  ): UpdateConditionalApprovalDataPayload

  """
  Updates a single `ConditionalApprovalData` using a unique key and a patch.
  """
  updateConditionalApprovalDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateConditionalApprovalDataByRowIdInput!
  ): UpdateConditionalApprovalDataPayload

  """
  Updates a single `EmailRecord` using its globally unique id and a patch.
  """
  updateEmailRecord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmailRecordInput!
  ): UpdateEmailRecordPayload

  """Updates a single `EmailRecord` using a unique key and a patch."""
  updateEmailRecordByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmailRecordByRowIdInput!
  ): UpdateEmailRecordPayload

  """Updates a single `Form` using its globally unique id and a patch."""
  updateForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormInput!
  ): UpdateFormPayload

  """Updates a single `Form` using a unique key and a patch."""
  updateFormByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormByRowIdInput!
  ): UpdateFormPayload

  """Updates a single `Form` using a unique key and a patch."""
  updateFormBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormBySlugInput!
  ): UpdateFormPayload

  """Updates a single `FormData` using its globally unique id and a patch."""
  updateFormData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormDataInput!
  ): UpdateFormDataPayload

  """Updates a single `FormData` using a unique key and a patch."""
  updateFormDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormDataByRowIdInput!
  ): UpdateFormDataPayload

  """
  Updates a single `FormDataStatusType` using its globally unique id and a patch.
  """
  updateFormDataStatusType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormDataStatusTypeInput!
  ): UpdateFormDataStatusTypePayload

  """Updates a single `FormDataStatusType` using a unique key and a patch."""
  updateFormDataStatusTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormDataStatusTypeByNameInput!
  ): UpdateFormDataStatusTypePayload

  """Updates a single `FormType` using its globally unique id and a patch."""
  updateFormType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormTypeInput!
  ): UpdateFormTypePayload

  """Updates a single `FormType` using a unique key and a patch."""
  updateFormTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormTypeByNameInput!
  ): UpdateFormTypePayload

  """
  Updates a single `GaplessCounter` using its globally unique id and a patch.
  """
  updateGaplessCounter(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGaplessCounterInput!
  ): UpdateGaplessCounterPayload

  """Updates a single `GaplessCounter` using a unique key and a patch."""
  updateGaplessCounterByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGaplessCounterByRowIdInput!
  ): UpdateGaplessCounterPayload

  """Updates a single `GisData` using its globally unique id and a patch."""
  updateGisData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGisDataInput!
  ): UpdateGisDataPayload

  """Updates a single `GisData` using a unique key and a patch."""
  updateGisDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGisDataByRowIdInput!
  ): UpdateGisDataPayload

  """
  Updates a single `Notification` using its globally unique id and a patch.
  """
  updateNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNotificationInput!
  ): UpdateNotificationPayload

  """Updates a single `Notification` using a unique key and a patch."""
  updateNotificationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNotificationByRowIdInput!
  ): UpdateNotificationPayload

  """
  Updates a single `ProjectInformationData` using its globally unique id and a patch.
  """
  updateProjectInformationData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectInformationDataInput!
  ): UpdateProjectInformationDataPayload

  """
  Updates a single `ProjectInformationData` using a unique key and a patch.
  """
  updateProjectInformationDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectInformationDataByRowIdInput!
  ): UpdateProjectInformationDataPayload

  """
  Updates a single `RecordVersion` using its globally unique id and a patch.
  """
  updateRecordVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRecordVersionInput!
  ): UpdateRecordVersionPayload

  """Updates a single `RecordVersion` using a unique key and a patch."""
  updateRecordVersionByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRecordVersionByRowIdInput!
  ): UpdateRecordVersionPayload

  """Updates a single `RfiData` using its globally unique id and a patch."""
  updateRfiData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRfiDataInput!
  ): UpdateRfiDataPayload

  """Updates a single `RfiData` using a unique key and a patch."""
  updateRfiDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRfiDataByRowIdInput!
  ): UpdateRfiDataPayload

  """
  Updates a single `RfiDataStatusType` using its globally unique id and a patch.
  """
  updateRfiDataStatusType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRfiDataStatusTypeInput!
  ): UpdateRfiDataStatusTypePayload

  """Updates a single `RfiDataStatusType` using a unique key and a patch."""
  updateRfiDataStatusTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRfiDataStatusTypeByNameInput!
  ): UpdateRfiDataStatusTypePayload

  """Updates a single `SowTab1` using its globally unique id and a patch."""
  updateSowTab1(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSowTab1Input!
  ): UpdateSowTab1Payload

  """Updates a single `SowTab1` using a unique key and a patch."""
  updateSowTab1ByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSowTab1ByRowIdInput!
  ): UpdateSowTab1Payload

  """Updates a single `SowTab2` using its globally unique id and a patch."""
  updateSowTab2(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSowTab2Input!
  ): UpdateSowTab2Payload

  """Updates a single `SowTab2` using a unique key and a patch."""
  updateSowTab2ByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSowTab2ByRowIdInput!
  ): UpdateSowTab2Payload

  """Updates a single `SowTab7` using its globally unique id and a patch."""
  updateSowTab7(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSowTab7Input!
  ): UpdateSowTab7Payload

  """Updates a single `SowTab7` using a unique key and a patch."""
  updateSowTab7ByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSowTab7ByRowIdInput!
  ): UpdateSowTab7Payload

  """Updates a single `SowTab8` using its globally unique id and a patch."""
  updateSowTab8(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSowTab8Input!
  ): UpdateSowTab8Payload

  """Updates a single `SowTab8` using a unique key and a patch."""
  updateSowTab8ByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSowTab8ByRowIdInput!
  ): UpdateSowTab8Payload

  """Deletes a single `Analyst` using its globally unique id."""
  deleteAnalyst(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAnalystInput!
  ): DeleteAnalystPayload

  """Deletes a single `Analyst` using a unique key."""
  deleteAnalystByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAnalystByRowIdInput!
  ): DeleteAnalystPayload

  """
  Deletes a single `ApplicationAnalystLead` using its globally unique id.
  """
  deleteApplicationAnalystLead(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationAnalystLeadInput!
  ): DeleteApplicationAnalystLeadPayload

  """Deletes a single `ApplicationAnalystLead` using a unique key."""
  deleteApplicationAnalystLeadByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationAnalystLeadByRowIdInput!
  ): DeleteApplicationAnalystLeadPayload

  """Deletes a single `ApplicationAnnounced` using its globally unique id."""
  deleteApplicationAnnounced(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationAnnouncedInput!
  ): DeleteApplicationAnnouncedPayload

  """Deletes a single `ApplicationAnnounced` using a unique key."""
  deleteApplicationAnnouncedByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationAnnouncedByRowIdInput!
  ): DeleteApplicationAnnouncedPayload

  """
  Deletes a single `ApplicationAnnouncement` using its globally unique id.
  """
  deleteApplicationAnnouncement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationAnnouncementInput!
  ): DeleteApplicationAnnouncementPayload

  """Deletes a single `ApplicationAnnouncement` using a unique key."""
  deleteApplicationAnnouncementByAnnouncementIdAndApplicationId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationAnnouncementByAnnouncementIdAndApplicationIdInput!
  ): DeleteApplicationAnnouncementPayload

  """Deletes a single `ApplicationFormData` using its globally unique id."""
  deleteApplicationFormData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationFormDataInput!
  ): DeleteApplicationFormDataPayload

  """Deletes a single `ApplicationFormData` using a unique key."""
  deleteApplicationFormDataByFormDataIdAndApplicationId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationFormDataByFormDataIdAndApplicationIdInput!
  ): DeleteApplicationFormDataPayload

  """
  Deletes a single `ApplicationGisAssessmentHh` using its globally unique id.
  """
  deleteApplicationGisAssessmentHh(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationGisAssessmentHhInput!
  ): DeleteApplicationGisAssessmentHhPayload

  """Deletes a single `ApplicationGisAssessmentHh` using a unique key."""
  deleteApplicationGisAssessmentHhByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationGisAssessmentHhByRowIdInput!
  ): DeleteApplicationGisAssessmentHhPayload

  """Deletes a single `ApplicationGisData` using its globally unique id."""
  deleteApplicationGisData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationGisDataInput!
  ): DeleteApplicationGisDataPayload

  """Deletes a single `ApplicationGisData` using a unique key."""
  deleteApplicationGisDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationGisDataByRowIdInput!
  ): DeleteApplicationGisDataPayload

  """Deletes a single `ApplicationPackage` using its globally unique id."""
  deleteApplicationPackage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationPackageInput!
  ): DeleteApplicationPackagePayload

  """Deletes a single `ApplicationPackage` using a unique key."""
  deleteApplicationPackageByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationPackageByRowIdInput!
  ): DeleteApplicationPackagePayload

  """
  Deletes a single `ApplicationPendingChangeRequest` using its globally unique id.
  """
  deleteApplicationPendingChangeRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationPendingChangeRequestInput!
  ): DeleteApplicationPendingChangeRequestPayload

  """Deletes a single `ApplicationPendingChangeRequest` using a unique key."""
  deleteApplicationPendingChangeRequestByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationPendingChangeRequestByRowIdInput!
  ): DeleteApplicationPendingChangeRequestPayload

  """
  Deletes a single `ApplicationProjectType` using its globally unique id.
  """
  deleteApplicationProjectType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationProjectTypeInput!
  ): DeleteApplicationProjectTypePayload

  """Deletes a single `ApplicationProjectType` using a unique key."""
  deleteApplicationProjectTypeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationProjectTypeByRowIdInput!
  ): DeleteApplicationProjectTypePayload

  """Deletes a single `ApplicationRfiData` using its globally unique id."""
  deleteApplicationRfiData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationRfiDataInput!
  ): DeleteApplicationRfiDataPayload

  """Deletes a single `ApplicationRfiData` using a unique key."""
  deleteApplicationRfiDataByRfiDataIdAndApplicationId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationRfiDataByRfiDataIdAndApplicationIdInput!
  ): DeleteApplicationRfiDataPayload

  """Deletes a single `ApplicationStatus` using its globally unique id."""
  deleteApplicationStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationStatusInput!
  ): DeleteApplicationStatusPayload

  """Deletes a single `ApplicationStatus` using a unique key."""
  deleteApplicationStatusByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationStatusByRowIdInput!
  ): DeleteApplicationStatusPayload

  """Deletes a single `ApplicationStatusType` using its globally unique id."""
  deleteApplicationStatusType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationStatusTypeInput!
  ): DeleteApplicationStatusTypePayload

  """Deletes a single `ApplicationStatusType` using a unique key."""
  deleteApplicationStatusTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationStatusTypeByNameInput!
  ): DeleteApplicationStatusTypePayload

  """Deletes a single `ApplicationStatusType` using a unique key."""
  deleteApplicationStatusTypeByStatusOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationStatusTypeByStatusOrderInput!
  ): DeleteApplicationStatusTypePayload

  """Deletes a single `AssessmentData` using its globally unique id."""
  deleteAssessmentData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAssessmentDataInput!
  ): DeleteAssessmentDataPayload

  """Deletes a single `AssessmentData` using a unique key."""
  deleteAssessmentDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAssessmentDataByRowIdInput!
  ): DeleteAssessmentDataPayload

  """Deletes a single `AssessmentType` using its globally unique id."""
  deleteAssessmentType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAssessmentTypeInput!
  ): DeleteAssessmentTypePayload

  """Deletes a single `AssessmentType` using a unique key."""
  deleteAssessmentTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAssessmentTypeByNameInput!
  ): DeleteAssessmentTypePayload

  """Deletes a single `Attachment` using its globally unique id."""
  deleteAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAttachmentInput!
  ): DeleteAttachmentPayload

  """Deletes a single `Attachment` using a unique key."""
  deleteAttachmentByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAttachmentByRowIdInput!
  ): DeleteAttachmentPayload

  """Deletes a single `Cbc` using its globally unique id."""
  deleteCbc(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCbcInput!
  ): DeleteCbcPayload

  """Deletes a single `Cbc` using a unique key."""
  deleteCbcByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCbcByRowIdInput!
  ): DeleteCbcPayload

  """Deletes a single `Cbc` using a unique key."""
  deleteCbcByProjectNumber(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCbcByProjectNumberInput!
  ): DeleteCbcPayload

  """
  Deletes a single `CbcApplicationPendingChangeRequest` using its globally unique id.
  """
  deleteCbcApplicationPendingChangeRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCbcApplicationPendingChangeRequestInput!
  ): DeleteCbcApplicationPendingChangeRequestPayload

  """
  Deletes a single `CbcApplicationPendingChangeRequest` using a unique key.
  """
  deleteCbcApplicationPendingChangeRequestByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCbcApplicationPendingChangeRequestByRowIdInput!
  ): DeleteCbcApplicationPendingChangeRequestPayload

  """Deletes a single `CbcData` using its globally unique id."""
  deleteCbcData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCbcDataInput!
  ): DeleteCbcDataPayload

  """Deletes a single `CbcData` using a unique key."""
  deleteCbcDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCbcDataByRowIdInput!
  ): DeleteCbcDataPayload

  """Deletes a single `CbcDataChangeReason` using its globally unique id."""
  deleteCbcDataChangeReason(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCbcDataChangeReasonInput!
  ): DeleteCbcDataChangeReasonPayload

  """Deletes a single `CbcDataChangeReason` using a unique key."""
  deleteCbcDataChangeReasonByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCbcDataChangeReasonByRowIdInput!
  ): DeleteCbcDataChangeReasonPayload

  """Deletes a single `CbcProjectCommunity` using its globally unique id."""
  deleteCbcProjectCommunity(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCbcProjectCommunityInput!
  ): DeleteCbcProjectCommunityPayload

  """Deletes a single `CbcProjectCommunity` using a unique key."""
  deleteCbcProjectCommunityByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCbcProjectCommunityByRowIdInput!
  ): DeleteCbcProjectCommunityPayload

  """Deletes a single `CcbcUser` using its globally unique id."""
  deleteCcbcUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCcbcUserInput!
  ): DeleteCcbcUserPayload

  """Deletes a single `CcbcUser` using a unique key."""
  deleteCcbcUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCcbcUserByRowIdInput!
  ): DeleteCcbcUserPayload

  """Deletes a single `ChangeRequestData` using its globally unique id."""
  deleteChangeRequestData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChangeRequestDataInput!
  ): DeleteChangeRequestDataPayload

  """Deletes a single `ChangeRequestData` using a unique key."""
  deleteChangeRequestDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChangeRequestDataByRowIdInput!
  ): DeleteChangeRequestDataPayload

  """Deletes a single `CommunitiesSourceData` using its globally unique id."""
  deleteCommunitiesSourceData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCommunitiesSourceDataInput!
  ): DeleteCommunitiesSourceDataPayload

  """Deletes a single `CommunitiesSourceData` using a unique key."""
  deleteCommunitiesSourceDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCommunitiesSourceDataByRowIdInput!
  ): DeleteCommunitiesSourceDataPayload

  """Deletes a single `CommunitiesSourceData` using a unique key."""
  deleteCommunitiesSourceDataByGeographicNameId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCommunitiesSourceDataByGeographicNameIdInput!
  ): DeleteCommunitiesSourceDataPayload

  """
  Deletes a single `ConditionalApprovalData` using its globally unique id.
  """
  deleteConditionalApprovalData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteConditionalApprovalDataInput!
  ): DeleteConditionalApprovalDataPayload

  """Deletes a single `ConditionalApprovalData` using a unique key."""
  deleteConditionalApprovalDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteConditionalApprovalDataByRowIdInput!
  ): DeleteConditionalApprovalDataPayload

  """Deletes a single `EmailRecord` using its globally unique id."""
  deleteEmailRecord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmailRecordInput!
  ): DeleteEmailRecordPayload

  """Deletes a single `EmailRecord` using a unique key."""
  deleteEmailRecordByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmailRecordByRowIdInput!
  ): DeleteEmailRecordPayload

  """Deletes a single `Form` using its globally unique id."""
  deleteForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormInput!
  ): DeleteFormPayload

  """Deletes a single `Form` using a unique key."""
  deleteFormByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormByRowIdInput!
  ): DeleteFormPayload

  """Deletes a single `Form` using a unique key."""
  deleteFormBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormBySlugInput!
  ): DeleteFormPayload

  """Deletes a single `FormData` using its globally unique id."""
  deleteFormData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormDataInput!
  ): DeleteFormDataPayload

  """Deletes a single `FormData` using a unique key."""
  deleteFormDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormDataByRowIdInput!
  ): DeleteFormDataPayload

  """Deletes a single `FormDataStatusType` using its globally unique id."""
  deleteFormDataStatusType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormDataStatusTypeInput!
  ): DeleteFormDataStatusTypePayload

  """Deletes a single `FormDataStatusType` using a unique key."""
  deleteFormDataStatusTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormDataStatusTypeByNameInput!
  ): DeleteFormDataStatusTypePayload

  """Deletes a single `FormType` using its globally unique id."""
  deleteFormType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormTypeInput!
  ): DeleteFormTypePayload

  """Deletes a single `FormType` using a unique key."""
  deleteFormTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormTypeByNameInput!
  ): DeleteFormTypePayload

  """Deletes a single `GaplessCounter` using its globally unique id."""
  deleteGaplessCounter(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGaplessCounterInput!
  ): DeleteGaplessCounterPayload

  """Deletes a single `GaplessCounter` using a unique key."""
  deleteGaplessCounterByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGaplessCounterByRowIdInput!
  ): DeleteGaplessCounterPayload

  """Deletes a single `GisData` using its globally unique id."""
  deleteGisData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGisDataInput!
  ): DeleteGisDataPayload

  """Deletes a single `GisData` using a unique key."""
  deleteGisDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGisDataByRowIdInput!
  ): DeleteGisDataPayload

  """Deletes a single `Notification` using its globally unique id."""
  deleteNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNotificationInput!
  ): DeleteNotificationPayload

  """Deletes a single `Notification` using a unique key."""
  deleteNotificationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNotificationByRowIdInput!
  ): DeleteNotificationPayload

  """
  Deletes a single `ProjectInformationData` using its globally unique id.
  """
  deleteProjectInformationData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectInformationDataInput!
  ): DeleteProjectInformationDataPayload

  """Deletes a single `ProjectInformationData` using a unique key."""
  deleteProjectInformationDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectInformationDataByRowIdInput!
  ): DeleteProjectInformationDataPayload

  """Deletes a single `RecordVersion` using its globally unique id."""
  deleteRecordVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRecordVersionInput!
  ): DeleteRecordVersionPayload

  """Deletes a single `RecordVersion` using a unique key."""
  deleteRecordVersionByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRecordVersionByRowIdInput!
  ): DeleteRecordVersionPayload

  """Deletes a single `RfiData` using its globally unique id."""
  deleteRfiData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRfiDataInput!
  ): DeleteRfiDataPayload

  """Deletes a single `RfiData` using a unique key."""
  deleteRfiDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRfiDataByRowIdInput!
  ): DeleteRfiDataPayload

  """Deletes a single `RfiDataStatusType` using its globally unique id."""
  deleteRfiDataStatusType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRfiDataStatusTypeInput!
  ): DeleteRfiDataStatusTypePayload

  """Deletes a single `RfiDataStatusType` using a unique key."""
  deleteRfiDataStatusTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRfiDataStatusTypeByNameInput!
  ): DeleteRfiDataStatusTypePayload

  """Deletes a single `SowTab1` using its globally unique id."""
  deleteSowTab1(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSowTab1Input!
  ): DeleteSowTab1Payload

  """Deletes a single `SowTab1` using a unique key."""
  deleteSowTab1ByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSowTab1ByRowIdInput!
  ): DeleteSowTab1Payload

  """Deletes a single `SowTab2` using its globally unique id."""
  deleteSowTab2(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSowTab2Input!
  ): DeleteSowTab2Payload

  """Deletes a single `SowTab2` using a unique key."""
  deleteSowTab2ByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSowTab2ByRowIdInput!
  ): DeleteSowTab2Payload

  """Deletes a single `SowTab7` using its globally unique id."""
  deleteSowTab7(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSowTab7Input!
  ): DeleteSowTab7Payload

  """Deletes a single `SowTab7` using a unique key."""
  deleteSowTab7ByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSowTab7ByRowIdInput!
  ): DeleteSowTab7Payload

  """Deletes a single `SowTab8` using its globally unique id."""
  deleteSowTab8(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSowTab8Input!
  ): DeleteSowTab8Payload

  """Deletes a single `SowTab8` using a unique key."""
  deleteSowTab8ByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSowTab8ByRowIdInput!
  ): DeleteSowTab8Payload

  """Mutation to archive an application and its related data"""
  archiveApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ArchiveApplicationInput!
  ): ArchiveApplicationPayload

  """
  Mutation to archive an application claims data as well as the associated excel data
  """
  archiveApplicationClaimsData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ArchiveApplicationClaimsDataInput!
  ): ArchiveApplicationClaimsDataPayload

  """
  Mutation to archive an application community progress report as well as the excel data
  """
  archiveApplicationCommunityProgressReport(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ArchiveApplicationCommunityProgressReportInput!
  ): ArchiveApplicationCommunityProgressReportPayload

  """Mutation to archive an application milestone as well as the excel data"""
  archiveApplicationMilestoneData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ArchiveApplicationMilestoneDataInput!
  ): ArchiveApplicationMilestoneDataPayload
  archiveApplicationSow(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ArchiveApplicationSowInput!
  ): ArchiveApplicationSowPayload

  """Function to archive intake"""
  archiveIntake(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ArchiveIntakeInput!
  ): ArchiveIntakePayload
  createAnnouncement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAnnouncementInput!
  ): CreateAnnouncementPayload
  createApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationInput!
  ): CreateApplicationPayload
  createApplicationAnnouncedRecord(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationAnnouncedRecordInput!
  ): CreateApplicationAnnouncedRecordPayload
  createApplicationClaimsData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationClaimsDataInput!
  ): CreateApplicationClaimsDataPayload
  createApplicationClaimsExcelData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationClaimsExcelDataInput!
  ): CreateApplicationClaimsExcelDataPayload
  createApplicationCommunityProgressReportData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationCommunityProgressReportDataInput!
  ): CreateApplicationCommunityProgressReportDataPayload
  createApplicationCommunityReportExcelData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationCommunityReportExcelDataInput!
  ): CreateApplicationCommunityReportExcelDataPayload
  createApplicationInternalDescription(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationInternalDescriptionInput!
  ): CreateApplicationInternalDescriptionPayload
  createApplicationMilestoneData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationMilestoneDataInput!
  ): CreateApplicationMilestoneDataPayload
  createApplicationMilestoneExcelData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationMilestoneExcelDataInput!
  ): CreateApplicationMilestoneExcelDataPayload
  createApplicationSowData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationSowDataInput!
  ): CreateApplicationSowDataPayload
  createAssessmentForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAssessmentFormInput!
  ): CreateAssessmentFormPayload
  createCbcPendingChangeRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCbcPendingChangeRequestInput!
  ): CreateCbcPendingChangeRequestPayload
  createCbcProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCbcProjectInput!
  ): CreateCbcProjectPayload
  createChangeRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChangeRequestInput!
  ): CreateChangeRequestPayload
  createConditionalApproval(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateConditionalApprovalInput!
  ): CreateConditionalApprovalPayload
  createEmailNotifications(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEmailNotificationsInput!
  ): CreateEmailNotificationsPayload

  """Function to create intakes for the ccbc admin"""
  createHiddenIntake(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHiddenIntakeInput!
  ): CreateHiddenIntakePayload

  """Function to create intakes for the ccbc admin"""
  createIntake(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateIntakeInput!
  ): CreateIntakePayload
  createNewFormData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNewFormDataInput!
  ): CreateNewFormDataPayload
  createPackage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePackageInput!
  ): CreatePackagePayload
  createPendingChangeRequest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePendingChangeRequestInput!
  ): CreatePendingChangeRequestPayload
  createProjectInformation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectInformationInput!
  ): CreateProjectInformationPayload
  createProjectType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectTypeInput!
  ): CreateProjectTypePayload
  createRfi(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRfiInput!
  ): CreateRfiPayload
  createUserFromSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserFromSessionInput!
  ): CreateUserFromSessionPayload
  deleteAnnouncement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAnnouncementInput!
  ): DeleteAnnouncementPayload
  deleteCommunityProgressReport(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCommunityProgressReportInput!
  ): DeleteCommunityProgressReportPayload
  importApplicationAnalystLead(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ImportApplicationAnalystLeadInput!
  ): ImportApplicationAnalystLeadPayload
  importApplicationCommunityProgressReportRecords(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ImportApplicationCommunityProgressReportRecordsInput!
  ): ImportApplicationCommunityProgressReportRecordsPayload
  importApplicationGisData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ImportApplicationGisDataInput!
  ): ImportApplicationGisDataPayload
  importApplicationPackages(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ImportApplicationPackagesInput!
  ): ImportApplicationPackagesPayload
  importApplicationStatuses(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ImportApplicationStatusesInput!
  ): ImportApplicationStatusesPayload
  importApplications(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ImportApplicationsInput!
  ): ImportApplicationsPayload
  importAssessmentData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ImportAssessmentDataInput!
  ): ImportAssessmentDataPayload
  importAttachments(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ImportAttachmentsInput!
  ): ImportAttachmentsPayload
  importFormData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ImportFormDataInput!
  ): ImportFormDataPayload
  importRfiData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ImportRfiDataInput!
  ): ImportRfiDataPayload

  """Utility funciton to increment counter on an id"""
  incrementCounter(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: IncrementCounterInput!
  ): IncrementCounterPayload
  parseGisData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ParseGisDataInput!
  ): ParseGisDataPayload

  """Detects closed intake and marks all submitted applications as Received"""
  receiveApplications(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ReceiveApplicationsInput!
  ): ReceiveApplicationsPayload

  """Detects any applications in a hidden intake and marks them as received"""
  receiveHiddenApplications(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ReceiveHiddenApplicationsInput!
  ): ReceiveHiddenApplicationsPayload
  saveGisAssessmentHh(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SaveGisAssessmentHhInput!
  ): SaveGisAssessmentHhPayload
  saveGisData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SaveGisDataInput!
  ): SaveGisDataPayload

  """populates archived columns for existing application_status records"""
  setApplicationStatusArchived(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SetApplicationStatusArchivedInput!
  ): SetApplicationStatusArchivedPayload
  submitApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SubmitApplicationInput!
  ): SubmitApplicationPayload
  submitConditionallyApproved(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SubmitConditionallyApprovedInput!
  ): SubmitConditionallyApprovedPayload
  updateAnnouncement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAnnouncementInput!
  ): UpdateAnnouncementPayload

  """
  Mutation to update the "application" form.
  This mutation should only be used by applicants as it sets the submission page data
  
  """
  updateApplicationForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationFormInput!
  ): UpdateApplicationFormPayload

  """Function to update intakes for the ccbc admin"""
  updateIntake(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIntakeInput!
  ): UpdateIntakePayload
  updateRfi(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRfiInput!
  ): UpdateRfiPayload

  """Mutation to change the status of an application to withdrawn"""
  withdrawApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: WithdrawApplicationInput!
  ): WithdrawApplicationPayload
}

"""The output of our create `Analyst` mutation."""
type CreateAnalystPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Analyst` that was created by this mutation."""
  analyst: Analyst

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `Analyst`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Analyst`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Analyst`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Analyst`. May be used by Relay 1."""
  analystEdge(
    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AnalystsEdge
}

"""All input for the create `Analyst` mutation."""
input CreateAnalystInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Analyst` to be created by this mutation."""
  analyst: AnalystInput!
}

"""An input for mutations affecting `Analyst`"""
input AnalystInput {
  """Analyst's first name"""
  givenName: String

  """Analyst's last name"""
  familyName: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Boolean column indicating whether the analyst is active or not."""
  active: Boolean

  """Analyst's email address"""
  email: String
}

"""The output of our create `ApplicationAnalystLead` mutation."""
type CreateApplicationAnalystLeadPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationAnalystLead` that was created by this mutation."""
  applicationAnalystLead: ApplicationAnalystLead

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationAnalystLead`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `Analyst` that is related to this `ApplicationAnalystLead`.
  """
  analystByAnalystId: Analyst

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnalystLead`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnalystLead`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnalystLead`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationAnalystLead`. May be used by Relay 1."""
  applicationAnalystLeadEdge(
    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationAnalystLeadsEdge
}

"""All input for the create `ApplicationAnalystLead` mutation."""
input CreateApplicationAnalystLeadInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ApplicationAnalystLead` to be created by this mutation."""
  applicationAnalystLead: ApplicationAnalystLeadInput!
}

"""An input for mutations affecting `ApplicationAnalystLead`"""
input ApplicationAnalystLeadInput {
  """ID of the application this analyst lead belongs to"""
  applicationId: Int

  """ID of the analyst this analyst lead belongs to"""
  analystId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `ApplicationAnnounced` mutation."""
type CreateApplicationAnnouncedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationAnnounced` that was created by this mutation."""
  applicationAnnounced: ApplicationAnnounced

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationAnnounced`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnounced`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnounced`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnounced`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationAnnounced`. May be used by Relay 1."""
  applicationAnnouncedEdge(
    """The method to use when ordering `ApplicationAnnounced`."""
    orderBy: [ApplicationAnnouncedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationAnnouncedsEdge
}

"""All input for the create `ApplicationAnnounced` mutation."""
input CreateApplicationAnnouncedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ApplicationAnnounced` to be created by this mutation."""
  applicationAnnounced: ApplicationAnnouncedInput!
}

"""An input for mutations affecting `ApplicationAnnounced`"""
input ApplicationAnnouncedInput {
  """ID of the application this record belongs to"""
  applicationId: Int

  """Whether the application has been announced by BC or ISED"""
  announced: Boolean

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `ApplicationAnnouncement` mutation."""
type CreateApplicationAnnouncementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationAnnouncement` that was created by this mutation."""
  applicationAnnouncement: ApplicationAnnouncement

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Announcement` that is related to this `ApplicationAnnouncement`.
  """
  announcementByAnnouncementId: Announcement

  """
  Reads a single `Application` that is related to this `ApplicationAnnouncement`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnouncement`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnouncement`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnouncement`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationAnnouncement`. May be used by Relay 1."""
  applicationAnnouncementEdge(
    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationAnnouncementsEdge
}

"""All input for the create `ApplicationAnnouncement` mutation."""
input CreateApplicationAnnouncementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ApplicationAnnouncement` to be created by this mutation."""
  applicationAnnouncement: ApplicationAnnouncementInput!
}

"""An input for mutations affecting `ApplicationAnnouncement`"""
input ApplicationAnnouncementInput {
  """The foreign key of a form"""
  announcementId: Int!

  """The foreign key of an application"""
  applicationId: Int!

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Flag to identify either announcement is primary or secondary"""
  isPrimary: Boolean

  """
  Column describing the operation (created, updated, deleted) for context on the history page
  """
  historyOperation: String
}

"""The output of our create `ApplicationFormData` mutation."""
type CreateApplicationFormDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationFormData` that was created by this mutation."""
  applicationFormData: ApplicationFormData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `FormData` that is related to this `ApplicationFormData`.
  """
  formDataByFormDataId: FormData

  """
  Reads a single `Application` that is related to this `ApplicationFormData`.
  """
  applicationByApplicationId: Application

  """An edge for our `ApplicationFormData`. May be used by Relay 1."""
  applicationFormDataEdge(
    """The method to use when ordering `ApplicationFormData`."""
    orderBy: [ApplicationFormDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationFormDataEdge
}

"""All input for the create `ApplicationFormData` mutation."""
input CreateApplicationFormDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ApplicationFormData` to be created by this mutation."""
  applicationFormData: ApplicationFormDataInput!
}

"""An input for mutations affecting `ApplicationFormData`"""
input ApplicationFormDataInput {
  """The foreign key of a form"""
  formDataId: Int!

  """The foreign key of an application"""
  applicationId: Int!
}

"""The output of our create `ApplicationGisAssessmentHh` mutation."""
type CreateApplicationGisAssessmentHhPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationGisAssessmentHh` that was created by this mutation."""
  applicationGisAssessmentHh: ApplicationGisAssessmentHh

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationGisAssessmentHh`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisAssessmentHh`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisAssessmentHh`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisAssessmentHh`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationGisAssessmentHh`. May be used by Relay 1."""
  applicationGisAssessmentHhEdge(
    """The method to use when ordering `ApplicationGisAssessmentHh`."""
    orderBy: [ApplicationGisAssessmentHhsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationGisAssessmentHhsEdge
}

"""All input for the create `ApplicationGisAssessmentHh` mutation."""
input CreateApplicationGisAssessmentHhInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ApplicationGisAssessmentHh` to be created by this mutation."""
  applicationGisAssessmentHh: ApplicationGisAssessmentHhInput!
}

"""An input for mutations affecting `ApplicationGisAssessmentHh`"""
input ApplicationGisAssessmentHhInput {
  """The application_id of the application this record is associated with"""
  applicationId: Int!

  """The number of eligible households"""
  eligible: Float

  """The number of eligible indigenous households"""
  eligibleIndigenous: Float

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `ApplicationGisData` mutation."""
type CreateApplicationGisDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationGisData` that was created by this mutation."""
  applicationGisData: ApplicationGisData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GisData` that is related to this `ApplicationGisData`."""
  gisDataByBatchId: GisData

  """
  Reads a single `Application` that is related to this `ApplicationGisData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationGisData`. May be used by Relay 1."""
  applicationGisDataEdge(
    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationGisDataEdge
}

"""All input for the create `ApplicationGisData` mutation."""
input CreateApplicationGisDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ApplicationGisData` to be created by this mutation."""
  applicationGisData: ApplicationGisDataInput!
}

"""An input for mutations affecting `ApplicationGisData`"""
input ApplicationGisDataInput {
  batchId: Int
  applicationId: Int

  """
  The data imported from the GIS data Excel file. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fapplication_gis_data.json)
  """
  jsonData: JSON

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `ApplicationPackage` mutation."""
type CreateApplicationPackagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationPackage` that was created by this mutation."""
  applicationPackage: ApplicationPackage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationPackage`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPackage`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPackage`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPackage`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationPackage`. May be used by Relay 1."""
  applicationPackageEdge(
    """The method to use when ordering `ApplicationPackage`."""
    orderBy: [ApplicationPackagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationPackagesEdge
}

"""All input for the create `ApplicationPackage` mutation."""
input CreateApplicationPackageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ApplicationPackage` to be created by this mutation."""
  applicationPackage: ApplicationPackageInput!
}

"""An input for mutations affecting `ApplicationPackage`"""
input ApplicationPackageInput {
  """The application_id of the application this record is associated with"""
  applicationId: Int

  """The package number the application is assigned to"""
  package: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `ApplicationPendingChangeRequest` mutation."""
type CreateApplicationPendingChangeRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ApplicationPendingChangeRequest` that was created by this mutation.
  """
  applicationPendingChangeRequest: ApplicationPendingChangeRequest

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationPendingChangeRequest`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPendingChangeRequest`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPendingChangeRequest`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPendingChangeRequest`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """
  An edge for our `ApplicationPendingChangeRequest`. May be used by Relay 1.
  """
  applicationPendingChangeRequestEdge(
    """The method to use when ordering `ApplicationPendingChangeRequest`."""
    orderBy: [ApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationPendingChangeRequestsEdge
}

"""All input for the create `ApplicationPendingChangeRequest` mutation."""
input CreateApplicationPendingChangeRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ApplicationPendingChangeRequest` to be created by this mutation."""
  applicationPendingChangeRequest: ApplicationPendingChangeRequestInput!
}

"""An input for mutations affecting `ApplicationPendingChangeRequest`"""
input ApplicationPendingChangeRequestInput {
  """
  ID of the application this application_pending_change_request belongs to
  """
  applicationId: Int

  """Column defining if the change request pending or not"""
  isPending: Boolean

  """
  Column containing the comment for the change request or completion of the change request
  """
  comment: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `ApplicationProjectType` mutation."""
type CreateApplicationProjectTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationProjectType` that was created by this mutation."""
  applicationProjectType: ApplicationProjectType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationProjectType`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationProjectType`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationProjectType`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationProjectType`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationProjectType`. May be used by Relay 1."""
  applicationProjectTypeEdge(
    """The method to use when ordering `ApplicationProjectType`."""
    orderBy: [ApplicationProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationProjectTypesEdge
}

"""All input for the create `ApplicationProjectType` mutation."""
input CreateApplicationProjectTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ApplicationProjectType` to be created by this mutation."""
  applicationProjectType: ApplicationProjectTypeInput!
}

"""An input for mutations affecting `ApplicationProjectType`"""
input ApplicationProjectTypeInput {
  """ID of the application this application_project_type belongs to"""
  applicationId: Int

  """Column containing the project type of the application"""
  projectType: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `ApplicationRfiData` mutation."""
type CreateApplicationRfiDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationRfiData` that was created by this mutation."""
  applicationRfiData: ApplicationRfiData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `RfiData` that is related to this `ApplicationRfiData`."""
  rfiDataByRfiDataId: RfiData

  """
  Reads a single `Application` that is related to this `ApplicationRfiData`.
  """
  applicationByApplicationId: Application

  """An edge for our `ApplicationRfiData`. May be used by Relay 1."""
  applicationRfiDataEdge(
    """The method to use when ordering `ApplicationRfiData`."""
    orderBy: [ApplicationRfiDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRfiDataEdge
}

"""All input for the create `ApplicationRfiData` mutation."""
input CreateApplicationRfiDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ApplicationRfiData` to be created by this mutation."""
  applicationRfiData: ApplicationRfiDataInput!
}

"""An input for mutations affecting `ApplicationRfiData`"""
input ApplicationRfiDataInput {
  """The foreign key of a form"""
  rfiDataId: Int!

  """The foreign key of an application"""
  applicationId: Int!
}

"""The output of our create `ApplicationStatus` mutation."""
type CreateApplicationStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationStatus` that was created by this mutation."""
  applicationStatus: ApplicationStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationStatus`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `ApplicationStatusType` that is related to this `ApplicationStatus`.
  """
  applicationStatusTypeByStatus: ApplicationStatusType

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByUpdatedBy: CcbcUser

  """An edge for our `ApplicationStatus`. May be used by Relay 1."""
  applicationStatusEdge(
    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusesEdge
}

"""All input for the create `ApplicationStatus` mutation."""
input CreateApplicationStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ApplicationStatus` to be created by this mutation."""
  applicationStatus: ApplicationStatusInput!
}

"""An input for mutations affecting `ApplicationStatus`"""
input ApplicationStatusInput {
  """ID of the application this status belongs to"""
  applicationId: Int

  """The status of the application"""
  status: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """Change reason for analyst status change"""
  changeReason: String

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime
}

"""The output of our create `ApplicationStatusType` mutation."""
type CreateApplicationStatusTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationStatusType` that was created by this mutation."""
  applicationStatusType: ApplicationStatusType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ApplicationStatusType`. May be used by Relay 1."""
  applicationStatusTypeEdge(
    """The method to use when ordering `ApplicationStatusType`."""
    orderBy: [ApplicationStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusTypesEdge
}

"""All input for the create `ApplicationStatusType` mutation."""
input CreateApplicationStatusTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ApplicationStatusType` to be created by this mutation."""
  applicationStatusType: ApplicationStatusTypeInput!
}

"""An input for mutations affecting `ApplicationStatusType`"""
input ApplicationStatusTypeInput {
  """Name of and primary key of the status of an application"""
  name: String!

  """Description of the status type"""
  description: String

  """
  Boolean column used to differentiate internal/external status by indicating whether the status is visible to the applicant or not.
  """
  visibleByApplicant: Boolean

  """The logical order in which the status should be displayed."""
  statusOrder: Int!

  """
  Boolean column used to differentiate internal/external status by indicating whether the status is visible to the analyst or not.
  """
  visibleByAnalyst: Boolean
}

"""The output of our create `AssessmentData` mutation."""
type CreateAssessmentDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AssessmentData` that was created by this mutation."""
  assessmentData: AssessmentData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Application` that is related to this `AssessmentData`."""
  applicationByApplicationId: Application

  """
  Reads a single `AssessmentType` that is related to this `AssessmentData`.
  """
  assessmentTypeByAssessmentDataType: AssessmentType

  """Reads a single `CcbcUser` that is related to this `AssessmentData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `AssessmentData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `AssessmentData`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `AssessmentData`. May be used by Relay 1."""
  assessmentDataEdge(
    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssessmentDataEdge
}

"""All input for the create `AssessmentData` mutation."""
input CreateAssessmentDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `AssessmentData` to be created by this mutation."""
  assessmentData: AssessmentDataInput!
}

"""An input for mutations affecting `AssessmentData`"""
input AssessmentDataInput {
  applicationId: Int!

  """
  The json form data of the assessment form. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fassessment_data.json)
  """
  jsonData: JSON
  assessmentDataType: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `AssessmentType` mutation."""
type CreateAssessmentTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AssessmentType` that was created by this mutation."""
  assessmentType: AssessmentType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `AssessmentType`. May be used by Relay 1."""
  assessmentTypeEdge(
    """The method to use when ordering `AssessmentType`."""
    orderBy: [AssessmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssessmentTypesEdge
}

"""All input for the create `AssessmentType` mutation."""
input CreateAssessmentTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `AssessmentType` to be created by this mutation."""
  assessmentType: AssessmentTypeInput!
}

"""An input for mutations affecting `AssessmentType`"""
input AssessmentTypeInput {
  """Name of and primary key of the type of an assessment"""
  name: String!

  """Description of the assessment type"""
  description: String
}

"""The output of our create `Attachment` mutation."""
type CreateAttachmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Attachment` that was created by this mutation."""
  attachment: Attachment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Application` that is related to this `Attachment`."""
  applicationByApplicationId: Application

  """
  Reads a single `ApplicationStatus` that is related to this `Attachment`.
  """
  applicationStatusByApplicationStatusId: ApplicationStatus

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Attachment`. May be used by Relay 1."""
  attachmentEdge(
    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsEdge
}

"""All input for the create `Attachment` mutation."""
input CreateAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Attachment` to be created by this mutation."""
  attachment: AttachmentInput!
}

"""An input for mutations affecting `Attachment`"""
input AttachmentInput {
  """
  Universally Unique ID for the attachment, created by the fastapi storage micro-service
  """
  file: UUID

  """Description of the attachment"""
  description: String

  """Original uploaded file name"""
  fileName: String

  """Original uploaded file type"""
  fileType: String

  """Original uploaded file size"""
  fileSize: String

  """
  The id of the project (ccbc_public.application.id) that the attachment was uploaded to
  """
  applicationId: Int!

  """
  The id of the application_status (ccbc_public.application_status.id) that the attachment references
  """
  applicationStatusId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `Cbc` mutation."""
type CreateCbcPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Cbc` that was created by this mutation."""
  cbc: Cbc

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `Cbc`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Cbc`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Cbc`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Cbc`. May be used by Relay 1."""
  cbcEdge(
    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CbcsEdge
}

"""All input for the create `Cbc` mutation."""
input CreateCbcInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Cbc` to be created by this mutation."""
  cbc: CbcInput!
}

"""An input for mutations affecting `Cbc`"""
input CbcInput {
  """The project number, unique for each project"""
  projectNumber: Int!

  """The timestamp of the last time the data was updated from sharepoint"""
  sharepointTimestamp: Datetime

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""
The output of our create `CbcApplicationPendingChangeRequest` mutation.
"""
type CreateCbcApplicationPendingChangeRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CbcApplicationPendingChangeRequest` that was created by this mutation.
  """
  cbcApplicationPendingChangeRequest: CbcApplicationPendingChangeRequest

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Cbc` that is related to this `CbcApplicationPendingChangeRequest`.
  """
  cbcByCbcId: Cbc

  """
  Reads a single `CcbcUser` that is related to this `CbcApplicationPendingChangeRequest`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CbcApplicationPendingChangeRequest`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CbcApplicationPendingChangeRequest`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """
  An edge for our `CbcApplicationPendingChangeRequest`. May be used by Relay 1.
  """
  cbcApplicationPendingChangeRequestEdge(
    """The method to use when ordering `CbcApplicationPendingChangeRequest`."""
    orderBy: [CbcApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CbcApplicationPendingChangeRequestsEdge
}

"""
All input for the create `CbcApplicationPendingChangeRequest` mutation.
"""
input CreateCbcApplicationPendingChangeRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `CbcApplicationPendingChangeRequest` to be created by this mutation.
  """
  cbcApplicationPendingChangeRequest: CbcApplicationPendingChangeRequestInput!
}

"""An input for mutations affecting `CbcApplicationPendingChangeRequest`"""
input CbcApplicationPendingChangeRequestInput {
  """
  ID of the cbc application this cbc_application_pending_change_request belongs to
  """
  cbcId: Int

  """Column defining if the change request pending or not"""
  isPending: Boolean

  """
  Column containing the comment for the change request or completion of the change request
  """
  comment: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `CbcData` mutation."""
type CreateCbcDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CbcData` that was created by this mutation."""
  cbcData: CbcData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Cbc` that is related to this `CbcData`."""
  cbcByCbcId: Cbc

  """Reads a single `Cbc` that is related to this `CbcData`."""
  cbcByProjectNumber: Cbc

  """Reads a single `CcbcUser` that is related to this `CbcData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CbcData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CbcData`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `CbcData`. May be used by Relay 1."""
  cbcDataEdge(
    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): CbcDataEdge
}

"""All input for the create `CbcData` mutation."""
input CreateCbcDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CbcData` to be created by this mutation."""
  cbcData: CbcDataInput!
}

"""An input for mutations affecting `CbcData`"""
input CbcDataInput {
  """ID of the cbc application this cbc_data belongs to"""
  cbcId: Int

  """Column containing the project number the cbc application is from"""
  projectNumber: Int
  jsonData: JSON
  sharepointTimestamp: Datetime

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `CbcDataChangeReason` mutation."""
type CreateCbcDataChangeReasonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CbcDataChangeReason` that was created by this mutation."""
  cbcDataChangeReason: CbcDataChangeReason

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CbcData` that is related to this `CbcDataChangeReason`.
  """
  cbcDataByCbcDataId: CbcData

  """
  Reads a single `CcbcUser` that is related to this `CbcDataChangeReason`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CbcDataChangeReason`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CbcDataChangeReason`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `CbcDataChangeReason`. May be used by Relay 1."""
  cbcDataChangeReasonEdge(
    """The method to use when ordering `CbcDataChangeReason`."""
    orderBy: [CbcDataChangeReasonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CbcDataChangeReasonsEdge
}

"""All input for the create `CbcDataChangeReason` mutation."""
input CreateCbcDataChangeReasonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CbcDataChangeReason` to be created by this mutation."""
  cbcDataChangeReason: CbcDataChangeReasonInput!
}

"""An input for mutations affecting `CbcDataChangeReason`"""
input CbcDataChangeReasonInput {
  """Unique ID for the cbc_data_change_reason"""
  rowId: Int

  """ID of the cbc_data this cbc_data_change_reason belongs to"""
  cbcDataId: Int!

  """The reason for the change to the cbc_data"""
  description: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `CbcProjectCommunity` mutation."""
type CreateCbcProjectCommunityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CbcProjectCommunity` that was created by this mutation."""
  cbcProjectCommunity: CbcProjectCommunity

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Cbc` that is related to this `CbcProjectCommunity`."""
  cbcByCbcId: Cbc

  """
  Reads a single `CommunitiesSourceData` that is related to this `CbcProjectCommunity`.
  """
  communitiesSourceDataByCommunitiesSourceDataId: CommunitiesSourceData

  """
  Reads a single `CcbcUser` that is related to this `CbcProjectCommunity`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CbcProjectCommunity`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CbcProjectCommunity`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `CbcProjectCommunity`. May be used by Relay 1."""
  cbcProjectCommunityEdge(
    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CbcProjectCommunitiesEdge
}

"""All input for the create `CbcProjectCommunity` mutation."""
input CreateCbcProjectCommunityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CbcProjectCommunity` to be created by this mutation."""
  cbcProjectCommunity: CbcProjectCommunityInput!
}

"""An input for mutations affecting `CbcProjectCommunity`"""
input CbcProjectCommunityInput {
  """The cbc id of the record"""
  cbcId: Int

  """The reference to the communities source data id"""
  communitiesSourceDataId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `CcbcUser` mutation."""
type CreateCcbcUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CcbcUser` that was created by this mutation."""
  ccbcUser: CcbcUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `CcbcUser`. May be used by Relay 1."""
  ccbcUserEdge(
    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CcbcUsersEdge
}

"""All input for the create `CcbcUser` mutation."""
input CreateCcbcUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CcbcUser` to be created by this mutation."""
  ccbcUser: CcbcUserInput!
}

"""An input for mutations affecting `CcbcUser`"""
input CcbcUserInput {
  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  sessionSub: String

  """User's first name"""
  givenName: String

  """User's last name"""
  familyName: String

  """User's email address"""
  emailAddress: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """User is an external analyst"""
  externalAnalyst: Boolean
}

"""The output of our create `ChangeRequestData` mutation."""
type CreateChangeRequestDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChangeRequestData` that was created by this mutation."""
  changeRequestData: ChangeRequestData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ChangeRequestData`.
  """
  applicationByApplicationId: Application

  """Reads a single `CcbcUser` that is related to this `ChangeRequestData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `ChangeRequestData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `ChangeRequestData`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ChangeRequestData`. May be used by Relay 1."""
  changeRequestDataEdge(
    """The method to use when ordering `ChangeRequestData`."""
    orderBy: [ChangeRequestDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeRequestDataEdge
}

"""All input for the create `ChangeRequestData` mutation."""
input CreateChangeRequestDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ChangeRequestData` to be created by this mutation."""
  changeRequestData: ChangeRequestDataInput!
}

"""An input for mutations affecting `ChangeRequestData`"""
input ChangeRequestDataInput {
  """The foreign key of an application"""
  applicationId: Int

  """The json form data of the change request form"""
  jsonData: JSON

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
  amendmentNumber: Int
}

"""The output of our create `CommunitiesSourceData` mutation."""
type CreateCommunitiesSourceDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CommunitiesSourceData` that was created by this mutation."""
  communitiesSourceData: CommunitiesSourceData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CcbcUser` that is related to this `CommunitiesSourceData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CommunitiesSourceData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CommunitiesSourceData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `CommunitiesSourceData`. May be used by Relay 1."""
  communitiesSourceDataEdge(
    """The method to use when ordering `CommunitiesSourceData`."""
    orderBy: [CommunitiesSourceDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommunitiesSourceDataEdge
}

"""All input for the create `CommunitiesSourceData` mutation."""
input CreateCommunitiesSourceDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CommunitiesSourceData` to be created by this mutation."""
  communitiesSourceData: CommunitiesSourceDataInput!
}

"""An input for mutations affecting `CommunitiesSourceData`"""
input CommunitiesSourceDataInput {
  """The unique Geographic Name Id"""
  geographicNameId: Int!

  """The Geographic Name"""
  bcGeographicName: String!

  """The type of the geograhic region"""
  geographicType: String

  """The regional district of the geograhic region"""
  regionalDistrict: String

  """The economic region of the geograhic region"""
  economicRegion: String

  """The latitude value of the geograhic region"""
  latitude: Float

  """The longitude value of the geograhic region"""
  longitude: Float

  """map url of the geograhic region for verification"""
  mapLink: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `ConditionalApprovalData` mutation."""
type CreateConditionalApprovalDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ConditionalApprovalData` that was created by this mutation."""
  conditionalApprovalData: ConditionalApprovalData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ConditionalApprovalData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ConditionalApprovalData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ConditionalApprovalData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ConditionalApprovalData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ConditionalApprovalData`. May be used by Relay 1."""
  conditionalApprovalDataEdge(
    """The method to use when ordering `ConditionalApprovalData`."""
    orderBy: [ConditionalApprovalDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConditionalApprovalDataEdge
}

"""All input for the create `ConditionalApprovalData` mutation."""
input CreateConditionalApprovalDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ConditionalApprovalData` to be created by this mutation."""
  conditionalApprovalData: ConditionalApprovalDataInput!
}

"""An input for mutations affecting `ConditionalApprovalData`"""
input ConditionalApprovalDataInput {
  """The foreign key of an application"""
  applicationId: Int

  """
  The json form data of the conditional approval form. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fconditional_approval_data.json)
  """
  jsonData: JSON

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `EmailRecord` mutation."""
type CreateEmailRecordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EmailRecord` that was created by this mutation."""
  emailRecord: EmailRecord

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `EmailRecord`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `EmailRecord`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `EmailRecord`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `EmailRecord`. May be used by Relay 1."""
  emailRecordEdge(
    """The method to use when ordering `EmailRecord`."""
    orderBy: [EmailRecordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmailRecordsEdge
}

"""All input for the create `EmailRecord` mutation."""
input CreateEmailRecordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EmailRecord` to be created by this mutation."""
  emailRecord: EmailRecordInput!
}

"""An input for mutations affecting `EmailRecord`"""
input EmailRecordInput {
  """Email Address(es) of the recipients"""
  toEmail: String

  """Email Address(es) of the CC recipients"""
  ccEmail: String

  """Subject of the email"""
  subject: String

  """Body of the email"""
  body: String

  """Message ID of the email returned by the email server"""
  messageId: String

  """Additional data for the email"""
  jsonData: JSON

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `Form` mutation."""
type CreateFormPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Form` that was created by this mutation."""
  form: Form

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `FormType` that is related to this `Form`."""
  formTypeByFormType: FormType

  """An edge for our `Form`. May be used by Relay 1."""
  formEdge(
    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsEdge
}

"""All input for the create `Form` mutation."""
input CreateFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Form` to be created by this mutation."""
  form: FormInput!
}

"""An input for mutations affecting `Form`"""
input FormInput {
  """The end url for the form data"""
  slug: String

  """The JSON schema for the respective form"""
  jsonSchema: JSON

  """Description of the form"""
  description: String

  """The type of form being stored"""
  formType: String
}

"""The output of our create `FormData` mutation."""
type CreateFormDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormData` that was created by this mutation."""
  formData: FormData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `FormDataStatusType` that is related to this `FormData`.
  """
  formDataStatusTypeByFormDataStatusTypeId: FormDataStatusType

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads a single `Form` that is related to this `FormData`."""
  formByFormSchemaId: Form

  """An edge for our `FormData`. May be used by Relay 1."""
  formDataEdge(
    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormDataEdge
}

"""All input for the create `FormData` mutation."""
input CreateFormDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FormData` to be created by this mutation."""
  formData: FormDataInput!
}

"""An input for mutations affecting `FormData`"""
input FormDataInput {
  """
  The json form data of the project information form. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fform_data.json)
  """
  jsonData: JSON

  """Column saving the key of the last edited form page"""
  lastEditedPage: String

  """Column referencing the form data status type, defaults to draft"""
  formDataStatusTypeId: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Schema for the respective form_data"""
  formSchemaId: Int

  """Column to track analysts reason for changing form data"""
  reasonForChange: String
}

"""The output of our create `FormDataStatusType` mutation."""
type CreateFormDataStatusTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormDataStatusType` that was created by this mutation."""
  formDataStatusType: FormDataStatusType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FormDataStatusType`. May be used by Relay 1."""
  formDataStatusTypeEdge(
    """The method to use when ordering `FormDataStatusType`."""
    orderBy: [FormDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormDataStatusTypesEdge
}

"""All input for the create `FormDataStatusType` mutation."""
input CreateFormDataStatusTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FormDataStatusType` to be created by this mutation."""
  formDataStatusType: FormDataStatusTypeInput!
}

"""An input for mutations affecting `FormDataStatusType`"""
input FormDataStatusTypeInput {
  """The name of the status type"""
  name: String!

  """The description of the status type"""
  description: String
}

"""The output of our create `FormType` mutation."""
type CreateFormTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormType` that was created by this mutation."""
  formType: FormType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FormType`. May be used by Relay 1."""
  formTypeEdge(
    """The method to use when ordering `FormType`."""
    orderBy: [FormTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormTypesEdge
}

"""All input for the create `FormType` mutation."""
input CreateFormTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FormType` to be created by this mutation."""
  formType: FormTypeInput!
}

"""An input for mutations affecting `FormType`"""
input FormTypeInput {
  """Primary key and unique identifier of the type of form"""
  name: String!

  """Description of the type of form"""
  description: String
}

"""The output of our create `GaplessCounter` mutation."""
type CreateGaplessCounterPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GaplessCounter` that was created by this mutation."""
  gaplessCounter: GaplessCounter

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `GaplessCounter`. May be used by Relay 1."""
  gaplessCounterEdge(
    """The method to use when ordering `GaplessCounter`."""
    orderBy: [GaplessCountersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GaplessCountersEdge
}

"""All input for the create `GaplessCounter` mutation."""
input CreateGaplessCounterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GaplessCounter` to be created by this mutation."""
  gaplessCounter: GaplessCounterInput!
}

"""An input for mutations affecting `GaplessCounter`"""
input GaplessCounterInput {
  """Primary key for the gapless counter"""
  counter: Int
}

"""The output of our create `GisData` mutation."""
type CreateGisDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GisData` that was created by this mutation."""
  gisData: GisData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `GisData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `GisData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `GisData`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `GisData`. May be used by Relay 1."""
  gisDataEdge(
    """The method to use when ordering `GisData`."""
    orderBy: [GisDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): GisDataEdge
}

"""All input for the create `GisData` mutation."""
input CreateGisDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GisData` to be created by this mutation."""
  gisData: GisDataInput!
}

"""An input for mutations affecting `GisData`"""
input GisDataInput {
  """
  The data imported from the GIS data Excel file. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fgis_data.json)
  """
  jsonData: JSON

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `HistoryItem` mutation."""
type CreateHistoryItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HistoryItem` that was created by this mutation."""
  historyItem: HistoryItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `HistoryItem`. May be used by Relay 1."""
  historyItemEdge(
    """The method to use when ordering `HistoryItem`."""
    orderBy: [HistoryItemsOrderBy!] = [NATURAL]
  ): HistoryItemsEdge
}

"""All input for the create `HistoryItem` mutation."""
input CreateHistoryItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `HistoryItem` to be created by this mutation."""
  historyItem: HistoryItemInput!
}

"""An input for mutations affecting `HistoryItem`"""
input HistoryItemInput {
  """Application Id."""
  applicationId: Int

  """Timestamp of the operation recorded."""
  createdAt: Datetime

  """Type of operation: INSERT/UPDATE/DELETE/TRUNCATE/SNAPSHOT."""
  op: Operation

  """Table name."""
  tableName: String

  """
  Identifier that uniquely identifies a record by primary key [primary key + table_oid].
  """
  recordId: UUID

  """New record in Json format."""
  record: JSON

  """Old record in Json format."""
  oldRecord: JSON

  """
  Main object affected by the operation (i.e. status, or file name or RFI type).
  """
  item: String

  """First Name of the user who performed the operation."""
  familyName: String

  """Last Name of the user who performed the operation."""
  givenName: String

  """Session sub of the user who performed the operation."""
  sessionSub: String

  """User is an external analyst"""
  externalAnalyst: Boolean
}

"""The output of our create `Notification` mutation."""
type CreateNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Notification` that was created by this mutation."""
  notification: Notification

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Application` that is related to this `Notification`."""
  applicationByApplicationId: Application

  """Reads a single `EmailRecord` that is related to this `Notification`."""
  emailRecordByEmailRecordId: EmailRecord

  """Reads a single `CcbcUser` that is related to this `Notification`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Notification`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Notification`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Notification`. May be used by Relay 1."""
  notificationEdge(
    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotificationsEdge
}

"""All input for the create `Notification` mutation."""
input CreateNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Notification` to be created by this mutation."""
  notification: NotificationInput!
}

"""An input for mutations affecting `Notification`"""
input NotificationInput {
  """Type of the notification"""
  notificationType: String

  """ID of the application this notification belongs to"""
  applicationId: Int

  """Additional data for the notification"""
  jsonData: JSON

  """Column referencing the email record"""
  emailRecordId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `ProjectInformationData` mutation."""
type CreateProjectInformationDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectInformationData` that was created by this mutation."""
  projectInformationData: ProjectInformationData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ProjectInformationData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ProjectInformationData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ProjectInformationData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ProjectInformationData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ProjectInformationData`. May be used by Relay 1."""
  projectInformationDataEdge(
    """The method to use when ordering `ProjectInformationData`."""
    orderBy: [ProjectInformationDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectInformationDataEdge
}

"""All input for the create `ProjectInformationData` mutation."""
input CreateProjectInformationDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProjectInformationData` to be created by this mutation."""
  projectInformationData: ProjectInformationDataInput!
}

"""An input for mutations affecting `ProjectInformationData`"""
input ProjectInformationDataInput {
  """The foreign key of an application"""
  applicationId: Int

  """
  The json form data of the project information form. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fproject_information_data.json)
  """
  jsonData: JSON

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `RecordVersion` mutation."""
type CreateRecordVersionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RecordVersion` that was created by this mutation."""
  recordVersion: RecordVersion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `RecordVersion`."""
  ccbcUserByCreatedBy: CcbcUser

  """An edge for our `RecordVersion`. May be used by Relay 1."""
  recordVersionEdge(
    """The method to use when ordering `RecordVersion`."""
    orderBy: [RecordVersionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RecordVersionsEdge
}

"""All input for the create `RecordVersion` mutation."""
input CreateRecordVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RecordVersion` to be created by this mutation."""
  recordVersion: RecordVersionInput!
}

"""An input for mutations affecting `RecordVersion`"""
input RecordVersionInput {
  """Primary key and unique identifier"""
  rowId: BigInt

  """The id of the record the history record is associated with"""
  recordId: UUID

  """
  The id of the previous version of the record the history record is associated with
  """
  oldRecordId: UUID

  """The operation performed on the record (created, updated, deleted)"""
  op: Operation!

  """The timestamp of the history record"""
  ts: Datetime

  """The oid of the table the record is associated with"""
  tableOid: BigFloat!

  """The schema of the table the record is associated with"""
  tableSchema: String!

  """The name of the table the record is associated with"""
  tableName: String!

  """The user that created the record"""
  createdBy: Int

  """The timestamp of when the record was created"""
  createdAt: Datetime!

  """The record in JSON format"""
  record: JSON

  """The previous version of the record in JSON format"""
  oldRecord: JSON
}

"""The output of our create `RfiData` mutation."""
type CreateRfiDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RfiData` that was created by this mutation."""
  rfiData: RfiData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `RfiDataStatusType` that is related to this `RfiData`."""
  rfiDataStatusTypeByRfiDataStatusTypeId: RfiDataStatusType

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `RfiData`. May be used by Relay 1."""
  rfiDataEdge(
    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): RfiDataEdge
}

"""All input for the create `RfiData` mutation."""
input CreateRfiDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RfiData` to be created by this mutation."""
  rfiData: RfiDataInput!
}

"""An input for mutations affecting `RfiData`"""
input RfiDataInput {
  """Reference number assigned to the RFI"""
  rfiNumber: String

  """
  The json form data of the RFI information form. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Frfi_data.json)
  """
  jsonData: JSON

  """Column referencing the form data status type, defaults to draft"""
  rfiDataStatusTypeId: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `RfiDataStatusType` mutation."""
type CreateRfiDataStatusTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RfiDataStatusType` that was created by this mutation."""
  rfiDataStatusType: RfiDataStatusType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `RfiDataStatusType`. May be used by Relay 1."""
  rfiDataStatusTypeEdge(
    """The method to use when ordering `RfiDataStatusType`."""
    orderBy: [RfiDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RfiDataStatusTypesEdge
}

"""All input for the create `RfiDataStatusType` mutation."""
input CreateRfiDataStatusTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RfiDataStatusType` to be created by this mutation."""
  rfiDataStatusType: RfiDataStatusTypeInput!
}

"""An input for mutations affecting `RfiDataStatusType`"""
input RfiDataStatusTypeInput {
  """The name of the status type"""
  name: String!

  """The description of the status type"""
  description: String
}

"""The output of our create `SowTab1` mutation."""
type CreateSowTab1Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SowTab1` that was created by this mutation."""
  sowTab1: SowTab1

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ApplicationSowData` that is related to this `SowTab1`.
  """
  applicationSowDataBySowId: ApplicationSowData

  """Reads a single `CcbcUser` that is related to this `SowTab1`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab1`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab1`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `SowTab1`. May be used by Relay 1."""
  sowTab1Edge(
    """The method to use when ordering `SowTab1`."""
    orderBy: [SowTab1SOrderBy!] = [PRIMARY_KEY_ASC]
  ): SowTab1SEdge
}

"""All input for the create `SowTab1` mutation."""
input CreateSowTab1Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SowTab1` to be created by this mutation."""
  sowTab1: SowTab1Input!
}

"""An input for mutations affecting `SowTab1`"""
input SowTab1Input {
  sowId: Int

  """
  The data imported from the Excel filled by the respondent. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fsow_tab_1.json)
  """
  jsonData: JSON

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `SowTab2` mutation."""
type CreateSowTab2Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SowTab2` that was created by this mutation."""
  sowTab2: SowTab2

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ApplicationSowData` that is related to this `SowTab2`."""
  applicationSowDataBySowId: ApplicationSowData

  """Reads a single `CcbcUser` that is related to this `SowTab2`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab2`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab2`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `SowTab2`. May be used by Relay 1."""
  sowTab2Edge(
    """The method to use when ordering `SowTab2`."""
    orderBy: [SowTab2SOrderBy!] = [PRIMARY_KEY_ASC]
  ): SowTab2SEdge
}

"""All input for the create `SowTab2` mutation."""
input CreateSowTab2Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SowTab2` to be created by this mutation."""
  sowTab2: SowTab2Input!
}

"""An input for mutations affecting `SowTab2`"""
input SowTab2Input {
  """ID of the SoW"""
  sowId: Int

  """
  The data imported from the Excel filled by the respondent. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fsow_tab_2.json)
  """
  jsonData: JSON

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `SowTab7` mutation."""
type CreateSowTab7Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SowTab7` that was created by this mutation."""
  sowTab7: SowTab7

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ApplicationSowData` that is related to this `SowTab7`."""
  applicationSowDataBySowId: ApplicationSowData

  """Reads a single `CcbcUser` that is related to this `SowTab7`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab7`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab7`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `SowTab7`. May be used by Relay 1."""
  sowTab7Edge(
    """The method to use when ordering `SowTab7`."""
    orderBy: [SowTab7SOrderBy!] = [PRIMARY_KEY_ASC]
  ): SowTab7SEdge
}

"""All input for the create `SowTab7` mutation."""
input CreateSowTab7Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SowTab7` to be created by this mutation."""
  sowTab7: SowTab7Input!
}

"""An input for mutations affecting `SowTab7`"""
input SowTab7Input {
  sowId: Int

  """
  The data imported from the Excel filled by the respondent. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fsow_tab_7.json)
  """
  jsonData: JSON

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `SowTab8` mutation."""
type CreateSowTab8Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SowTab8` that was created by this mutation."""
  sowTab8: SowTab8

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ApplicationSowData` that is related to this `SowTab8`."""
  applicationSowDataBySowId: ApplicationSowData

  """Reads a single `CcbcUser` that is related to this `SowTab8`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab8`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab8`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `SowTab8`. May be used by Relay 1."""
  sowTab8Edge(
    """The method to use when ordering `SowTab8`."""
    orderBy: [SowTab8SOrderBy!] = [PRIMARY_KEY_ASC]
  ): SowTab8SEdge
}

"""All input for the create `SowTab8` mutation."""
input CreateSowTab8Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SowTab8` to be created by this mutation."""
  sowTab8: SowTab8Input!
}

"""An input for mutations affecting `SowTab8`"""
input SowTab8Input {
  """ID of the SoW"""
  sowId: Int

  """
  The data imported from the Excel filled by the respondent. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fsow_tab_8.json)
  """
  jsonData: JSON

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our update `Analyst` mutation."""
type UpdateAnalystPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Analyst` that was updated by this mutation."""
  analyst: Analyst

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `Analyst`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Analyst`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Analyst`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Analyst`. May be used by Relay 1."""
  analystEdge(
    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AnalystsEdge
}

"""All input for the `updateAnalyst` mutation."""
input UpdateAnalystInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Analyst` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Analyst` being updated.
  """
  analystPatch: AnalystPatch!
}

"""
Represents an update to a `Analyst`. Fields that are set will be updated.
"""
input AnalystPatch {
  """Analyst's first name"""
  givenName: String

  """Analyst's last name"""
  familyName: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Boolean column indicating whether the analyst is active or not."""
  active: Boolean

  """Analyst's email address"""
  email: String
}

"""All input for the `updateAnalystByRowId` mutation."""
input UpdateAnalystByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Analyst` being updated.
  """
  analystPatch: AnalystPatch!

  """Unique ID for the analyst"""
  rowId: Int!
}

"""The output of our update `Application` mutation."""
type UpdateApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Application` that was updated by this mutation."""
  application: Application

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Intake` that is related to this `Application`."""
  intakeByIntakeId: Intake

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge
}

"""All input for the `updateApplication` mutation."""
input UpdateApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Application` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Application` being updated.
  """
  applicationPatch: ApplicationPatch!
}

"""
Represents an update to a `Application`. Fields that are set will be updated.
"""
input ApplicationPatch {
  """Reference number assigned to the application"""
  ccbcNumber: String

  """The owner of the application, identified by its JWT sub"""
  owner: String

  """The intake associated with the application, set when it is submitted"""
  intakeId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateApplicationByRowId` mutation."""
input UpdateApplicationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Application` being updated.
  """
  applicationPatch: ApplicationPatch!

  """Primary key ID for the application"""
  rowId: Int!
}

"""The output of our update `ApplicationAnalystLead` mutation."""
type UpdateApplicationAnalystLeadPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationAnalystLead` that was updated by this mutation."""
  applicationAnalystLead: ApplicationAnalystLead

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationAnalystLead`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `Analyst` that is related to this `ApplicationAnalystLead`.
  """
  analystByAnalystId: Analyst

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnalystLead`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnalystLead`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnalystLead`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationAnalystLead`. May be used by Relay 1."""
  applicationAnalystLeadEdge(
    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationAnalystLeadsEdge
}

"""All input for the `updateApplicationAnalystLead` mutation."""
input UpdateApplicationAnalystLeadInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationAnalystLead` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationAnalystLead` being updated.
  """
  applicationAnalystLeadPatch: ApplicationAnalystLeadPatch!
}

"""
Represents an update to a `ApplicationAnalystLead`. Fields that are set will be updated.
"""
input ApplicationAnalystLeadPatch {
  """ID of the application this analyst lead belongs to"""
  applicationId: Int

  """ID of the analyst this analyst lead belongs to"""
  analystId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateApplicationAnalystLeadByRowId` mutation."""
input UpdateApplicationAnalystLeadByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationAnalystLead` being updated.
  """
  applicationAnalystLeadPatch: ApplicationAnalystLeadPatch!

  """Unique ID for the application_analyst_lead"""
  rowId: Int!
}

"""The output of our update `ApplicationAnnounced` mutation."""
type UpdateApplicationAnnouncedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationAnnounced` that was updated by this mutation."""
  applicationAnnounced: ApplicationAnnounced

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationAnnounced`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnounced`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnounced`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnounced`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationAnnounced`. May be used by Relay 1."""
  applicationAnnouncedEdge(
    """The method to use when ordering `ApplicationAnnounced`."""
    orderBy: [ApplicationAnnouncedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationAnnouncedsEdge
}

"""All input for the `updateApplicationAnnounced` mutation."""
input UpdateApplicationAnnouncedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationAnnounced` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationAnnounced` being updated.
  """
  applicationAnnouncedPatch: ApplicationAnnouncedPatch!
}

"""
Represents an update to a `ApplicationAnnounced`. Fields that are set will be updated.
"""
input ApplicationAnnouncedPatch {
  """ID of the application this record belongs to"""
  applicationId: Int

  """Whether the application has been announced by BC or ISED"""
  announced: Boolean

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateApplicationAnnouncedByRowId` mutation."""
input UpdateApplicationAnnouncedByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationAnnounced` being updated.
  """
  applicationAnnouncedPatch: ApplicationAnnouncedPatch!

  """Unique ID for the application_announced"""
  rowId: Int!
}

"""The output of our update `ApplicationAnnouncement` mutation."""
type UpdateApplicationAnnouncementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationAnnouncement` that was updated by this mutation."""
  applicationAnnouncement: ApplicationAnnouncement

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Announcement` that is related to this `ApplicationAnnouncement`.
  """
  announcementByAnnouncementId: Announcement

  """
  Reads a single `Application` that is related to this `ApplicationAnnouncement`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnouncement`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnouncement`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnouncement`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationAnnouncement`. May be used by Relay 1."""
  applicationAnnouncementEdge(
    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationAnnouncementsEdge
}

"""All input for the `updateApplicationAnnouncement` mutation."""
input UpdateApplicationAnnouncementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationAnnouncement` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationAnnouncement` being updated.
  """
  applicationAnnouncementPatch: ApplicationAnnouncementPatch!
}

"""
Represents an update to a `ApplicationAnnouncement`. Fields that are set will be updated.
"""
input ApplicationAnnouncementPatch {
  """The foreign key of a form"""
  announcementId: Int

  """The foreign key of an application"""
  applicationId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Flag to identify either announcement is primary or secondary"""
  isPrimary: Boolean

  """
  Column describing the operation (created, updated, deleted) for context on the history page
  """
  historyOperation: String
}

"""
All input for the `updateApplicationAnnouncementByAnnouncementIdAndApplicationId` mutation.
"""
input UpdateApplicationAnnouncementByAnnouncementIdAndApplicationIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationAnnouncement` being updated.
  """
  applicationAnnouncementPatch: ApplicationAnnouncementPatch!

  """The foreign key of a form"""
  announcementId: Int!

  """The foreign key of an application"""
  applicationId: Int!
}

"""The output of our update `ApplicationClaimsData` mutation."""
type UpdateApplicationClaimsDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationClaimsData` that was updated by this mutation."""
  applicationClaimsData: ApplicationClaimsData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationClaimsData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationClaimsData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationClaimsData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationClaimsData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationClaimsData`. May be used by Relay 1."""
  applicationClaimsDataEdge(
    """The method to use when ordering `ApplicationClaimsData`."""
    orderBy: [ApplicationClaimsDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationClaimsDataEdge
}

"""All input for the `updateApplicationClaimsData` mutation."""
input UpdateApplicationClaimsDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationClaimsData` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationClaimsData` being updated.
  """
  applicationClaimsDataPatch: ApplicationClaimsDataPatch!
}

"""
Represents an update to a `ApplicationClaimsData`. Fields that are set will be updated.
"""
input ApplicationClaimsDataPatch {
  """Id of the application the claims belongs to"""
  applicationId: Int

  """The claims form json data"""
  jsonData: JSON

  """The id of the excel data that this record is associated with"""
  excelDataId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Column to track if record was created, updated or deleted for history"""
  historyOperation: String
}

"""All input for the `updateApplicationClaimsDataByRowId` mutation."""
input UpdateApplicationClaimsDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationClaimsData` being updated.
  """
  applicationClaimsDataPatch: ApplicationClaimsDataPatch!

  """Unique id for the claims"""
  rowId: Int!
}

"""The output of our update `ApplicationClaimsExcelData` mutation."""
type UpdateApplicationClaimsExcelDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationClaimsExcelData` that was updated by this mutation."""
  applicationClaimsExcelData: ApplicationClaimsExcelData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationClaimsExcelData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationClaimsExcelData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationClaimsExcelData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationClaimsExcelData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationClaimsExcelData`. May be used by Relay 1."""
  applicationClaimsExcelDataEdge(
    """The method to use when ordering `ApplicationClaimsExcelData`."""
    orderBy: [ApplicationClaimsExcelDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationClaimsExcelDataEdge
}

"""All input for the `updateApplicationClaimsExcelData` mutation."""
input UpdateApplicationClaimsExcelDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationClaimsExcelData` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationClaimsExcelData` being updated.
  """
  applicationClaimsExcelDataPatch: ApplicationClaimsExcelDataPatch!
}

"""
Represents an update to a `ApplicationClaimsExcelData`. Fields that are set will be updated.
"""
input ApplicationClaimsExcelDataPatch {
  """ID of the application this data belongs to"""
  applicationId: Int

  """The data imported from the excel filled by the respondent"""
  jsonData: JSON

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateApplicationClaimsExcelDataByRowId` mutation."""
input UpdateApplicationClaimsExcelDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationClaimsExcelData` being updated.
  """
  applicationClaimsExcelDataPatch: ApplicationClaimsExcelDataPatch!

  """Unique ID for the claims excel data"""
  rowId: Int!
}

"""
The output of our update `ApplicationCommunityProgressReportData` mutation.
"""
type UpdateApplicationCommunityProgressReportDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ApplicationCommunityProgressReportData` that was updated by this mutation.
  """
  applicationCommunityProgressReportData: ApplicationCommunityProgressReportData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationCommunityProgressReportData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationCommunityProgressReportData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationCommunityProgressReportData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationCommunityProgressReportData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """
  An edge for our `ApplicationCommunityProgressReportData`. May be used by Relay 1.
  """
  applicationCommunityProgressReportDataEdge(
    """
    The method to use when ordering `ApplicationCommunityProgressReportData`.
    """
    orderBy: [ApplicationCommunityProgressReportDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationCommunityProgressReportDataEdge
}

"""
All input for the `updateApplicationCommunityProgressReportData` mutation.
"""
input UpdateApplicationCommunityProgressReportDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationCommunityProgressReportData` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationCommunityProgressReportData` being updated.
  """
  applicationCommunityProgressReportDataPatch: ApplicationCommunityProgressReportDataPatch!
}

"""
Represents an update to a `ApplicationCommunityProgressReportData`. Fields that are set will be updated.
"""
input ApplicationCommunityProgressReportDataPatch {
  """ID of the application this Community Progress Report belongs to"""
  applicationId: Int

  """
  The due date, date received and the file information of the Community Progress Report Excel file
  """
  jsonData: JSON

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """The id of the excel data that this record is associated with"""
  excelDataId: Int

  """History operation"""
  historyOperation: String
}

"""
All input for the `updateApplicationCommunityProgressReportDataByRowId` mutation.
"""
input UpdateApplicationCommunityProgressReportDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationCommunityProgressReportData` being updated.
  """
  applicationCommunityProgressReportDataPatch: ApplicationCommunityProgressReportDataPatch!

  """Unique ID for the  Community Progress Report"""
  rowId: Int!
}

"""
The output of our update `ApplicationCommunityReportExcelData` mutation.
"""
type UpdateApplicationCommunityReportExcelDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ApplicationCommunityReportExcelData` that was updated by this mutation.
  """
  applicationCommunityReportExcelData: ApplicationCommunityReportExcelData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationCommunityReportExcelData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationCommunityReportExcelData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationCommunityReportExcelData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationCommunityReportExcelData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """
  An edge for our `ApplicationCommunityReportExcelData`. May be used by Relay 1.
  """
  applicationCommunityReportExcelDataEdge(
    """The method to use when ordering `ApplicationCommunityReportExcelData`."""
    orderBy: [ApplicationCommunityReportExcelDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationCommunityReportExcelDataEdge
}

"""
All input for the `updateApplicationCommunityReportExcelData` mutation.
"""
input UpdateApplicationCommunityReportExcelDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationCommunityReportExcelData` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationCommunityReportExcelData` being updated.
  """
  applicationCommunityReportExcelDataPatch: ApplicationCommunityReportExcelDataPatch!
}

"""
Represents an update to a `ApplicationCommunityReportExcelData`. Fields that are set will be updated.
"""
input ApplicationCommunityReportExcelDataPatch {
  """ID of the application this Community Report belongs to"""
  applicationId: Int

  """The data imported from the excel filled by the respondent"""
  jsonData: JSON

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""
All input for the `updateApplicationCommunityReportExcelDataByRowId` mutation.
"""
input UpdateApplicationCommunityReportExcelDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationCommunityReportExcelData` being updated.
  """
  applicationCommunityReportExcelDataPatch: ApplicationCommunityReportExcelDataPatch!

  """Unique ID for the Community Report excel data"""
  rowId: Int!
}

"""The output of our update `ApplicationFormData` mutation."""
type UpdateApplicationFormDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationFormData` that was updated by this mutation."""
  applicationFormData: ApplicationFormData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `FormData` that is related to this `ApplicationFormData`.
  """
  formDataByFormDataId: FormData

  """
  Reads a single `Application` that is related to this `ApplicationFormData`.
  """
  applicationByApplicationId: Application

  """An edge for our `ApplicationFormData`. May be used by Relay 1."""
  applicationFormDataEdge(
    """The method to use when ordering `ApplicationFormData`."""
    orderBy: [ApplicationFormDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationFormDataEdge
}

"""All input for the `updateApplicationFormData` mutation."""
input UpdateApplicationFormDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationFormData` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationFormData` being updated.
  """
  applicationFormDataPatch: ApplicationFormDataPatch!
}

"""
Represents an update to a `ApplicationFormData`. Fields that are set will be updated.
"""
input ApplicationFormDataPatch {
  """The foreign key of a form"""
  formDataId: Int

  """The foreign key of an application"""
  applicationId: Int
}

"""
All input for the `updateApplicationFormDataByFormDataIdAndApplicationId` mutation.
"""
input UpdateApplicationFormDataByFormDataIdAndApplicationIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationFormData` being updated.
  """
  applicationFormDataPatch: ApplicationFormDataPatch!

  """The foreign key of a form"""
  formDataId: Int!

  """The foreign key of an application"""
  applicationId: Int!
}

"""The output of our update `ApplicationGisAssessmentHh` mutation."""
type UpdateApplicationGisAssessmentHhPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationGisAssessmentHh` that was updated by this mutation."""
  applicationGisAssessmentHh: ApplicationGisAssessmentHh

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationGisAssessmentHh`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisAssessmentHh`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisAssessmentHh`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisAssessmentHh`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationGisAssessmentHh`. May be used by Relay 1."""
  applicationGisAssessmentHhEdge(
    """The method to use when ordering `ApplicationGisAssessmentHh`."""
    orderBy: [ApplicationGisAssessmentHhsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationGisAssessmentHhsEdge
}

"""All input for the `updateApplicationGisAssessmentHh` mutation."""
input UpdateApplicationGisAssessmentHhInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationGisAssessmentHh` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationGisAssessmentHh` being updated.
  """
  applicationGisAssessmentHhPatch: ApplicationGisAssessmentHhPatch!
}

"""
Represents an update to a `ApplicationGisAssessmentHh`. Fields that are set will be updated.
"""
input ApplicationGisAssessmentHhPatch {
  """The application_id of the application this record is associated with"""
  applicationId: Int

  """The number of eligible households"""
  eligible: Float

  """The number of eligible indigenous households"""
  eligibleIndigenous: Float

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateApplicationGisAssessmentHhByRowId` mutation."""
input UpdateApplicationGisAssessmentHhByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationGisAssessmentHh` being updated.
  """
  applicationGisAssessmentHhPatch: ApplicationGisAssessmentHhPatch!

  """Primary key and unique identifier"""
  rowId: Int!
}

"""The output of our update `ApplicationGisData` mutation."""
type UpdateApplicationGisDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationGisData` that was updated by this mutation."""
  applicationGisData: ApplicationGisData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GisData` that is related to this `ApplicationGisData`."""
  gisDataByBatchId: GisData

  """
  Reads a single `Application` that is related to this `ApplicationGisData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationGisData`. May be used by Relay 1."""
  applicationGisDataEdge(
    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationGisDataEdge
}

"""All input for the `updateApplicationGisData` mutation."""
input UpdateApplicationGisDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationGisData` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationGisData` being updated.
  """
  applicationGisDataPatch: ApplicationGisDataPatch!
}

"""
Represents an update to a `ApplicationGisData`. Fields that are set will be updated.
"""
input ApplicationGisDataPatch {
  batchId: Int
  applicationId: Int

  """
  The data imported from the GIS data Excel file. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fapplication_gis_data.json)
  """
  jsonData: JSON

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateApplicationGisDataByRowId` mutation."""
input UpdateApplicationGisDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationGisData` being updated.
  """
  applicationGisDataPatch: ApplicationGisDataPatch!
  rowId: Int!
}

"""The output of our update `ApplicationInternalDescription` mutation."""
type UpdateApplicationInternalDescriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ApplicationInternalDescription` that was updated by this mutation.
  """
  applicationInternalDescription: ApplicationInternalDescription

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationInternalDescription`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationInternalDescription`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationInternalDescription`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationInternalDescription`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """
  An edge for our `ApplicationInternalDescription`. May be used by Relay 1.
  """
  applicationInternalDescriptionEdge(
    """The method to use when ordering `ApplicationInternalDescription`."""
    orderBy: [ApplicationInternalDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationInternalDescriptionsEdge
}

"""All input for the `updateApplicationInternalDescription` mutation."""
input UpdateApplicationInternalDescriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationInternalDescription` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationInternalDescription` being updated.
  """
  applicationInternalDescriptionPatch: ApplicationInternalDescriptionPatch!
}

"""
Represents an update to a `ApplicationInternalDescription`. Fields that are set will be updated.
"""
input ApplicationInternalDescriptionPatch {
  """Id of the application the description belongs to"""
  applicationId: Int

  """The internal description for the given application"""
  description: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""
All input for the `updateApplicationInternalDescriptionByRowId` mutation.
"""
input UpdateApplicationInternalDescriptionByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationInternalDescription` being updated.
  """
  applicationInternalDescriptionPatch: ApplicationInternalDescriptionPatch!

  """Unique id for the row"""
  rowId: Int!
}

"""The output of our update `ApplicationMilestoneData` mutation."""
type UpdateApplicationMilestoneDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationMilestoneData` that was updated by this mutation."""
  applicationMilestoneData: ApplicationMilestoneData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationMilestoneData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationMilestoneData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationMilestoneData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationMilestoneData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationMilestoneData`. May be used by Relay 1."""
  applicationMilestoneDataEdge(
    """The method to use when ordering `ApplicationMilestoneData`."""
    orderBy: [ApplicationMilestoneDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationMilestoneDataEdge
}

"""All input for the `updateApplicationMilestoneData` mutation."""
input UpdateApplicationMilestoneDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationMilestoneData` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationMilestoneData` being updated.
  """
  applicationMilestoneDataPatch: ApplicationMilestoneDataPatch!
}

"""
Represents an update to a `ApplicationMilestoneData`. Fields that are set will be updated.
"""
input ApplicationMilestoneDataPatch {
  """Id of the application the milestone belongs to"""
  applicationId: Int

  """The milestone form json data"""
  jsonData: JSON

  """The id of the excel data that this record is associated with"""
  excelDataId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """History operation"""
  historyOperation: String
}

"""All input for the `updateApplicationMilestoneDataByRowId` mutation."""
input UpdateApplicationMilestoneDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationMilestoneData` being updated.
  """
  applicationMilestoneDataPatch: ApplicationMilestoneDataPatch!

  """Unique id for the milestone"""
  rowId: Int!
}

"""The output of our update `ApplicationMilestoneExcelData` mutation."""
type UpdateApplicationMilestoneExcelDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationMilestoneExcelData` that was updated by this mutation."""
  applicationMilestoneExcelData: ApplicationMilestoneExcelData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationMilestoneExcelData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationMilestoneExcelData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationMilestoneExcelData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationMilestoneExcelData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """
  An edge for our `ApplicationMilestoneExcelData`. May be used by Relay 1.
  """
  applicationMilestoneExcelDataEdge(
    """The method to use when ordering `ApplicationMilestoneExcelData`."""
    orderBy: [ApplicationMilestoneExcelDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationMilestoneExcelDataEdge
}

"""All input for the `updateApplicationMilestoneExcelData` mutation."""
input UpdateApplicationMilestoneExcelDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationMilestoneExcelData` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationMilestoneExcelData` being updated.
  """
  applicationMilestoneExcelDataPatch: ApplicationMilestoneExcelDataPatch!
}

"""
Represents an update to a `ApplicationMilestoneExcelData`. Fields that are set will be updated.
"""
input ApplicationMilestoneExcelDataPatch {
  """ID of the application this data belongs to"""
  applicationId: Int

  """The data imported from the excel filled by the respondent"""
  jsonData: JSON

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""
All input for the `updateApplicationMilestoneExcelDataByRowId` mutation.
"""
input UpdateApplicationMilestoneExcelDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationMilestoneExcelData` being updated.
  """
  applicationMilestoneExcelDataPatch: ApplicationMilestoneExcelDataPatch!

  """Unique ID for the milestone excel data"""
  rowId: Int!
}

"""The output of our update `ApplicationPackage` mutation."""
type UpdateApplicationPackagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationPackage` that was updated by this mutation."""
  applicationPackage: ApplicationPackage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationPackage`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPackage`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPackage`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPackage`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationPackage`. May be used by Relay 1."""
  applicationPackageEdge(
    """The method to use when ordering `ApplicationPackage`."""
    orderBy: [ApplicationPackagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationPackagesEdge
}

"""All input for the `updateApplicationPackage` mutation."""
input UpdateApplicationPackageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationPackage` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationPackage` being updated.
  """
  applicationPackagePatch: ApplicationPackagePatch!
}

"""
Represents an update to a `ApplicationPackage`. Fields that are set will be updated.
"""
input ApplicationPackagePatch {
  """The application_id of the application this record is associated with"""
  applicationId: Int

  """The package number the application is assigned to"""
  package: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateApplicationPackageByRowId` mutation."""
input UpdateApplicationPackageByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationPackage` being updated.
  """
  applicationPackagePatch: ApplicationPackagePatch!

  """Unique ID for the application_package"""
  rowId: Int!
}

"""The output of our update `ApplicationPendingChangeRequest` mutation."""
type UpdateApplicationPendingChangeRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ApplicationPendingChangeRequest` that was updated by this mutation.
  """
  applicationPendingChangeRequest: ApplicationPendingChangeRequest

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationPendingChangeRequest`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPendingChangeRequest`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPendingChangeRequest`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPendingChangeRequest`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """
  An edge for our `ApplicationPendingChangeRequest`. May be used by Relay 1.
  """
  applicationPendingChangeRequestEdge(
    """The method to use when ordering `ApplicationPendingChangeRequest`."""
    orderBy: [ApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationPendingChangeRequestsEdge
}

"""All input for the `updateApplicationPendingChangeRequest` mutation."""
input UpdateApplicationPendingChangeRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationPendingChangeRequest` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationPendingChangeRequest` being updated.
  """
  applicationPendingChangeRequestPatch: ApplicationPendingChangeRequestPatch!
}

"""
Represents an update to a `ApplicationPendingChangeRequest`. Fields that are set will be updated.
"""
input ApplicationPendingChangeRequestPatch {
  """
  ID of the application this application_pending_change_request belongs to
  """
  applicationId: Int

  """Column defining if the change request pending or not"""
  isPending: Boolean

  """
  Column containing the comment for the change request or completion of the change request
  """
  comment: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""
All input for the `updateApplicationPendingChangeRequestByRowId` mutation.
"""
input UpdateApplicationPendingChangeRequestByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationPendingChangeRequest` being updated.
  """
  applicationPendingChangeRequestPatch: ApplicationPendingChangeRequestPatch!

  """Unique ID for the application_pending_change_request"""
  rowId: Int!
}

"""The output of our update `ApplicationProjectType` mutation."""
type UpdateApplicationProjectTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationProjectType` that was updated by this mutation."""
  applicationProjectType: ApplicationProjectType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationProjectType`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationProjectType`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationProjectType`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationProjectType`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationProjectType`. May be used by Relay 1."""
  applicationProjectTypeEdge(
    """The method to use when ordering `ApplicationProjectType`."""
    orderBy: [ApplicationProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationProjectTypesEdge
}

"""All input for the `updateApplicationProjectType` mutation."""
input UpdateApplicationProjectTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationProjectType` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationProjectType` being updated.
  """
  applicationProjectTypePatch: ApplicationProjectTypePatch!
}

"""
Represents an update to a `ApplicationProjectType`. Fields that are set will be updated.
"""
input ApplicationProjectTypePatch {
  """ID of the application this application_project_type belongs to"""
  applicationId: Int

  """Column containing the project type of the application"""
  projectType: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateApplicationProjectTypeByRowId` mutation."""
input UpdateApplicationProjectTypeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationProjectType` being updated.
  """
  applicationProjectTypePatch: ApplicationProjectTypePatch!

  """Unique ID for the application_project_type"""
  rowId: Int!
}

"""The output of our update `ApplicationRfiData` mutation."""
type UpdateApplicationRfiDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationRfiData` that was updated by this mutation."""
  applicationRfiData: ApplicationRfiData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `RfiData` that is related to this `ApplicationRfiData`."""
  rfiDataByRfiDataId: RfiData

  """
  Reads a single `Application` that is related to this `ApplicationRfiData`.
  """
  applicationByApplicationId: Application

  """An edge for our `ApplicationRfiData`. May be used by Relay 1."""
  applicationRfiDataEdge(
    """The method to use when ordering `ApplicationRfiData`."""
    orderBy: [ApplicationRfiDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRfiDataEdge
}

"""All input for the `updateApplicationRfiData` mutation."""
input UpdateApplicationRfiDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationRfiData` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationRfiData` being updated.
  """
  applicationRfiDataPatch: ApplicationRfiDataPatch!
}

"""
Represents an update to a `ApplicationRfiData`. Fields that are set will be updated.
"""
input ApplicationRfiDataPatch {
  """The foreign key of a form"""
  rfiDataId: Int

  """The foreign key of an application"""
  applicationId: Int
}

"""
All input for the `updateApplicationRfiDataByRfiDataIdAndApplicationId` mutation.
"""
input UpdateApplicationRfiDataByRfiDataIdAndApplicationIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationRfiData` being updated.
  """
  applicationRfiDataPatch: ApplicationRfiDataPatch!

  """The foreign key of a form"""
  rfiDataId: Int!

  """The foreign key of an application"""
  applicationId: Int!
}

"""The output of our update `ApplicationSowData` mutation."""
type UpdateApplicationSowDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationSowData` that was updated by this mutation."""
  applicationSowData: ApplicationSowData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationSowData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationSowData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationSowData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationSowData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationSowData`. May be used by Relay 1."""
  applicationSowDataEdge(
    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationSowDataEdge
}

"""All input for the `updateApplicationSowData` mutation."""
input UpdateApplicationSowDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationSowData` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationSowData` being updated.
  """
  applicationSowDataPatch: ApplicationSowDataPatch!
}

"""
Represents an update to a `ApplicationSowData`. Fields that are set will be updated.
"""
input ApplicationSowDataPatch {
  """ID of the application this SoW belongs to"""
  applicationId: Int

  """
  The data imported from the Excel filled by the respondent. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fapplication_sow_data.json)
  """
  jsonData: JSON

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """The amendment number"""
  amendmentNumber: Int

  """Column identifying if the record is an amendment"""
  isAmendment: Boolean
}

"""All input for the `updateApplicationSowDataByRowId` mutation."""
input UpdateApplicationSowDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationSowData` being updated.
  """
  applicationSowDataPatch: ApplicationSowDataPatch!

  """Unique ID for the  SoW"""
  rowId: Int!
}

"""The output of our update `ApplicationStatus` mutation."""
type UpdateApplicationStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationStatus` that was updated by this mutation."""
  applicationStatus: ApplicationStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationStatus`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `ApplicationStatusType` that is related to this `ApplicationStatus`.
  """
  applicationStatusTypeByStatus: ApplicationStatusType

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByUpdatedBy: CcbcUser

  """An edge for our `ApplicationStatus`. May be used by Relay 1."""
  applicationStatusEdge(
    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusesEdge
}

"""All input for the `updateApplicationStatus` mutation."""
input UpdateApplicationStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationStatus` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationStatus` being updated.
  """
  applicationStatusPatch: ApplicationStatusPatch!
}

"""
Represents an update to a `ApplicationStatus`. Fields that are set will be updated.
"""
input ApplicationStatusPatch {
  """ID of the application this status belongs to"""
  applicationId: Int

  """The status of the application"""
  status: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """Change reason for analyst status change"""
  changeReason: String

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime
}

"""All input for the `updateApplicationStatusByRowId` mutation."""
input UpdateApplicationStatusByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationStatus` being updated.
  """
  applicationStatusPatch: ApplicationStatusPatch!

  """Unique ID for the application_status"""
  rowId: Int!
}

"""The output of our update `ApplicationStatusType` mutation."""
type UpdateApplicationStatusTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationStatusType` that was updated by this mutation."""
  applicationStatusType: ApplicationStatusType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ApplicationStatusType`. May be used by Relay 1."""
  applicationStatusTypeEdge(
    """The method to use when ordering `ApplicationStatusType`."""
    orderBy: [ApplicationStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusTypesEdge
}

"""All input for the `updateApplicationStatusType` mutation."""
input UpdateApplicationStatusTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationStatusType` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationStatusType` being updated.
  """
  applicationStatusTypePatch: ApplicationStatusTypePatch!
}

"""
Represents an update to a `ApplicationStatusType`. Fields that are set will be updated.
"""
input ApplicationStatusTypePatch {
  """Name of and primary key of the status of an application"""
  name: String

  """Description of the status type"""
  description: String

  """
  Boolean column used to differentiate internal/external status by indicating whether the status is visible to the applicant or not.
  """
  visibleByApplicant: Boolean

  """The logical order in which the status should be displayed."""
  statusOrder: Int

  """
  Boolean column used to differentiate internal/external status by indicating whether the status is visible to the analyst or not.
  """
  visibleByAnalyst: Boolean
}

"""All input for the `updateApplicationStatusTypeByName` mutation."""
input UpdateApplicationStatusTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationStatusType` being updated.
  """
  applicationStatusTypePatch: ApplicationStatusTypePatch!

  """Name of and primary key of the status of an application"""
  name: String!
}

"""All input for the `updateApplicationStatusTypeByStatusOrder` mutation."""
input UpdateApplicationStatusTypeByStatusOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationStatusType` being updated.
  """
  applicationStatusTypePatch: ApplicationStatusTypePatch!

  """The logical order in which the status should be displayed."""
  statusOrder: Int!
}

"""The output of our update `AssessmentData` mutation."""
type UpdateAssessmentDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AssessmentData` that was updated by this mutation."""
  assessmentData: AssessmentData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Application` that is related to this `AssessmentData`."""
  applicationByApplicationId: Application

  """
  Reads a single `AssessmentType` that is related to this `AssessmentData`.
  """
  assessmentTypeByAssessmentDataType: AssessmentType

  """Reads a single `CcbcUser` that is related to this `AssessmentData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `AssessmentData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `AssessmentData`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `AssessmentData`. May be used by Relay 1."""
  assessmentDataEdge(
    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssessmentDataEdge
}

"""All input for the `updateAssessmentData` mutation."""
input UpdateAssessmentDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AssessmentData` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `AssessmentData` being updated.
  """
  assessmentDataPatch: AssessmentDataPatch!
}

"""
Represents an update to a `AssessmentData`. Fields that are set will be updated.
"""
input AssessmentDataPatch {
  applicationId: Int

  """
  The json form data of the assessment form. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fassessment_data.json)
  """
  jsonData: JSON
  assessmentDataType: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateAssessmentDataByRowId` mutation."""
input UpdateAssessmentDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AssessmentData` being updated.
  """
  assessmentDataPatch: AssessmentDataPatch!
  rowId: Int!
}

"""The output of our update `AssessmentType` mutation."""
type UpdateAssessmentTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AssessmentType` that was updated by this mutation."""
  assessmentType: AssessmentType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `AssessmentType`. May be used by Relay 1."""
  assessmentTypeEdge(
    """The method to use when ordering `AssessmentType`."""
    orderBy: [AssessmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssessmentTypesEdge
}

"""All input for the `updateAssessmentType` mutation."""
input UpdateAssessmentTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AssessmentType` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `AssessmentType` being updated.
  """
  assessmentTypePatch: AssessmentTypePatch!
}

"""
Represents an update to a `AssessmentType`. Fields that are set will be updated.
"""
input AssessmentTypePatch {
  """Name of and primary key of the type of an assessment"""
  name: String

  """Description of the assessment type"""
  description: String
}

"""All input for the `updateAssessmentTypeByName` mutation."""
input UpdateAssessmentTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AssessmentType` being updated.
  """
  assessmentTypePatch: AssessmentTypePatch!

  """Name of and primary key of the type of an assessment"""
  name: String!
}

"""The output of our update `Attachment` mutation."""
type UpdateAttachmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Attachment` that was updated by this mutation."""
  attachment: Attachment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Application` that is related to this `Attachment`."""
  applicationByApplicationId: Application

  """
  Reads a single `ApplicationStatus` that is related to this `Attachment`.
  """
  applicationStatusByApplicationStatusId: ApplicationStatus

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Attachment`. May be used by Relay 1."""
  attachmentEdge(
    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsEdge
}

"""All input for the `updateAttachment` mutation."""
input UpdateAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Attachment` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Attachment` being updated.
  """
  attachmentPatch: AttachmentPatch!
}

"""
Represents an update to a `Attachment`. Fields that are set will be updated.
"""
input AttachmentPatch {
  """
  Universally Unique ID for the attachment, created by the fastapi storage micro-service
  """
  file: UUID

  """Description of the attachment"""
  description: String

  """Original uploaded file name"""
  fileName: String

  """Original uploaded file type"""
  fileType: String

  """Original uploaded file size"""
  fileSize: String

  """
  The id of the project (ccbc_public.application.id) that the attachment was uploaded to
  """
  applicationId: Int

  """
  The id of the application_status (ccbc_public.application_status.id) that the attachment references
  """
  applicationStatusId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateAttachmentByRowId` mutation."""
input UpdateAttachmentByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Attachment` being updated.
  """
  attachmentPatch: AttachmentPatch!

  """Unique ID for the attachment"""
  rowId: Int!
}

"""The output of our update `Cbc` mutation."""
type UpdateCbcPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Cbc` that was updated by this mutation."""
  cbc: Cbc

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `Cbc`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Cbc`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Cbc`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Cbc`. May be used by Relay 1."""
  cbcEdge(
    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CbcsEdge
}

"""All input for the `updateCbc` mutation."""
input UpdateCbcInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Cbc` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Cbc` being updated.
  """
  cbcPatch: CbcPatch!
}

"""Represents an update to a `Cbc`. Fields that are set will be updated."""
input CbcPatch {
  """The project number, unique for each project"""
  projectNumber: Int

  """The timestamp of the last time the data was updated from sharepoint"""
  sharepointTimestamp: Datetime

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateCbcByRowId` mutation."""
input UpdateCbcByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Cbc` being updated.
  """
  cbcPatch: CbcPatch!

  """Unique ID for the row"""
  rowId: Int!
}

"""All input for the `updateCbcByProjectNumber` mutation."""
input UpdateCbcByProjectNumberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Cbc` being updated.
  """
  cbcPatch: CbcPatch!

  """The project number, unique for each project"""
  projectNumber: Int!
}

"""
The output of our update `CbcApplicationPendingChangeRequest` mutation.
"""
type UpdateCbcApplicationPendingChangeRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CbcApplicationPendingChangeRequest` that was updated by this mutation.
  """
  cbcApplicationPendingChangeRequest: CbcApplicationPendingChangeRequest

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Cbc` that is related to this `CbcApplicationPendingChangeRequest`.
  """
  cbcByCbcId: Cbc

  """
  Reads a single `CcbcUser` that is related to this `CbcApplicationPendingChangeRequest`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CbcApplicationPendingChangeRequest`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CbcApplicationPendingChangeRequest`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """
  An edge for our `CbcApplicationPendingChangeRequest`. May be used by Relay 1.
  """
  cbcApplicationPendingChangeRequestEdge(
    """The method to use when ordering `CbcApplicationPendingChangeRequest`."""
    orderBy: [CbcApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CbcApplicationPendingChangeRequestsEdge
}

"""All input for the `updateCbcApplicationPendingChangeRequest` mutation."""
input UpdateCbcApplicationPendingChangeRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CbcApplicationPendingChangeRequest` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `CbcApplicationPendingChangeRequest` being updated.
  """
  cbcApplicationPendingChangeRequestPatch: CbcApplicationPendingChangeRequestPatch!
}

"""
Represents an update to a `CbcApplicationPendingChangeRequest`. Fields that are set will be updated.
"""
input CbcApplicationPendingChangeRequestPatch {
  """
  ID of the cbc application this cbc_application_pending_change_request belongs to
  """
  cbcId: Int

  """Column defining if the change request pending or not"""
  isPending: Boolean

  """
  Column containing the comment for the change request or completion of the change request
  """
  comment: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""
All input for the `updateCbcApplicationPendingChangeRequestByRowId` mutation.
"""
input UpdateCbcApplicationPendingChangeRequestByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CbcApplicationPendingChangeRequest` being updated.
  """
  cbcApplicationPendingChangeRequestPatch: CbcApplicationPendingChangeRequestPatch!

  """Unique ID for the cbc_application_pending_change_request"""
  rowId: Int!
}

"""The output of our update `CbcData` mutation."""
type UpdateCbcDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CbcData` that was updated by this mutation."""
  cbcData: CbcData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Cbc` that is related to this `CbcData`."""
  cbcByCbcId: Cbc

  """Reads a single `Cbc` that is related to this `CbcData`."""
  cbcByProjectNumber: Cbc

  """Reads a single `CcbcUser` that is related to this `CbcData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CbcData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CbcData`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `CbcData`. May be used by Relay 1."""
  cbcDataEdge(
    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): CbcDataEdge
}

"""All input for the `updateCbcData` mutation."""
input UpdateCbcDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CbcData` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `CbcData` being updated.
  """
  cbcDataPatch: CbcDataPatch!
}

"""
Represents an update to a `CbcData`. Fields that are set will be updated.
"""
input CbcDataPatch {
  """ID of the cbc application this cbc_data belongs to"""
  cbcId: Int

  """Column containing the project number the cbc application is from"""
  projectNumber: Int
  jsonData: JSON
  sharepointTimestamp: Datetime

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateCbcDataByRowId` mutation."""
input UpdateCbcDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CbcData` being updated.
  """
  cbcDataPatch: CbcDataPatch!

  """Unique ID for the cbc_data"""
  rowId: Int!
}

"""The output of our update `CbcDataChangeReason` mutation."""
type UpdateCbcDataChangeReasonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CbcDataChangeReason` that was updated by this mutation."""
  cbcDataChangeReason: CbcDataChangeReason

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CbcData` that is related to this `CbcDataChangeReason`.
  """
  cbcDataByCbcDataId: CbcData

  """
  Reads a single `CcbcUser` that is related to this `CbcDataChangeReason`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CbcDataChangeReason`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CbcDataChangeReason`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `CbcDataChangeReason`. May be used by Relay 1."""
  cbcDataChangeReasonEdge(
    """The method to use when ordering `CbcDataChangeReason`."""
    orderBy: [CbcDataChangeReasonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CbcDataChangeReasonsEdge
}

"""All input for the `updateCbcDataChangeReason` mutation."""
input UpdateCbcDataChangeReasonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CbcDataChangeReason` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `CbcDataChangeReason` being updated.
  """
  cbcDataChangeReasonPatch: CbcDataChangeReasonPatch!
}

"""
Represents an update to a `CbcDataChangeReason`. Fields that are set will be updated.
"""
input CbcDataChangeReasonPatch {
  """Unique ID for the cbc_data_change_reason"""
  rowId: Int

  """ID of the cbc_data this cbc_data_change_reason belongs to"""
  cbcDataId: Int

  """The reason for the change to the cbc_data"""
  description: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateCbcDataChangeReasonByRowId` mutation."""
input UpdateCbcDataChangeReasonByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CbcDataChangeReason` being updated.
  """
  cbcDataChangeReasonPatch: CbcDataChangeReasonPatch!

  """Unique ID for the cbc_data_change_reason"""
  rowId: Int!
}

"""The output of our update `CbcProject` mutation."""
type UpdateCbcProjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CbcProject` that was updated by this mutation."""
  cbcProject: CbcProject

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `CbcProject`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CbcProject`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CbcProject`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `CbcProject`. May be used by Relay 1."""
  cbcProjectEdge(
    """The method to use when ordering `CbcProject`."""
    orderBy: [CbcProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CbcProjectsEdge
}

"""All input for the `updateCbcProject` mutation."""
input UpdateCbcProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CbcProject` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `CbcProject` being updated.
  """
  cbcProjectPatch: CbcProjectPatch!
}

"""
Represents an update to a `CbcProject`. Fields that are set will be updated.
"""
input CbcProjectPatch {
  """The data imported from the excel for that cbc project"""
  jsonData: JSON

  """The timestamp of the last time the data was updated from sharepoint"""
  sharepointTimestamp: Datetime

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateCbcProjectByRowId` mutation."""
input UpdateCbcProjectByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CbcProject` being updated.
  """
  cbcProjectPatch: CbcProjectPatch!

  """Unique ID for the row"""
  rowId: Int!
}

"""The output of our update `CbcProjectCommunity` mutation."""
type UpdateCbcProjectCommunityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CbcProjectCommunity` that was updated by this mutation."""
  cbcProjectCommunity: CbcProjectCommunity

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Cbc` that is related to this `CbcProjectCommunity`."""
  cbcByCbcId: Cbc

  """
  Reads a single `CommunitiesSourceData` that is related to this `CbcProjectCommunity`.
  """
  communitiesSourceDataByCommunitiesSourceDataId: CommunitiesSourceData

  """
  Reads a single `CcbcUser` that is related to this `CbcProjectCommunity`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CbcProjectCommunity`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CbcProjectCommunity`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `CbcProjectCommunity`. May be used by Relay 1."""
  cbcProjectCommunityEdge(
    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CbcProjectCommunitiesEdge
}

"""All input for the `updateCbcProjectCommunity` mutation."""
input UpdateCbcProjectCommunityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CbcProjectCommunity` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `CbcProjectCommunity` being updated.
  """
  cbcProjectCommunityPatch: CbcProjectCommunityPatch!
}

"""
Represents an update to a `CbcProjectCommunity`. Fields that are set will be updated.
"""
input CbcProjectCommunityPatch {
  """The cbc id of the record"""
  cbcId: Int

  """The reference to the communities source data id"""
  communitiesSourceDataId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateCbcProjectCommunityByRowId` mutation."""
input UpdateCbcProjectCommunityByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CbcProjectCommunity` being updated.
  """
  cbcProjectCommunityPatch: CbcProjectCommunityPatch!

  """Unique ID for the row"""
  rowId: Int!
}

"""The output of our update `CcbcUser` mutation."""
type UpdateCcbcUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CcbcUser` that was updated by this mutation."""
  ccbcUser: CcbcUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `CcbcUser`. May be used by Relay 1."""
  ccbcUserEdge(
    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CcbcUsersEdge
}

"""All input for the `updateCcbcUser` mutation."""
input UpdateCcbcUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CcbcUser` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `CcbcUser` being updated.
  """
  ccbcUserPatch: CcbcUserPatch!
}

"""
Represents an update to a `CcbcUser`. Fields that are set will be updated.
"""
input CcbcUserPatch {
  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  sessionSub: String

  """User's first name"""
  givenName: String

  """User's last name"""
  familyName: String

  """User's email address"""
  emailAddress: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """User is an external analyst"""
  externalAnalyst: Boolean
}

"""All input for the `updateCcbcUserByRowId` mutation."""
input UpdateCcbcUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CcbcUser` being updated.
  """
  ccbcUserPatch: CcbcUserPatch!

  """Unique ID for the user"""
  rowId: Int!
}

"""The output of our update `ChangeRequestData` mutation."""
type UpdateChangeRequestDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChangeRequestData` that was updated by this mutation."""
  changeRequestData: ChangeRequestData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ChangeRequestData`.
  """
  applicationByApplicationId: Application

  """Reads a single `CcbcUser` that is related to this `ChangeRequestData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `ChangeRequestData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `ChangeRequestData`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ChangeRequestData`. May be used by Relay 1."""
  changeRequestDataEdge(
    """The method to use when ordering `ChangeRequestData`."""
    orderBy: [ChangeRequestDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeRequestDataEdge
}

"""All input for the `updateChangeRequestData` mutation."""
input UpdateChangeRequestDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChangeRequestData` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ChangeRequestData` being updated.
  """
  changeRequestDataPatch: ChangeRequestDataPatch!
}

"""
Represents an update to a `ChangeRequestData`. Fields that are set will be updated.
"""
input ChangeRequestDataPatch {
  """The foreign key of an application"""
  applicationId: Int

  """The json form data of the change request form"""
  jsonData: JSON

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
  amendmentNumber: Int
}

"""All input for the `updateChangeRequestDataByRowId` mutation."""
input UpdateChangeRequestDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ChangeRequestData` being updated.
  """
  changeRequestDataPatch: ChangeRequestDataPatch!

  """Unique id for the row"""
  rowId: Int!
}

"""The output of our update `CommunitiesSourceData` mutation."""
type UpdateCommunitiesSourceDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CommunitiesSourceData` that was updated by this mutation."""
  communitiesSourceData: CommunitiesSourceData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CcbcUser` that is related to this `CommunitiesSourceData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CommunitiesSourceData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CommunitiesSourceData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `CommunitiesSourceData`. May be used by Relay 1."""
  communitiesSourceDataEdge(
    """The method to use when ordering `CommunitiesSourceData`."""
    orderBy: [CommunitiesSourceDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommunitiesSourceDataEdge
}

"""All input for the `updateCommunitiesSourceData` mutation."""
input UpdateCommunitiesSourceDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CommunitiesSourceData` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `CommunitiesSourceData` being updated.
  """
  communitiesSourceDataPatch: CommunitiesSourceDataPatch!
}

"""
Represents an update to a `CommunitiesSourceData`. Fields that are set will be updated.
"""
input CommunitiesSourceDataPatch {
  """The unique Geographic Name Id"""
  geographicNameId: Int

  """The Geographic Name"""
  bcGeographicName: String

  """The type of the geograhic region"""
  geographicType: String

  """The regional district of the geograhic region"""
  regionalDistrict: String

  """The economic region of the geograhic region"""
  economicRegion: String

  """The latitude value of the geograhic region"""
  latitude: Float

  """The longitude value of the geograhic region"""
  longitude: Float

  """map url of the geograhic region for verification"""
  mapLink: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateCommunitiesSourceDataByRowId` mutation."""
input UpdateCommunitiesSourceDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CommunitiesSourceData` being updated.
  """
  communitiesSourceDataPatch: CommunitiesSourceDataPatch!

  """Unique ID for the row"""
  rowId: Int!
}

"""
All input for the `updateCommunitiesSourceDataByGeographicNameId` mutation.
"""
input UpdateCommunitiesSourceDataByGeographicNameIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CommunitiesSourceData` being updated.
  """
  communitiesSourceDataPatch: CommunitiesSourceDataPatch!

  """The unique Geographic Name Id"""
  geographicNameId: Int!
}

"""The output of our update `ConditionalApprovalData` mutation."""
type UpdateConditionalApprovalDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ConditionalApprovalData` that was updated by this mutation."""
  conditionalApprovalData: ConditionalApprovalData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ConditionalApprovalData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ConditionalApprovalData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ConditionalApprovalData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ConditionalApprovalData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ConditionalApprovalData`. May be used by Relay 1."""
  conditionalApprovalDataEdge(
    """The method to use when ordering `ConditionalApprovalData`."""
    orderBy: [ConditionalApprovalDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConditionalApprovalDataEdge
}

"""All input for the `updateConditionalApprovalData` mutation."""
input UpdateConditionalApprovalDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ConditionalApprovalData` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ConditionalApprovalData` being updated.
  """
  conditionalApprovalDataPatch: ConditionalApprovalDataPatch!
}

"""
Represents an update to a `ConditionalApprovalData`. Fields that are set will be updated.
"""
input ConditionalApprovalDataPatch {
  """The foreign key of an application"""
  applicationId: Int

  """
  The json form data of the conditional approval form. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fconditional_approval_data.json)
  """
  jsonData: JSON

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateConditionalApprovalDataByRowId` mutation."""
input UpdateConditionalApprovalDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ConditionalApprovalData` being updated.
  """
  conditionalApprovalDataPatch: ConditionalApprovalDataPatch!

  """Unique id for the row"""
  rowId: Int!
}

"""The output of our update `EmailRecord` mutation."""
type UpdateEmailRecordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EmailRecord` that was updated by this mutation."""
  emailRecord: EmailRecord

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `EmailRecord`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `EmailRecord`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `EmailRecord`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `EmailRecord`. May be used by Relay 1."""
  emailRecordEdge(
    """The method to use when ordering `EmailRecord`."""
    orderBy: [EmailRecordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmailRecordsEdge
}

"""All input for the `updateEmailRecord` mutation."""
input UpdateEmailRecordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EmailRecord` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `EmailRecord` being updated.
  """
  emailRecordPatch: EmailRecordPatch!
}

"""
Represents an update to a `EmailRecord`. Fields that are set will be updated.
"""
input EmailRecordPatch {
  """Email Address(es) of the recipients"""
  toEmail: String

  """Email Address(es) of the CC recipients"""
  ccEmail: String

  """Subject of the email"""
  subject: String

  """Body of the email"""
  body: String

  """Message ID of the email returned by the email server"""
  messageId: String

  """Additional data for the email"""
  jsonData: JSON

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateEmailRecordByRowId` mutation."""
input UpdateEmailRecordByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EmailRecord` being updated.
  """
  emailRecordPatch: EmailRecordPatch!

  """Unique ID for each email sent"""
  rowId: Int!
}

"""The output of our update `Form` mutation."""
type UpdateFormPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Form` that was updated by this mutation."""
  form: Form

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `FormType` that is related to this `Form`."""
  formTypeByFormType: FormType

  """An edge for our `Form`. May be used by Relay 1."""
  formEdge(
    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsEdge
}

"""All input for the `updateForm` mutation."""
input UpdateFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Form` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Form` being updated.
  """
  formPatch: FormPatch!
}

"""Represents an update to a `Form`. Fields that are set will be updated."""
input FormPatch {
  """The end url for the form data"""
  slug: String

  """The JSON schema for the respective form"""
  jsonSchema: JSON

  """Description of the form"""
  description: String

  """The type of form being stored"""
  formType: String
}

"""All input for the `updateFormByRowId` mutation."""
input UpdateFormByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Form` being updated.
  """
  formPatch: FormPatch!

  """Primary key on form"""
  rowId: Int!
}

"""All input for the `updateFormBySlug` mutation."""
input UpdateFormBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Form` being updated.
  """
  formPatch: FormPatch!

  """The end url for the form data"""
  slug: String!
}

"""The output of our update `FormData` mutation."""
type UpdateFormDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormData` that was updated by this mutation."""
  formData: FormData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `FormDataStatusType` that is related to this `FormData`.
  """
  formDataStatusTypeByFormDataStatusTypeId: FormDataStatusType

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads a single `Form` that is related to this `FormData`."""
  formByFormSchemaId: Form

  """An edge for our `FormData`. May be used by Relay 1."""
  formDataEdge(
    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormDataEdge
}

"""All input for the `updateFormData` mutation."""
input UpdateFormDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormData` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `FormData` being updated.
  """
  formDataPatch: FormDataPatch!
}

"""
Represents an update to a `FormData`. Fields that are set will be updated.
"""
input FormDataPatch {
  """
  The json form data of the project information form. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fform_data.json)
  """
  jsonData: JSON

  """Column saving the key of the last edited form page"""
  lastEditedPage: String

  """Column referencing the form data status type, defaults to draft"""
  formDataStatusTypeId: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Schema for the respective form_data"""
  formSchemaId: Int

  """Column to track analysts reason for changing form data"""
  reasonForChange: String
}

"""All input for the `updateFormDataByRowId` mutation."""
input UpdateFormDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormData` being updated.
  """
  formDataPatch: FormDataPatch!

  """The unique id of the form data"""
  rowId: Int!
}

"""The output of our update `FormDataStatusType` mutation."""
type UpdateFormDataStatusTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormDataStatusType` that was updated by this mutation."""
  formDataStatusType: FormDataStatusType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FormDataStatusType`. May be used by Relay 1."""
  formDataStatusTypeEdge(
    """The method to use when ordering `FormDataStatusType`."""
    orderBy: [FormDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormDataStatusTypesEdge
}

"""All input for the `updateFormDataStatusType` mutation."""
input UpdateFormDataStatusTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormDataStatusType` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `FormDataStatusType` being updated.
  """
  formDataStatusTypePatch: FormDataStatusTypePatch!
}

"""
Represents an update to a `FormDataStatusType`. Fields that are set will be updated.
"""
input FormDataStatusTypePatch {
  """The name of the status type"""
  name: String

  """The description of the status type"""
  description: String
}

"""All input for the `updateFormDataStatusTypeByName` mutation."""
input UpdateFormDataStatusTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormDataStatusType` being updated.
  """
  formDataStatusTypePatch: FormDataStatusTypePatch!

  """The name of the status type"""
  name: String!
}

"""The output of our update `FormType` mutation."""
type UpdateFormTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormType` that was updated by this mutation."""
  formType: FormType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FormType`. May be used by Relay 1."""
  formTypeEdge(
    """The method to use when ordering `FormType`."""
    orderBy: [FormTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormTypesEdge
}

"""All input for the `updateFormType` mutation."""
input UpdateFormTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormType` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `FormType` being updated.
  """
  formTypePatch: FormTypePatch!
}

"""
Represents an update to a `FormType`. Fields that are set will be updated.
"""
input FormTypePatch {
  """Primary key and unique identifier of the type of form"""
  name: String

  """Description of the type of form"""
  description: String
}

"""All input for the `updateFormTypeByName` mutation."""
input UpdateFormTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormType` being updated.
  """
  formTypePatch: FormTypePatch!

  """Primary key and unique identifier of the type of form"""
  name: String!
}

"""The output of our update `GaplessCounter` mutation."""
type UpdateGaplessCounterPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GaplessCounter` that was updated by this mutation."""
  gaplessCounter: GaplessCounter

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `GaplessCounter`. May be used by Relay 1."""
  gaplessCounterEdge(
    """The method to use when ordering `GaplessCounter`."""
    orderBy: [GaplessCountersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GaplessCountersEdge
}

"""All input for the `updateGaplessCounter` mutation."""
input UpdateGaplessCounterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GaplessCounter` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `GaplessCounter` being updated.
  """
  gaplessCounterPatch: GaplessCounterPatch!
}

"""
Represents an update to a `GaplessCounter`. Fields that are set will be updated.
"""
input GaplessCounterPatch {
  """Primary key for the gapless counter"""
  counter: Int
}

"""All input for the `updateGaplessCounterByRowId` mutation."""
input UpdateGaplessCounterByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GaplessCounter` being updated.
  """
  gaplessCounterPatch: GaplessCounterPatch!

  """Primary key for the gapless counter"""
  rowId: Int!
}

"""The output of our update `GisData` mutation."""
type UpdateGisDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GisData` that was updated by this mutation."""
  gisData: GisData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `GisData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `GisData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `GisData`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `GisData`. May be used by Relay 1."""
  gisDataEdge(
    """The method to use when ordering `GisData`."""
    orderBy: [GisDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): GisDataEdge
}

"""All input for the `updateGisData` mutation."""
input UpdateGisDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GisData` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `GisData` being updated.
  """
  gisDataPatch: GisDataPatch!
}

"""
Represents an update to a `GisData`. Fields that are set will be updated.
"""
input GisDataPatch {
  """
  The data imported from the GIS data Excel file. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fgis_data.json)
  """
  jsonData: JSON

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateGisDataByRowId` mutation."""
input UpdateGisDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GisData` being updated.
  """
  gisDataPatch: GisDataPatch!

  """Primary key and unique identifier"""
  rowId: Int!
}

"""The output of our update `Notification` mutation."""
type UpdateNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Notification` that was updated by this mutation."""
  notification: Notification

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Application` that is related to this `Notification`."""
  applicationByApplicationId: Application

  """Reads a single `EmailRecord` that is related to this `Notification`."""
  emailRecordByEmailRecordId: EmailRecord

  """Reads a single `CcbcUser` that is related to this `Notification`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Notification`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Notification`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Notification`. May be used by Relay 1."""
  notificationEdge(
    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotificationsEdge
}

"""All input for the `updateNotification` mutation."""
input UpdateNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Notification` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Notification` being updated.
  """
  notificationPatch: NotificationPatch!
}

"""
Represents an update to a `Notification`. Fields that are set will be updated.
"""
input NotificationPatch {
  """Type of the notification"""
  notificationType: String

  """ID of the application this notification belongs to"""
  applicationId: Int

  """Additional data for the notification"""
  jsonData: JSON

  """Column referencing the email record"""
  emailRecordId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateNotificationByRowId` mutation."""
input UpdateNotificationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Notification` being updated.
  """
  notificationPatch: NotificationPatch!

  """Unique ID for each notification"""
  rowId: Int!
}

"""The output of our update `ProjectInformationData` mutation."""
type UpdateProjectInformationDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectInformationData` that was updated by this mutation."""
  projectInformationData: ProjectInformationData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ProjectInformationData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ProjectInformationData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ProjectInformationData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ProjectInformationData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ProjectInformationData`. May be used by Relay 1."""
  projectInformationDataEdge(
    """The method to use when ordering `ProjectInformationData`."""
    orderBy: [ProjectInformationDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectInformationDataEdge
}

"""All input for the `updateProjectInformationData` mutation."""
input UpdateProjectInformationDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectInformationData` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ProjectInformationData` being updated.
  """
  projectInformationDataPatch: ProjectInformationDataPatch!
}

"""
Represents an update to a `ProjectInformationData`. Fields that are set will be updated.
"""
input ProjectInformationDataPatch {
  """The foreign key of an application"""
  applicationId: Int

  """
  The json form data of the project information form. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fproject_information_data.json)
  """
  jsonData: JSON

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateProjectInformationDataByRowId` mutation."""
input UpdateProjectInformationDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectInformationData` being updated.
  """
  projectInformationDataPatch: ProjectInformationDataPatch!

  """Unique id for the row"""
  rowId: Int!
}

"""The output of our update `RecordVersion` mutation."""
type UpdateRecordVersionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RecordVersion` that was updated by this mutation."""
  recordVersion: RecordVersion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `RecordVersion`."""
  ccbcUserByCreatedBy: CcbcUser

  """An edge for our `RecordVersion`. May be used by Relay 1."""
  recordVersionEdge(
    """The method to use when ordering `RecordVersion`."""
    orderBy: [RecordVersionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RecordVersionsEdge
}

"""All input for the `updateRecordVersion` mutation."""
input UpdateRecordVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RecordVersion` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `RecordVersion` being updated.
  """
  recordVersionPatch: RecordVersionPatch!
}

"""
Represents an update to a `RecordVersion`. Fields that are set will be updated.
"""
input RecordVersionPatch {
  """Primary key and unique identifier"""
  rowId: BigInt

  """The id of the record the history record is associated with"""
  recordId: UUID

  """
  The id of the previous version of the record the history record is associated with
  """
  oldRecordId: UUID

  """The operation performed on the record (created, updated, deleted)"""
  op: Operation

  """The timestamp of the history record"""
  ts: Datetime

  """The oid of the table the record is associated with"""
  tableOid: BigFloat

  """The schema of the table the record is associated with"""
  tableSchema: String

  """The name of the table the record is associated with"""
  tableName: String

  """The user that created the record"""
  createdBy: Int

  """The timestamp of when the record was created"""
  createdAt: Datetime

  """The record in JSON format"""
  record: JSON

  """The previous version of the record in JSON format"""
  oldRecord: JSON
}

"""All input for the `updateRecordVersionByRowId` mutation."""
input UpdateRecordVersionByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RecordVersion` being updated.
  """
  recordVersionPatch: RecordVersionPatch!

  """Primary key and unique identifier"""
  rowId: BigInt!
}

"""The output of our update `RfiData` mutation."""
type UpdateRfiDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RfiData` that was updated by this mutation."""
  rfiData: RfiData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `RfiDataStatusType` that is related to this `RfiData`."""
  rfiDataStatusTypeByRfiDataStatusTypeId: RfiDataStatusType

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `RfiData`. May be used by Relay 1."""
  rfiDataEdge(
    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): RfiDataEdge
}

"""All input for the `updateRfiData` mutation."""
input UpdateRfiDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RfiData` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `RfiData` being updated.
  """
  rfiDataPatch: RfiDataPatch!
}

"""
Represents an update to a `RfiData`. Fields that are set will be updated.
"""
input RfiDataPatch {
  """Reference number assigned to the RFI"""
  rfiNumber: String

  """
  The json form data of the RFI information form. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Frfi_data.json)
  """
  jsonData: JSON

  """Column referencing the form data status type, defaults to draft"""
  rfiDataStatusTypeId: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateRfiDataByRowId` mutation."""
input UpdateRfiDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RfiData` being updated.
  """
  rfiDataPatch: RfiDataPatch!

  """The unique id of the form data"""
  rowId: Int!
}

"""The output of our update `RfiDataStatusType` mutation."""
type UpdateRfiDataStatusTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RfiDataStatusType` that was updated by this mutation."""
  rfiDataStatusType: RfiDataStatusType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `RfiDataStatusType`. May be used by Relay 1."""
  rfiDataStatusTypeEdge(
    """The method to use when ordering `RfiDataStatusType`."""
    orderBy: [RfiDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RfiDataStatusTypesEdge
}

"""All input for the `updateRfiDataStatusType` mutation."""
input UpdateRfiDataStatusTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RfiDataStatusType` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `RfiDataStatusType` being updated.
  """
  rfiDataStatusTypePatch: RfiDataStatusTypePatch!
}

"""
Represents an update to a `RfiDataStatusType`. Fields that are set will be updated.
"""
input RfiDataStatusTypePatch {
  """The name of the status type"""
  name: String

  """The description of the status type"""
  description: String
}

"""All input for the `updateRfiDataStatusTypeByName` mutation."""
input UpdateRfiDataStatusTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RfiDataStatusType` being updated.
  """
  rfiDataStatusTypePatch: RfiDataStatusTypePatch!

  """The name of the status type"""
  name: String!
}

"""The output of our update `SowTab1` mutation."""
type UpdateSowTab1Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SowTab1` that was updated by this mutation."""
  sowTab1: SowTab1

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ApplicationSowData` that is related to this `SowTab1`."""
  applicationSowDataBySowId: ApplicationSowData

  """Reads a single `CcbcUser` that is related to this `SowTab1`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab1`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab1`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `SowTab1`. May be used by Relay 1."""
  sowTab1Edge(
    """The method to use when ordering `SowTab1`."""
    orderBy: [SowTab1SOrderBy!] = [PRIMARY_KEY_ASC]
  ): SowTab1SEdge
}

"""All input for the `updateSowTab1` mutation."""
input UpdateSowTab1Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SowTab1` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `SowTab1` being updated.
  """
  sowTab1Patch: SowTab1Patch!
}

"""
Represents an update to a `SowTab1`. Fields that are set will be updated.
"""
input SowTab1Patch {
  sowId: Int

  """
  The data imported from the Excel filled by the respondent. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fsow_tab_1.json)
  """
  jsonData: JSON

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateSowTab1ByRowId` mutation."""
input UpdateSowTab1ByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SowTab1` being updated.
  """
  sowTab1Patch: SowTab1Patch!
  rowId: Int!
}

"""The output of our update `SowTab2` mutation."""
type UpdateSowTab2Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SowTab2` that was updated by this mutation."""
  sowTab2: SowTab2

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ApplicationSowData` that is related to this `SowTab2`."""
  applicationSowDataBySowId: ApplicationSowData

  """Reads a single `CcbcUser` that is related to this `SowTab2`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab2`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab2`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `SowTab2`. May be used by Relay 1."""
  sowTab2Edge(
    """The method to use when ordering `SowTab2`."""
    orderBy: [SowTab2SOrderBy!] = [PRIMARY_KEY_ASC]
  ): SowTab2SEdge
}

"""All input for the `updateSowTab2` mutation."""
input UpdateSowTab2Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SowTab2` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `SowTab2` being updated.
  """
  sowTab2Patch: SowTab2Patch!
}

"""
Represents an update to a `SowTab2`. Fields that are set will be updated.
"""
input SowTab2Patch {
  """ID of the SoW"""
  sowId: Int

  """
  The data imported from the Excel filled by the respondent. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fsow_tab_2.json)
  """
  jsonData: JSON

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateSowTab2ByRowId` mutation."""
input UpdateSowTab2ByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SowTab2` being updated.
  """
  sowTab2Patch: SowTab2Patch!

  """Unique ID for the SoW detailed budget record"""
  rowId: Int!
}

"""The output of our update `SowTab7` mutation."""
type UpdateSowTab7Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SowTab7` that was updated by this mutation."""
  sowTab7: SowTab7

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ApplicationSowData` that is related to this `SowTab7`."""
  applicationSowDataBySowId: ApplicationSowData

  """Reads a single `CcbcUser` that is related to this `SowTab7`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab7`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab7`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `SowTab7`. May be used by Relay 1."""
  sowTab7Edge(
    """The method to use when ordering `SowTab7`."""
    orderBy: [SowTab7SOrderBy!] = [PRIMARY_KEY_ASC]
  ): SowTab7SEdge
}

"""All input for the `updateSowTab7` mutation."""
input UpdateSowTab7Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SowTab7` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `SowTab7` being updated.
  """
  sowTab7Patch: SowTab7Patch!
}

"""
Represents an update to a `SowTab7`. Fields that are set will be updated.
"""
input SowTab7Patch {
  sowId: Int

  """
  The data imported from the Excel filled by the respondent. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fsow_tab_7.json)
  """
  jsonData: JSON

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateSowTab7ByRowId` mutation."""
input UpdateSowTab7ByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SowTab7` being updated.
  """
  sowTab7Patch: SowTab7Patch!
  rowId: Int!
}

"""The output of our update `SowTab8` mutation."""
type UpdateSowTab8Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SowTab8` that was updated by this mutation."""
  sowTab8: SowTab8

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ApplicationSowData` that is related to this `SowTab8`."""
  applicationSowDataBySowId: ApplicationSowData

  """Reads a single `CcbcUser` that is related to this `SowTab8`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab8`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab8`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `SowTab8`. May be used by Relay 1."""
  sowTab8Edge(
    """The method to use when ordering `SowTab8`."""
    orderBy: [SowTab8SOrderBy!] = [PRIMARY_KEY_ASC]
  ): SowTab8SEdge
}

"""All input for the `updateSowTab8` mutation."""
input UpdateSowTab8Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SowTab8` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `SowTab8` being updated.
  """
  sowTab8Patch: SowTab8Patch!
}

"""
Represents an update to a `SowTab8`. Fields that are set will be updated.
"""
input SowTab8Patch {
  """ID of the SoW"""
  sowId: Int

  """
  The data imported from the Excel filled by the respondent. See [schema](https://json-schema.app/view/%23?url=https%3A%2F%2Fbcgov.github.io%2FCONN-CCBC-portal%2Fschemaspy%2Fdata%2Fsow_tab_8.json)
  """
  jsonData: JSON

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateSowTab8ByRowId` mutation."""
input UpdateSowTab8ByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SowTab8` being updated.
  """
  sowTab8Patch: SowTab8Patch!

  """Unique ID for the SoW Tab 8"""
  rowId: Int!
}

"""The output of our delete `Analyst` mutation."""
type DeleteAnalystPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Analyst` that was deleted by this mutation."""
  analyst: Analyst
  deletedAnalystId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `Analyst`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Analyst`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Analyst`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Analyst`. May be used by Relay 1."""
  analystEdge(
    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AnalystsEdge
}

"""All input for the `deleteAnalyst` mutation."""
input DeleteAnalystInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Analyst` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteAnalystByRowId` mutation."""
input DeleteAnalystByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the analyst"""
  rowId: Int!
}

"""The output of our delete `ApplicationAnalystLead` mutation."""
type DeleteApplicationAnalystLeadPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationAnalystLead` that was deleted by this mutation."""
  applicationAnalystLead: ApplicationAnalystLead
  deletedApplicationAnalystLeadId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationAnalystLead`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `Analyst` that is related to this `ApplicationAnalystLead`.
  """
  analystByAnalystId: Analyst

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnalystLead`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnalystLead`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnalystLead`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationAnalystLead`. May be used by Relay 1."""
  applicationAnalystLeadEdge(
    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationAnalystLeadsEdge
}

"""All input for the `deleteApplicationAnalystLead` mutation."""
input DeleteApplicationAnalystLeadInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationAnalystLead` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteApplicationAnalystLeadByRowId` mutation."""
input DeleteApplicationAnalystLeadByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the application_analyst_lead"""
  rowId: Int!
}

"""The output of our delete `ApplicationAnnounced` mutation."""
type DeleteApplicationAnnouncedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationAnnounced` that was deleted by this mutation."""
  applicationAnnounced: ApplicationAnnounced
  deletedApplicationAnnouncedId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationAnnounced`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnounced`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnounced`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnounced`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationAnnounced`. May be used by Relay 1."""
  applicationAnnouncedEdge(
    """The method to use when ordering `ApplicationAnnounced`."""
    orderBy: [ApplicationAnnouncedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationAnnouncedsEdge
}

"""All input for the `deleteApplicationAnnounced` mutation."""
input DeleteApplicationAnnouncedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationAnnounced` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteApplicationAnnouncedByRowId` mutation."""
input DeleteApplicationAnnouncedByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the application_announced"""
  rowId: Int!
}

"""The output of our delete `ApplicationAnnouncement` mutation."""
type DeleteApplicationAnnouncementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationAnnouncement` that was deleted by this mutation."""
  applicationAnnouncement: ApplicationAnnouncement
  deletedApplicationAnnouncementId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Announcement` that is related to this `ApplicationAnnouncement`.
  """
  announcementByAnnouncementId: Announcement

  """
  Reads a single `Application` that is related to this `ApplicationAnnouncement`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnouncement`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnouncement`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnouncement`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationAnnouncement`. May be used by Relay 1."""
  applicationAnnouncementEdge(
    """The method to use when ordering `ApplicationAnnouncement`."""
    orderBy: [ApplicationAnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationAnnouncementsEdge
}

"""All input for the `deleteApplicationAnnouncement` mutation."""
input DeleteApplicationAnnouncementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationAnnouncement` to be deleted.
  """
  id: ID!
}

"""
All input for the `deleteApplicationAnnouncementByAnnouncementIdAndApplicationId` mutation.
"""
input DeleteApplicationAnnouncementByAnnouncementIdAndApplicationIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The foreign key of a form"""
  announcementId: Int!

  """The foreign key of an application"""
  applicationId: Int!
}

"""The output of our delete `ApplicationFormData` mutation."""
type DeleteApplicationFormDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationFormData` that was deleted by this mutation."""
  applicationFormData: ApplicationFormData
  deletedApplicationFormDataId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `FormData` that is related to this `ApplicationFormData`.
  """
  formDataByFormDataId: FormData

  """
  Reads a single `Application` that is related to this `ApplicationFormData`.
  """
  applicationByApplicationId: Application

  """An edge for our `ApplicationFormData`. May be used by Relay 1."""
  applicationFormDataEdge(
    """The method to use when ordering `ApplicationFormData`."""
    orderBy: [ApplicationFormDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationFormDataEdge
}

"""All input for the `deleteApplicationFormData` mutation."""
input DeleteApplicationFormDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationFormData` to be deleted.
  """
  id: ID!
}

"""
All input for the `deleteApplicationFormDataByFormDataIdAndApplicationId` mutation.
"""
input DeleteApplicationFormDataByFormDataIdAndApplicationIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The foreign key of a form"""
  formDataId: Int!

  """The foreign key of an application"""
  applicationId: Int!
}

"""The output of our delete `ApplicationGisAssessmentHh` mutation."""
type DeleteApplicationGisAssessmentHhPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationGisAssessmentHh` that was deleted by this mutation."""
  applicationGisAssessmentHh: ApplicationGisAssessmentHh
  deletedApplicationGisAssessmentHhId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationGisAssessmentHh`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisAssessmentHh`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisAssessmentHh`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisAssessmentHh`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationGisAssessmentHh`. May be used by Relay 1."""
  applicationGisAssessmentHhEdge(
    """The method to use when ordering `ApplicationGisAssessmentHh`."""
    orderBy: [ApplicationGisAssessmentHhsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationGisAssessmentHhsEdge
}

"""All input for the `deleteApplicationGisAssessmentHh` mutation."""
input DeleteApplicationGisAssessmentHhInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationGisAssessmentHh` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteApplicationGisAssessmentHhByRowId` mutation."""
input DeleteApplicationGisAssessmentHhByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Primary key and unique identifier"""
  rowId: Int!
}

"""The output of our delete `ApplicationGisData` mutation."""
type DeleteApplicationGisDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationGisData` that was deleted by this mutation."""
  applicationGisData: ApplicationGisData
  deletedApplicationGisDataId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `GisData` that is related to this `ApplicationGisData`."""
  gisDataByBatchId: GisData

  """
  Reads a single `Application` that is related to this `ApplicationGisData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationGisData`. May be used by Relay 1."""
  applicationGisDataEdge(
    """The method to use when ordering `ApplicationGisData`."""
    orderBy: [ApplicationGisDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationGisDataEdge
}

"""All input for the `deleteApplicationGisData` mutation."""
input DeleteApplicationGisDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationGisData` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteApplicationGisDataByRowId` mutation."""
input DeleteApplicationGisDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `ApplicationPackage` mutation."""
type DeleteApplicationPackagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationPackage` that was deleted by this mutation."""
  applicationPackage: ApplicationPackage
  deletedApplicationPackageId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationPackage`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPackage`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPackage`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPackage`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationPackage`. May be used by Relay 1."""
  applicationPackageEdge(
    """The method to use when ordering `ApplicationPackage`."""
    orderBy: [ApplicationPackagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationPackagesEdge
}

"""All input for the `deleteApplicationPackage` mutation."""
input DeleteApplicationPackageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationPackage` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteApplicationPackageByRowId` mutation."""
input DeleteApplicationPackageByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the application_package"""
  rowId: Int!
}

"""The output of our delete `ApplicationPendingChangeRequest` mutation."""
type DeleteApplicationPendingChangeRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ApplicationPendingChangeRequest` that was deleted by this mutation.
  """
  applicationPendingChangeRequest: ApplicationPendingChangeRequest
  deletedApplicationPendingChangeRequestId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationPendingChangeRequest`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPendingChangeRequest`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPendingChangeRequest`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPendingChangeRequest`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """
  An edge for our `ApplicationPendingChangeRequest`. May be used by Relay 1.
  """
  applicationPendingChangeRequestEdge(
    """The method to use when ordering `ApplicationPendingChangeRequest`."""
    orderBy: [ApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationPendingChangeRequestsEdge
}

"""All input for the `deleteApplicationPendingChangeRequest` mutation."""
input DeleteApplicationPendingChangeRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationPendingChangeRequest` to be deleted.
  """
  id: ID!
}

"""
All input for the `deleteApplicationPendingChangeRequestByRowId` mutation.
"""
input DeleteApplicationPendingChangeRequestByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the application_pending_change_request"""
  rowId: Int!
}

"""The output of our delete `ApplicationProjectType` mutation."""
type DeleteApplicationProjectTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationProjectType` that was deleted by this mutation."""
  applicationProjectType: ApplicationProjectType
  deletedApplicationProjectTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationProjectType`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationProjectType`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationProjectType`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationProjectType`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationProjectType`. May be used by Relay 1."""
  applicationProjectTypeEdge(
    """The method to use when ordering `ApplicationProjectType`."""
    orderBy: [ApplicationProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationProjectTypesEdge
}

"""All input for the `deleteApplicationProjectType` mutation."""
input DeleteApplicationProjectTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationProjectType` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteApplicationProjectTypeByRowId` mutation."""
input DeleteApplicationProjectTypeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the application_project_type"""
  rowId: Int!
}

"""The output of our delete `ApplicationRfiData` mutation."""
type DeleteApplicationRfiDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationRfiData` that was deleted by this mutation."""
  applicationRfiData: ApplicationRfiData
  deletedApplicationRfiDataId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `RfiData` that is related to this `ApplicationRfiData`."""
  rfiDataByRfiDataId: RfiData

  """
  Reads a single `Application` that is related to this `ApplicationRfiData`.
  """
  applicationByApplicationId: Application

  """An edge for our `ApplicationRfiData`. May be used by Relay 1."""
  applicationRfiDataEdge(
    """The method to use when ordering `ApplicationRfiData`."""
    orderBy: [ApplicationRfiDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRfiDataEdge
}

"""All input for the `deleteApplicationRfiData` mutation."""
input DeleteApplicationRfiDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationRfiData` to be deleted.
  """
  id: ID!
}

"""
All input for the `deleteApplicationRfiDataByRfiDataIdAndApplicationId` mutation.
"""
input DeleteApplicationRfiDataByRfiDataIdAndApplicationIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The foreign key of a form"""
  rfiDataId: Int!

  """The foreign key of an application"""
  applicationId: Int!
}

"""The output of our delete `ApplicationStatus` mutation."""
type DeleteApplicationStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationStatus` that was deleted by this mutation."""
  applicationStatus: ApplicationStatus
  deletedApplicationStatusId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationStatus`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `ApplicationStatusType` that is related to this `ApplicationStatus`.
  """
  applicationStatusTypeByStatus: ApplicationStatusType

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByUpdatedBy: CcbcUser

  """An edge for our `ApplicationStatus`. May be used by Relay 1."""
  applicationStatusEdge(
    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusesEdge
}

"""All input for the `deleteApplicationStatus` mutation."""
input DeleteApplicationStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationStatus` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteApplicationStatusByRowId` mutation."""
input DeleteApplicationStatusByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the application_status"""
  rowId: Int!
}

"""The output of our delete `ApplicationStatusType` mutation."""
type DeleteApplicationStatusTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationStatusType` that was deleted by this mutation."""
  applicationStatusType: ApplicationStatusType
  deletedApplicationStatusTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ApplicationStatusType`. May be used by Relay 1."""
  applicationStatusTypeEdge(
    """The method to use when ordering `ApplicationStatusType`."""
    orderBy: [ApplicationStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusTypesEdge
}

"""All input for the `deleteApplicationStatusType` mutation."""
input DeleteApplicationStatusTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationStatusType` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteApplicationStatusTypeByName` mutation."""
input DeleteApplicationStatusTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Name of and primary key of the status of an application"""
  name: String!
}

"""All input for the `deleteApplicationStatusTypeByStatusOrder` mutation."""
input DeleteApplicationStatusTypeByStatusOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The logical order in which the status should be displayed."""
  statusOrder: Int!
}

"""The output of our delete `AssessmentData` mutation."""
type DeleteAssessmentDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AssessmentData` that was deleted by this mutation."""
  assessmentData: AssessmentData
  deletedAssessmentDataId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Application` that is related to this `AssessmentData`."""
  applicationByApplicationId: Application

  """
  Reads a single `AssessmentType` that is related to this `AssessmentData`.
  """
  assessmentTypeByAssessmentDataType: AssessmentType

  """Reads a single `CcbcUser` that is related to this `AssessmentData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `AssessmentData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `AssessmentData`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `AssessmentData`. May be used by Relay 1."""
  assessmentDataEdge(
    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssessmentDataEdge
}

"""All input for the `deleteAssessmentData` mutation."""
input DeleteAssessmentDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AssessmentData` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteAssessmentDataByRowId` mutation."""
input DeleteAssessmentDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `AssessmentType` mutation."""
type DeleteAssessmentTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AssessmentType` that was deleted by this mutation."""
  assessmentType: AssessmentType
  deletedAssessmentTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `AssessmentType`. May be used by Relay 1."""
  assessmentTypeEdge(
    """The method to use when ordering `AssessmentType`."""
    orderBy: [AssessmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssessmentTypesEdge
}

"""All input for the `deleteAssessmentType` mutation."""
input DeleteAssessmentTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AssessmentType` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteAssessmentTypeByName` mutation."""
input DeleteAssessmentTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Name of and primary key of the type of an assessment"""
  name: String!
}

"""The output of our delete `Attachment` mutation."""
type DeleteAttachmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Attachment` that was deleted by this mutation."""
  attachment: Attachment
  deletedAttachmentId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Application` that is related to this `Attachment`."""
  applicationByApplicationId: Application

  """
  Reads a single `ApplicationStatus` that is related to this `Attachment`.
  """
  applicationStatusByApplicationStatusId: ApplicationStatus

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Attachment`. May be used by Relay 1."""
  attachmentEdge(
    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsEdge
}

"""All input for the `deleteAttachment` mutation."""
input DeleteAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Attachment` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteAttachmentByRowId` mutation."""
input DeleteAttachmentByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the attachment"""
  rowId: Int!
}

"""The output of our delete `Cbc` mutation."""
type DeleteCbcPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Cbc` that was deleted by this mutation."""
  cbc: Cbc
  deletedCbcId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `Cbc`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Cbc`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Cbc`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Cbc`. May be used by Relay 1."""
  cbcEdge(
    """The method to use when ordering `Cbc`."""
    orderBy: [CbcsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CbcsEdge
}

"""All input for the `deleteCbc` mutation."""
input DeleteCbcInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Cbc` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteCbcByRowId` mutation."""
input DeleteCbcByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the row"""
  rowId: Int!
}

"""All input for the `deleteCbcByProjectNumber` mutation."""
input DeleteCbcByProjectNumberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The project number, unique for each project"""
  projectNumber: Int!
}

"""
The output of our delete `CbcApplicationPendingChangeRequest` mutation.
"""
type DeleteCbcApplicationPendingChangeRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CbcApplicationPendingChangeRequest` that was deleted by this mutation.
  """
  cbcApplicationPendingChangeRequest: CbcApplicationPendingChangeRequest
  deletedCbcApplicationPendingChangeRequestId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Cbc` that is related to this `CbcApplicationPendingChangeRequest`.
  """
  cbcByCbcId: Cbc

  """
  Reads a single `CcbcUser` that is related to this `CbcApplicationPendingChangeRequest`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CbcApplicationPendingChangeRequest`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CbcApplicationPendingChangeRequest`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """
  An edge for our `CbcApplicationPendingChangeRequest`. May be used by Relay 1.
  """
  cbcApplicationPendingChangeRequestEdge(
    """The method to use when ordering `CbcApplicationPendingChangeRequest`."""
    orderBy: [CbcApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CbcApplicationPendingChangeRequestsEdge
}

"""All input for the `deleteCbcApplicationPendingChangeRequest` mutation."""
input DeleteCbcApplicationPendingChangeRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CbcApplicationPendingChangeRequest` to be deleted.
  """
  id: ID!
}

"""
All input for the `deleteCbcApplicationPendingChangeRequestByRowId` mutation.
"""
input DeleteCbcApplicationPendingChangeRequestByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the cbc_application_pending_change_request"""
  rowId: Int!
}

"""The output of our delete `CbcData` mutation."""
type DeleteCbcDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CbcData` that was deleted by this mutation."""
  cbcData: CbcData
  deletedCbcDataId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Cbc` that is related to this `CbcData`."""
  cbcByCbcId: Cbc

  """Reads a single `Cbc` that is related to this `CbcData`."""
  cbcByProjectNumber: Cbc

  """Reads a single `CcbcUser` that is related to this `CbcData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CbcData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CbcData`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `CbcData`. May be used by Relay 1."""
  cbcDataEdge(
    """The method to use when ordering `CbcData`."""
    orderBy: [CbcDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): CbcDataEdge
}

"""All input for the `deleteCbcData` mutation."""
input DeleteCbcDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CbcData` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteCbcDataByRowId` mutation."""
input DeleteCbcDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the cbc_data"""
  rowId: Int!
}

"""The output of our delete `CbcDataChangeReason` mutation."""
type DeleteCbcDataChangeReasonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CbcDataChangeReason` that was deleted by this mutation."""
  cbcDataChangeReason: CbcDataChangeReason
  deletedCbcDataChangeReasonId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CbcData` that is related to this `CbcDataChangeReason`.
  """
  cbcDataByCbcDataId: CbcData

  """
  Reads a single `CcbcUser` that is related to this `CbcDataChangeReason`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CbcDataChangeReason`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CbcDataChangeReason`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `CbcDataChangeReason`. May be used by Relay 1."""
  cbcDataChangeReasonEdge(
    """The method to use when ordering `CbcDataChangeReason`."""
    orderBy: [CbcDataChangeReasonsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CbcDataChangeReasonsEdge
}

"""All input for the `deleteCbcDataChangeReason` mutation."""
input DeleteCbcDataChangeReasonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CbcDataChangeReason` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteCbcDataChangeReasonByRowId` mutation."""
input DeleteCbcDataChangeReasonByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the cbc_data_change_reason"""
  rowId: Int!
}

"""The output of our delete `CbcProjectCommunity` mutation."""
type DeleteCbcProjectCommunityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CbcProjectCommunity` that was deleted by this mutation."""
  cbcProjectCommunity: CbcProjectCommunity
  deletedCbcProjectCommunityId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Cbc` that is related to this `CbcProjectCommunity`."""
  cbcByCbcId: Cbc

  """
  Reads a single `CommunitiesSourceData` that is related to this `CbcProjectCommunity`.
  """
  communitiesSourceDataByCommunitiesSourceDataId: CommunitiesSourceData

  """
  Reads a single `CcbcUser` that is related to this `CbcProjectCommunity`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CbcProjectCommunity`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CbcProjectCommunity`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `CbcProjectCommunity`. May be used by Relay 1."""
  cbcProjectCommunityEdge(
    """The method to use when ordering `CbcProjectCommunity`."""
    orderBy: [CbcProjectCommunitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CbcProjectCommunitiesEdge
}

"""All input for the `deleteCbcProjectCommunity` mutation."""
input DeleteCbcProjectCommunityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CbcProjectCommunity` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteCbcProjectCommunityByRowId` mutation."""
input DeleteCbcProjectCommunityByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the row"""
  rowId: Int!
}

"""The output of our delete `CcbcUser` mutation."""
type DeleteCcbcUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CcbcUser` that was deleted by this mutation."""
  ccbcUser: CcbcUser
  deletedCcbcUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `CcbcUser`. May be used by Relay 1."""
  ccbcUserEdge(
    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CcbcUsersEdge
}

"""All input for the `deleteCcbcUser` mutation."""
input DeleteCcbcUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CcbcUser` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteCcbcUserByRowId` mutation."""
input DeleteCcbcUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the user"""
  rowId: Int!
}

"""The output of our delete `ChangeRequestData` mutation."""
type DeleteChangeRequestDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChangeRequestData` that was deleted by this mutation."""
  changeRequestData: ChangeRequestData
  deletedChangeRequestDataId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ChangeRequestData`.
  """
  applicationByApplicationId: Application

  """Reads a single `CcbcUser` that is related to this `ChangeRequestData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `ChangeRequestData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `ChangeRequestData`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ChangeRequestData`. May be used by Relay 1."""
  changeRequestDataEdge(
    """The method to use when ordering `ChangeRequestData`."""
    orderBy: [ChangeRequestDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeRequestDataEdge
}

"""All input for the `deleteChangeRequestData` mutation."""
input DeleteChangeRequestDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChangeRequestData` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteChangeRequestDataByRowId` mutation."""
input DeleteChangeRequestDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique id for the row"""
  rowId: Int!
}

"""The output of our delete `CommunitiesSourceData` mutation."""
type DeleteCommunitiesSourceDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CommunitiesSourceData` that was deleted by this mutation."""
  communitiesSourceData: CommunitiesSourceData
  deletedCommunitiesSourceDataId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CcbcUser` that is related to this `CommunitiesSourceData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CommunitiesSourceData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CommunitiesSourceData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `CommunitiesSourceData`. May be used by Relay 1."""
  communitiesSourceDataEdge(
    """The method to use when ordering `CommunitiesSourceData`."""
    orderBy: [CommunitiesSourceDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommunitiesSourceDataEdge
}

"""All input for the `deleteCommunitiesSourceData` mutation."""
input DeleteCommunitiesSourceDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CommunitiesSourceData` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteCommunitiesSourceDataByRowId` mutation."""
input DeleteCommunitiesSourceDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the row"""
  rowId: Int!
}

"""
All input for the `deleteCommunitiesSourceDataByGeographicNameId` mutation.
"""
input DeleteCommunitiesSourceDataByGeographicNameIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The unique Geographic Name Id"""
  geographicNameId: Int!
}

"""The output of our delete `ConditionalApprovalData` mutation."""
type DeleteConditionalApprovalDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ConditionalApprovalData` that was deleted by this mutation."""
  conditionalApprovalData: ConditionalApprovalData
  deletedConditionalApprovalDataId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ConditionalApprovalData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ConditionalApprovalData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ConditionalApprovalData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ConditionalApprovalData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ConditionalApprovalData`. May be used by Relay 1."""
  conditionalApprovalDataEdge(
    """The method to use when ordering `ConditionalApprovalData`."""
    orderBy: [ConditionalApprovalDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConditionalApprovalDataEdge
}

"""All input for the `deleteConditionalApprovalData` mutation."""
input DeleteConditionalApprovalDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ConditionalApprovalData` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteConditionalApprovalDataByRowId` mutation."""
input DeleteConditionalApprovalDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique id for the row"""
  rowId: Int!
}

"""The output of our delete `EmailRecord` mutation."""
type DeleteEmailRecordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EmailRecord` that was deleted by this mutation."""
  emailRecord: EmailRecord
  deletedEmailRecordId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `EmailRecord`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `EmailRecord`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `EmailRecord`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `EmailRecord`. May be used by Relay 1."""
  emailRecordEdge(
    """The method to use when ordering `EmailRecord`."""
    orderBy: [EmailRecordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmailRecordsEdge
}

"""All input for the `deleteEmailRecord` mutation."""
input DeleteEmailRecordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EmailRecord` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteEmailRecordByRowId` mutation."""
input DeleteEmailRecordByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for each email sent"""
  rowId: Int!
}

"""The output of our delete `Form` mutation."""
type DeleteFormPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Form` that was deleted by this mutation."""
  form: Form
  deletedFormId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `FormType` that is related to this `Form`."""
  formTypeByFormType: FormType

  """An edge for our `Form`. May be used by Relay 1."""
  formEdge(
    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsEdge
}

"""All input for the `deleteForm` mutation."""
input DeleteFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Form` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteFormByRowId` mutation."""
input DeleteFormByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Primary key on form"""
  rowId: Int!
}

"""All input for the `deleteFormBySlug` mutation."""
input DeleteFormBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The end url for the form data"""
  slug: String!
}

"""The output of our delete `FormData` mutation."""
type DeleteFormDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormData` that was deleted by this mutation."""
  formData: FormData
  deletedFormDataId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `FormDataStatusType` that is related to this `FormData`.
  """
  formDataStatusTypeByFormDataStatusTypeId: FormDataStatusType

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads a single `Form` that is related to this `FormData`."""
  formByFormSchemaId: Form

  """An edge for our `FormData`. May be used by Relay 1."""
  formDataEdge(
    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormDataEdge
}

"""All input for the `deleteFormData` mutation."""
input DeleteFormDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormData` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteFormDataByRowId` mutation."""
input DeleteFormDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The unique id of the form data"""
  rowId: Int!
}

"""The output of our delete `FormDataStatusType` mutation."""
type DeleteFormDataStatusTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormDataStatusType` that was deleted by this mutation."""
  formDataStatusType: FormDataStatusType
  deletedFormDataStatusTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FormDataStatusType`. May be used by Relay 1."""
  formDataStatusTypeEdge(
    """The method to use when ordering `FormDataStatusType`."""
    orderBy: [FormDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormDataStatusTypesEdge
}

"""All input for the `deleteFormDataStatusType` mutation."""
input DeleteFormDataStatusTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormDataStatusType` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteFormDataStatusTypeByName` mutation."""
input DeleteFormDataStatusTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The name of the status type"""
  name: String!
}

"""The output of our delete `FormType` mutation."""
type DeleteFormTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormType` that was deleted by this mutation."""
  formType: FormType
  deletedFormTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FormType`. May be used by Relay 1."""
  formTypeEdge(
    """The method to use when ordering `FormType`."""
    orderBy: [FormTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormTypesEdge
}

"""All input for the `deleteFormType` mutation."""
input DeleteFormTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormType` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteFormTypeByName` mutation."""
input DeleteFormTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Primary key and unique identifier of the type of form"""
  name: String!
}

"""The output of our delete `GaplessCounter` mutation."""
type DeleteGaplessCounterPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GaplessCounter` that was deleted by this mutation."""
  gaplessCounter: GaplessCounter
  deletedGaplessCounterId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `GaplessCounter`. May be used by Relay 1."""
  gaplessCounterEdge(
    """The method to use when ordering `GaplessCounter`."""
    orderBy: [GaplessCountersOrderBy!] = [PRIMARY_KEY_ASC]
  ): GaplessCountersEdge
}

"""All input for the `deleteGaplessCounter` mutation."""
input DeleteGaplessCounterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GaplessCounter` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteGaplessCounterByRowId` mutation."""
input DeleteGaplessCounterByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Primary key for the gapless counter"""
  rowId: Int!
}

"""The output of our delete `GisData` mutation."""
type DeleteGisDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GisData` that was deleted by this mutation."""
  gisData: GisData
  deletedGisDataId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `GisData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `GisData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `GisData`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `GisData`. May be used by Relay 1."""
  gisDataEdge(
    """The method to use when ordering `GisData`."""
    orderBy: [GisDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): GisDataEdge
}

"""All input for the `deleteGisData` mutation."""
input DeleteGisDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GisData` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteGisDataByRowId` mutation."""
input DeleteGisDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Primary key and unique identifier"""
  rowId: Int!
}

"""The output of our delete `Notification` mutation."""
type DeleteNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Notification` that was deleted by this mutation."""
  notification: Notification
  deletedNotificationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Application` that is related to this `Notification`."""
  applicationByApplicationId: Application

  """Reads a single `EmailRecord` that is related to this `Notification`."""
  emailRecordByEmailRecordId: EmailRecord

  """Reads a single `CcbcUser` that is related to this `Notification`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Notification`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Notification`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Notification`. May be used by Relay 1."""
  notificationEdge(
    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotificationsEdge
}

"""All input for the `deleteNotification` mutation."""
input DeleteNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Notification` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteNotificationByRowId` mutation."""
input DeleteNotificationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for each notification"""
  rowId: Int!
}

"""The output of our delete `ProjectInformationData` mutation."""
type DeleteProjectInformationDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectInformationData` that was deleted by this mutation."""
  projectInformationData: ProjectInformationData
  deletedProjectInformationDataId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ProjectInformationData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ProjectInformationData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ProjectInformationData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ProjectInformationData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ProjectInformationData`. May be used by Relay 1."""
  projectInformationDataEdge(
    """The method to use when ordering `ProjectInformationData`."""
    orderBy: [ProjectInformationDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectInformationDataEdge
}

"""All input for the `deleteProjectInformationData` mutation."""
input DeleteProjectInformationDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectInformationData` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteProjectInformationDataByRowId` mutation."""
input DeleteProjectInformationDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique id for the row"""
  rowId: Int!
}

"""The output of our delete `RecordVersion` mutation."""
type DeleteRecordVersionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RecordVersion` that was deleted by this mutation."""
  recordVersion: RecordVersion
  deletedRecordVersionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `RecordVersion`."""
  ccbcUserByCreatedBy: CcbcUser

  """An edge for our `RecordVersion`. May be used by Relay 1."""
  recordVersionEdge(
    """The method to use when ordering `RecordVersion`."""
    orderBy: [RecordVersionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RecordVersionsEdge
}

"""All input for the `deleteRecordVersion` mutation."""
input DeleteRecordVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RecordVersion` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteRecordVersionByRowId` mutation."""
input DeleteRecordVersionByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Primary key and unique identifier"""
  rowId: BigInt!
}

"""The output of our delete `RfiData` mutation."""
type DeleteRfiDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RfiData` that was deleted by this mutation."""
  rfiData: RfiData
  deletedRfiDataId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `RfiDataStatusType` that is related to this `RfiData`."""
  rfiDataStatusTypeByRfiDataStatusTypeId: RfiDataStatusType

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `RfiData`. May be used by Relay 1."""
  rfiDataEdge(
    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): RfiDataEdge
}

"""All input for the `deleteRfiData` mutation."""
input DeleteRfiDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RfiData` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteRfiDataByRowId` mutation."""
input DeleteRfiDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The unique id of the form data"""
  rowId: Int!
}

"""The output of our delete `RfiDataStatusType` mutation."""
type DeleteRfiDataStatusTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RfiDataStatusType` that was deleted by this mutation."""
  rfiDataStatusType: RfiDataStatusType
  deletedRfiDataStatusTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `RfiDataStatusType`. May be used by Relay 1."""
  rfiDataStatusTypeEdge(
    """The method to use when ordering `RfiDataStatusType`."""
    orderBy: [RfiDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RfiDataStatusTypesEdge
}

"""All input for the `deleteRfiDataStatusType` mutation."""
input DeleteRfiDataStatusTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RfiDataStatusType` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteRfiDataStatusTypeByName` mutation."""
input DeleteRfiDataStatusTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The name of the status type"""
  name: String!
}

"""The output of our delete `SowTab1` mutation."""
type DeleteSowTab1Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SowTab1` that was deleted by this mutation."""
  sowTab1: SowTab1
  deletedSowTab1Id: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ApplicationSowData` that is related to this `SowTab1`."""
  applicationSowDataBySowId: ApplicationSowData

  """Reads a single `CcbcUser` that is related to this `SowTab1`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab1`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab1`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `SowTab1`. May be used by Relay 1."""
  sowTab1Edge(
    """The method to use when ordering `SowTab1`."""
    orderBy: [SowTab1SOrderBy!] = [PRIMARY_KEY_ASC]
  ): SowTab1SEdge
}

"""All input for the `deleteSowTab1` mutation."""
input DeleteSowTab1Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SowTab1` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteSowTab1ByRowId` mutation."""
input DeleteSowTab1ByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `SowTab2` mutation."""
type DeleteSowTab2Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SowTab2` that was deleted by this mutation."""
  sowTab2: SowTab2
  deletedSowTab2Id: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ApplicationSowData` that is related to this `SowTab2`."""
  applicationSowDataBySowId: ApplicationSowData

  """Reads a single `CcbcUser` that is related to this `SowTab2`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab2`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab2`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `SowTab2`. May be used by Relay 1."""
  sowTab2Edge(
    """The method to use when ordering `SowTab2`."""
    orderBy: [SowTab2SOrderBy!] = [PRIMARY_KEY_ASC]
  ): SowTab2SEdge
}

"""All input for the `deleteSowTab2` mutation."""
input DeleteSowTab2Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SowTab2` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteSowTab2ByRowId` mutation."""
input DeleteSowTab2ByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the SoW detailed budget record"""
  rowId: Int!
}

"""The output of our delete `SowTab7` mutation."""
type DeleteSowTab7Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SowTab7` that was deleted by this mutation."""
  sowTab7: SowTab7
  deletedSowTab7Id: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ApplicationSowData` that is related to this `SowTab7`."""
  applicationSowDataBySowId: ApplicationSowData

  """Reads a single `CcbcUser` that is related to this `SowTab7`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab7`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab7`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `SowTab7`. May be used by Relay 1."""
  sowTab7Edge(
    """The method to use when ordering `SowTab7`."""
    orderBy: [SowTab7SOrderBy!] = [PRIMARY_KEY_ASC]
  ): SowTab7SEdge
}

"""All input for the `deleteSowTab7` mutation."""
input DeleteSowTab7Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SowTab7` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteSowTab7ByRowId` mutation."""
input DeleteSowTab7ByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `SowTab8` mutation."""
type DeleteSowTab8Payload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SowTab8` that was deleted by this mutation."""
  sowTab8: SowTab8
  deletedSowTab8Id: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `ApplicationSowData` that is related to this `SowTab8`."""
  applicationSowDataBySowId: ApplicationSowData

  """Reads a single `CcbcUser` that is related to this `SowTab8`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab8`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `SowTab8`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `SowTab8`. May be used by Relay 1."""
  sowTab8Edge(
    """The method to use when ordering `SowTab8`."""
    orderBy: [SowTab8SOrderBy!] = [PRIMARY_KEY_ASC]
  ): SowTab8SEdge
}

"""All input for the `deleteSowTab8` mutation."""
input DeleteSowTab8Input {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SowTab8` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteSowTab8ByRowId` mutation."""
input DeleteSowTab8ByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the SoW Tab 8"""
  rowId: Int!
}

"""The output of our `archiveApplication` mutation."""
type ArchiveApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  application: Application

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Intake` that is related to this `Application`."""
  intakeByIntakeId: Intake

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge
}

"""All input for the `archiveApplication` mutation."""
input ArchiveApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  applicationRowId: Int!
}

"""The output of our `archiveApplicationClaimsData` mutation."""
type ArchiveApplicationClaimsDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `archiveApplicationClaimsData` mutation."""
input ArchiveApplicationClaimsDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _claimsDataId: Int!
}

"""
The output of our `archiveApplicationCommunityProgressReport` mutation.
"""
type ArchiveApplicationCommunityProgressReportPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `archiveApplicationCommunityProgressReport` mutation.
"""
input ArchiveApplicationCommunityProgressReportInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _communityProgressReportId: Int!
}

"""The output of our `archiveApplicationMilestoneData` mutation."""
type ArchiveApplicationMilestoneDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `archiveApplicationMilestoneData` mutation."""
input ArchiveApplicationMilestoneDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _milestoneId: Int!
}

"""The output of our `archiveApplicationSow` mutation."""
type ArchiveApplicationSowPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `archiveApplicationSow` mutation."""
input ArchiveApplicationSowInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _amendmentNumber: Int!
}

"""The output of our `archiveIntake` mutation."""
type ArchiveIntakePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  intake: Intake

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads a single `GaplessCounter` that is related to this `Intake`."""
  gaplessCounterByCounterId: GaplessCounter

  """An edge for our `Intake`. May be used by Relay 1."""
  intakeEdge(
    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]
  ): IntakesEdge
}

"""All input for the `archiveIntake` mutation."""
input ArchiveIntakeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  intakeNumber: Int!
}

"""The output of our `createAnnouncement` mutation."""
type CreateAnnouncementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  announcement: Announcement

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `Announcement`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Announcement`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Announcement`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Announcement`. May be used by Relay 1."""
  announcementEdge(
    """The method to use when ordering `Announcement`."""
    orderBy: [AnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AnnouncementsEdge
}

"""All input for the `createAnnouncement` mutation."""
input CreateAnnouncementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectNumbers: String!
  jsonData: JSON!
}

"""The output of our `createApplication` mutation."""
type CreateApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  application: Application

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Intake` that is related to this `Application`."""
  intakeByIntakeId: Intake

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge
}

"""All input for the `createApplication` mutation."""
input CreateApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  code: String
}

"""The output of our `createApplicationAnnouncedRecord` mutation."""
type CreateApplicationAnnouncedRecordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  applicationAnnounced: ApplicationAnnounced

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationAnnounced`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnounced`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnounced`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnnounced`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationAnnounced`. May be used by Relay 1."""
  applicationAnnouncedEdge(
    """The method to use when ordering `ApplicationAnnounced`."""
    orderBy: [ApplicationAnnouncedsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationAnnouncedsEdge
}

"""All input for the `createApplicationAnnouncedRecord` mutation."""
input CreateApplicationAnnouncedRecordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _applicationId: Int!
  isAnnounced: Boolean!
}

"""The output of our `createApplicationClaimsData` mutation."""
type CreateApplicationClaimsDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  applicationClaimsData: ApplicationClaimsData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationClaimsData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationClaimsData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationClaimsData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationClaimsData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationClaimsData`. May be used by Relay 1."""
  applicationClaimsDataEdge(
    """The method to use when ordering `ApplicationClaimsData`."""
    orderBy: [ApplicationClaimsDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationClaimsDataEdge
}

"""All input for the `createApplicationClaimsData` mutation."""
input CreateApplicationClaimsDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _applicationId: Int!
  _jsonData: JSON!
  _oldClaimsId: Int
  _excelDataId: Int
}

"""The output of our `createApplicationClaimsExcelData` mutation."""
type CreateApplicationClaimsExcelDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  applicationClaimsExcelData: ApplicationClaimsExcelData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationClaimsExcelData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationClaimsExcelData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationClaimsExcelData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationClaimsExcelData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationClaimsExcelData`. May be used by Relay 1."""
  applicationClaimsExcelDataEdge(
    """The method to use when ordering `ApplicationClaimsExcelData`."""
    orderBy: [ApplicationClaimsExcelDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationClaimsExcelDataEdge
}

"""All input for the `createApplicationClaimsExcelData` mutation."""
input CreateApplicationClaimsExcelDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _applicationId: Int!
  _jsonData: JSON!
  _oldId: Int
}

"""
The output of our `createApplicationCommunityProgressReportData` mutation.
"""
type CreateApplicationCommunityProgressReportDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  applicationCommunityProgressReportData: ApplicationCommunityProgressReportData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationCommunityProgressReportData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationCommunityProgressReportData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationCommunityProgressReportData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationCommunityProgressReportData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """
  An edge for our `ApplicationCommunityProgressReportData`. May be used by Relay 1.
  """
  applicationCommunityProgressReportDataEdge(
    """
    The method to use when ordering `ApplicationCommunityProgressReportData`.
    """
    orderBy: [ApplicationCommunityProgressReportDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationCommunityProgressReportDataEdge
}

"""
All input for the `createApplicationCommunityProgressReportData` mutation.
"""
input CreateApplicationCommunityProgressReportDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _applicationId: Int!
  _jsonData: JSON!
  _oldCommunityProgressReportId: Int
  _excelDataId: Int
}

"""
The output of our `createApplicationCommunityReportExcelData` mutation.
"""
type CreateApplicationCommunityReportExcelDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  applicationCommunityReportExcelData: ApplicationCommunityReportExcelData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationCommunityReportExcelData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationCommunityReportExcelData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationCommunityReportExcelData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationCommunityReportExcelData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """
  An edge for our `ApplicationCommunityReportExcelData`. May be used by Relay 1.
  """
  applicationCommunityReportExcelDataEdge(
    """The method to use when ordering `ApplicationCommunityReportExcelData`."""
    orderBy: [ApplicationCommunityReportExcelDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationCommunityReportExcelDataEdge
}

"""
All input for the `createApplicationCommunityReportExcelData` mutation.
"""
input CreateApplicationCommunityReportExcelDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _applicationId: Int!
  _jsonData: JSON!
  _oldId: Int
}

"""The output of our `createApplicationInternalDescription` mutation."""
type CreateApplicationInternalDescriptionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  applicationInternalDescription: ApplicationInternalDescription

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationInternalDescription`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationInternalDescription`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationInternalDescription`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationInternalDescription`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """
  An edge for our `ApplicationInternalDescription`. May be used by Relay 1.
  """
  applicationInternalDescriptionEdge(
    """The method to use when ordering `ApplicationInternalDescription`."""
    orderBy: [ApplicationInternalDescriptionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationInternalDescriptionsEdge
}

"""All input for the `createApplicationInternalDescription` mutation."""
input CreateApplicationInternalDescriptionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _applicationId: Int!
  _description: String!
}

"""The output of our `createApplicationMilestoneData` mutation."""
type CreateApplicationMilestoneDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  applicationMilestoneData: ApplicationMilestoneData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationMilestoneData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationMilestoneData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationMilestoneData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationMilestoneData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationMilestoneData`. May be used by Relay 1."""
  applicationMilestoneDataEdge(
    """The method to use when ordering `ApplicationMilestoneData`."""
    orderBy: [ApplicationMilestoneDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationMilestoneDataEdge
}

"""All input for the `createApplicationMilestoneData` mutation."""
input CreateApplicationMilestoneDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _applicationId: Int!
  _jsonData: JSON!
  _oldMilestoneId: Int
  _excelDataId: Int
}

"""The output of our `createApplicationMilestoneExcelData` mutation."""
type CreateApplicationMilestoneExcelDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  applicationMilestoneExcelData: ApplicationMilestoneExcelData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationMilestoneExcelData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationMilestoneExcelData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationMilestoneExcelData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationMilestoneExcelData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """
  An edge for our `ApplicationMilestoneExcelData`. May be used by Relay 1.
  """
  applicationMilestoneExcelDataEdge(
    """The method to use when ordering `ApplicationMilestoneExcelData`."""
    orderBy: [ApplicationMilestoneExcelDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationMilestoneExcelDataEdge
}

"""All input for the `createApplicationMilestoneExcelData` mutation."""
input CreateApplicationMilestoneExcelDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _applicationId: Int!
  _jsonData: JSON!
  _oldId: Int
}

"""The output of our `createApplicationSowData` mutation."""
type CreateApplicationSowDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  applicationSowData: ApplicationSowData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationSowData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationSowData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationSowData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationSowData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationSowData`. May be used by Relay 1."""
  applicationSowDataEdge(
    """The method to use when ordering `ApplicationSowData`."""
    orderBy: [ApplicationSowDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationSowDataEdge
}

"""All input for the `createApplicationSowData` mutation."""
input CreateApplicationSowDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _applicationId: Int!
  _jsonData: JSON!
  _amendmentNumber: Int!
}

"""The output of our `createAssessmentForm` mutation."""
type CreateAssessmentFormPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  assessmentData: AssessmentData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Application` that is related to this `AssessmentData`."""
  applicationByApplicationId: Application

  """
  Reads a single `AssessmentType` that is related to this `AssessmentData`.
  """
  assessmentTypeByAssessmentDataType: AssessmentType

  """Reads a single `CcbcUser` that is related to this `AssessmentData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `AssessmentData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `AssessmentData`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `AssessmentData`. May be used by Relay 1."""
  assessmentDataEdge(
    """The method to use when ordering `AssessmentData`."""
    orderBy: [AssessmentDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): AssessmentDataEdge
}

"""All input for the `createAssessmentForm` mutation."""
input CreateAssessmentFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _assessmentType: String!
  _jsonData: JSON!
  _applicationId: Int!
}

"""The output of our `createCbcPendingChangeRequest` mutation."""
type CreateCbcPendingChangeRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  cbcApplicationPendingChangeRequest: CbcApplicationPendingChangeRequest

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Cbc` that is related to this `CbcApplicationPendingChangeRequest`.
  """
  cbcByCbcId: Cbc

  """
  Reads a single `CcbcUser` that is related to this `CbcApplicationPendingChangeRequest`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CbcApplicationPendingChangeRequest`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `CbcApplicationPendingChangeRequest`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """
  An edge for our `CbcApplicationPendingChangeRequest`. May be used by Relay 1.
  """
  cbcApplicationPendingChangeRequestEdge(
    """The method to use when ordering `CbcApplicationPendingChangeRequest`."""
    orderBy: [CbcApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CbcApplicationPendingChangeRequestsEdge
}

"""All input for the `createCbcPendingChangeRequest` mutation."""
input CreateCbcPendingChangeRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _cbcId: Int!
  _isPending: Boolean!
  _comment: String
}

"""The output of our `createCbcProject` mutation."""
type CreateCbcProjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  cbcProject: CbcProject

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `CbcProject`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CbcProject`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CbcProject`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `CbcProject`. May be used by Relay 1."""
  cbcProjectEdge(
    """The method to use when ordering `CbcProject`."""
    orderBy: [CbcProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CbcProjectsEdge
}

"""All input for the `createCbcProject` mutation."""
input CreateCbcProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _jsonData: JSON!
  _sharepointTimestamp: Datetime
}

"""The output of our `createChangeRequest` mutation."""
type CreateChangeRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  changeRequestData: ChangeRequestData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ChangeRequestData`.
  """
  applicationByApplicationId: Application

  """Reads a single `CcbcUser` that is related to this `ChangeRequestData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `ChangeRequestData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `ChangeRequestData`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ChangeRequestData`. May be used by Relay 1."""
  changeRequestDataEdge(
    """The method to use when ordering `ChangeRequestData`."""
    orderBy: [ChangeRequestDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeRequestDataEdge
}

"""All input for the `createChangeRequest` mutation."""
input CreateChangeRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _applicationId: Int!
  _amendmentNumber: Int!
  _jsonData: JSON!
  _oldChangeRequestId: Int
}

"""The output of our `createConditionalApproval` mutation."""
type CreateConditionalApprovalPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  conditionalApprovalData: ConditionalApprovalData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ConditionalApprovalData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ConditionalApprovalData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ConditionalApprovalData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ConditionalApprovalData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ConditionalApprovalData`. May be used by Relay 1."""
  conditionalApprovalDataEdge(
    """The method to use when ordering `ConditionalApprovalData`."""
    orderBy: [ConditionalApprovalDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConditionalApprovalDataEdge
}

"""All input for the `createConditionalApproval` mutation."""
input CreateConditionalApprovalInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _applicationId: Int!
  _jsonData: JSON!
}

"""The output of our `createEmailNotifications` mutation."""
type CreateEmailNotificationsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  notifications: [Notification]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createEmailNotifications` mutation."""
input CreateEmailNotificationsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  emailRecords: [JSON]!
}

"""The output of our `createHiddenIntake` mutation."""
type CreateHiddenIntakePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  intake: Intake

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads a single `GaplessCounter` that is related to this `Intake`."""
  gaplessCounterByCounterId: GaplessCounter

  """An edge for our `Intake`. May be used by Relay 1."""
  intakeEdge(
    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]
  ): IntakesEdge
}

"""All input for the `createHiddenIntake` mutation."""
input CreateHiddenIntakeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  startTime: Datetime!
  endTime: Datetime!
  _ccbcIntakeNumber: Int
  intakeDescription: String
}

"""The output of our `createIntake` mutation."""
type CreateIntakePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  intake: Intake

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads a single `GaplessCounter` that is related to this `Intake`."""
  gaplessCounterByCounterId: GaplessCounter

  """An edge for our `Intake`. May be used by Relay 1."""
  intakeEdge(
    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]
  ): IntakesEdge
}

"""All input for the `createIntake` mutation."""
input CreateIntakeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  startTime: Datetime!
  endTime: Datetime!
  intakeDescription: String
  rollingIntake: Boolean
}

"""The output of our `createNewFormData` mutation."""
type CreateNewFormDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formData: FormData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `FormDataStatusType` that is related to this `FormData`.
  """
  formDataStatusTypeByFormDataStatusTypeId: FormDataStatusType

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads a single `Form` that is related to this `FormData`."""
  formByFormSchemaId: Form

  """An edge for our `FormData`. May be used by Relay 1."""
  formDataEdge(
    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormDataEdge
}

"""All input for the `createNewFormData` mutation."""
input CreateNewFormDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  applicationRowId: Int!
  jsonData: JSON!
  reasonForChange: String!
  formSchemaId: Int!
}

"""The output of our `createPackage` mutation."""
type CreatePackagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  applicationPackage: ApplicationPackage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationPackage`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPackage`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPackage`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPackage`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationPackage`. May be used by Relay 1."""
  applicationPackageEdge(
    """The method to use when ordering `ApplicationPackage`."""
    orderBy: [ApplicationPackagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationPackagesEdge
}

"""All input for the `createPackage` mutation."""
input CreatePackageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _applicationId: Int!
  _package: Int
}

"""The output of our `createPendingChangeRequest` mutation."""
type CreatePendingChangeRequestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  applicationPendingChangeRequest: ApplicationPendingChangeRequest

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationPendingChangeRequest`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPendingChangeRequest`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPendingChangeRequest`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationPendingChangeRequest`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """
  An edge for our `ApplicationPendingChangeRequest`. May be used by Relay 1.
  """
  applicationPendingChangeRequestEdge(
    """The method to use when ordering `ApplicationPendingChangeRequest`."""
    orderBy: [ApplicationPendingChangeRequestsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationPendingChangeRequestsEdge
}

"""All input for the `createPendingChangeRequest` mutation."""
input CreatePendingChangeRequestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _applicationId: Int!
  _isPending: Boolean!
  _comment: String
}

"""The output of our `createProjectInformation` mutation."""
type CreateProjectInformationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  projectInformationData: ProjectInformationData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ProjectInformationData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ProjectInformationData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ProjectInformationData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ProjectInformationData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ProjectInformationData`. May be used by Relay 1."""
  projectInformationDataEdge(
    """The method to use when ordering `ProjectInformationData`."""
    orderBy: [ProjectInformationDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectInformationDataEdge
}

"""All input for the `createProjectInformation` mutation."""
input CreateProjectInformationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _applicationId: Int!
  _jsonData: JSON!
}

"""The output of our `createProjectType` mutation."""
type CreateProjectTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  applicationProjectType: ApplicationProjectType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationProjectType`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationProjectType`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationProjectType`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationProjectType`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationProjectType`. May be used by Relay 1."""
  applicationProjectTypeEdge(
    """The method to use when ordering `ApplicationProjectType`."""
    orderBy: [ApplicationProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationProjectTypesEdge
}

"""All input for the `createProjectType` mutation."""
input CreateProjectTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _applicationId: Int!
  _projectType: String
}

"""The output of our `createRfi` mutation."""
type CreateRfiPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  rfiData: RfiData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `RfiDataStatusType` that is related to this `RfiData`."""
  rfiDataStatusTypeByRfiDataStatusTypeId: RfiDataStatusType

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `RfiData`. May be used by Relay 1."""
  rfiDataEdge(
    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): RfiDataEdge
}

"""All input for the `createRfi` mutation."""
input CreateRfiInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  applicationRowId: Int!
  jsonData: JSON!
}

"""The output of our `createUserFromSession` mutation."""
type CreateUserFromSessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  ccbcUser: CcbcUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `CcbcUser`. May be used by Relay 1."""
  ccbcUserEdge(
    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CcbcUsersEdge
}

"""All input for the `createUserFromSession` mutation."""
input CreateUserFromSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `deleteAnnouncement` mutation."""
type DeleteAnnouncementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  announcement: Announcement

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `Announcement`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Announcement`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Announcement`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Announcement`. May be used by Relay 1."""
  announcementEdge(
    """The method to use when ordering `Announcement`."""
    orderBy: [AnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AnnouncementsEdge
}

"""All input for the `deleteAnnouncement` mutation."""
input DeleteAnnouncementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  announcementRowId: Int!
  applicationRowId: Int!
  formData: JSON!
}

"""The output of our `deleteCommunityProgressReport` mutation."""
type DeleteCommunityProgressReportPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  applicationCommunityProgressReportData: ApplicationCommunityProgressReportData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationCommunityProgressReportData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationCommunityProgressReportData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationCommunityProgressReportData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationCommunityProgressReportData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """
  An edge for our `ApplicationCommunityProgressReportData`. May be used by Relay 1.
  """
  applicationCommunityProgressReportDataEdge(
    """
    The method to use when ordering `ApplicationCommunityProgressReportData`.
    """
    orderBy: [ApplicationCommunityProgressReportDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationCommunityProgressReportDataEdge
}

"""All input for the `deleteCommunityProgressReport` mutation."""
input DeleteCommunityProgressReportInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  cprRowId: Int!
  applicationRowId: Int!
  formData: JSON!
}

"""The output of our `importApplicationAnalystLead` mutation."""
type ImportApplicationAnalystLeadPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  resultIds: [Int]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `importApplicationAnalystLead` mutation."""
input ImportApplicationAnalystLeadInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""
The output of our `importApplicationCommunityProgressReportRecords` mutation.
"""
type ImportApplicationCommunityProgressReportRecordsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  resultIds: [Int]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `importApplicationCommunityProgressReportRecords` mutation.
"""
input ImportApplicationCommunityProgressReportRecordsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `importApplicationGisData` mutation."""
type ImportApplicationGisDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  resultIds: [Int]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `importApplicationGisData` mutation."""
input ImportApplicationGisDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `importApplicationPackages` mutation."""
type ImportApplicationPackagesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  resultIds: [Int]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `importApplicationPackages` mutation."""
input ImportApplicationPackagesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `importApplicationStatuses` mutation."""
type ImportApplicationStatusesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  resultIds: [Int]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `importApplicationStatuses` mutation."""
input ImportApplicationStatusesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `importApplications` mutation."""
type ImportApplicationsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  resultIds: [Int]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `importApplications` mutation."""
input ImportApplicationsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `importAssessmentData` mutation."""
type ImportAssessmentDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  resultIds: [Int]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `importAssessmentData` mutation."""
input ImportAssessmentDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `importAttachments` mutation."""
type ImportAttachmentsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  resultIds: [Int]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `importAttachments` mutation."""
input ImportAttachmentsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `importFormData` mutation."""
type ImportFormDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  resultIds: [Int]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `importFormData` mutation."""
input ImportFormDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `importRfiData` mutation."""
type ImportRfiDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  resultIds: [Int]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `importRfiData` mutation."""
input ImportRfiDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `incrementCounter` mutation."""
type IncrementCounterPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  integer: Int

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `incrementCounter` mutation."""
input IncrementCounterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  counterId: Int!
}

"""The output of our `parseGisData` mutation."""
type ParseGisDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  string: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `parseGisData` mutation."""
input ParseGisDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  batchid: Int!
}

"""The output of our `receiveApplications` mutation."""
type ReceiveApplicationsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  resultIds: [Int]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `receiveApplications` mutation."""
input ReceiveApplicationsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `receiveHiddenApplications` mutation."""
type ReceiveHiddenApplicationsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  resultIds: [Int]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `receiveHiddenApplications` mutation."""
input ReceiveHiddenApplicationsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `saveGisAssessmentHh` mutation."""
type SaveGisAssessmentHhPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  applicationGisAssessmentHh: ApplicationGisAssessmentHh

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationGisAssessmentHh`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisAssessmentHh`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisAssessmentHh`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationGisAssessmentHh`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationGisAssessmentHh`. May be used by Relay 1."""
  applicationGisAssessmentHhEdge(
    """The method to use when ordering `ApplicationGisAssessmentHh`."""
    orderBy: [ApplicationGisAssessmentHhsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationGisAssessmentHhsEdge
}

"""All input for the `saveGisAssessmentHh` mutation."""
input SaveGisAssessmentHhInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _applicationId: Int!
  _eligible: Float
  _eligibleIndigenous: Float
}

"""The output of our `saveGisData` mutation."""
type SaveGisDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  gisData: GisData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `GisData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `GisData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `GisData`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `GisData`. May be used by Relay 1."""
  gisDataEdge(
    """The method to use when ordering `GisData`."""
    orderBy: [GisDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): GisDataEdge
}

"""All input for the `saveGisData` mutation."""
input SaveGisDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  jsonData: JSON!
}

"""The output of our `setApplicationStatusArchived` mutation."""
type SetApplicationStatusArchivedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  resultIds: [Int]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `setApplicationStatusArchived` mutation."""
input SetApplicationStatusArchivedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `submitApplication` mutation."""
type SubmitApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  application: Application

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Intake` that is related to this `Application`."""
  intakeByIntakeId: Intake

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge
}

"""All input for the `submitApplication` mutation."""
input SubmitApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  applicationRowId: Int!
  _formSchemaId: Int!
}

"""The output of our `submitConditionallyApproved` mutation."""
type SubmitConditionallyApprovedPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  conditionalApprovalData: ConditionalApprovalData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ConditionalApprovalData`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `CcbcUser` that is related to this `ConditionalApprovalData`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ConditionalApprovalData`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ConditionalApprovalData`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ConditionalApprovalData`. May be used by Relay 1."""
  conditionalApprovalDataEdge(
    """The method to use when ordering `ConditionalApprovalData`."""
    orderBy: [ConditionalApprovalDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConditionalApprovalDataEdge
}

"""All input for the `submitConditionallyApproved` mutation."""
input SubmitConditionallyApprovedInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _applicationId: Int!
  _jsonData: JSON!
  newApplicationStatus: String!
}

"""The output of our `updateAnnouncement` mutation."""
type UpdateAnnouncementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  announcement: Announcement

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `Announcement`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Announcement`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Announcement`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Announcement`. May be used by Relay 1."""
  announcementEdge(
    """The method to use when ordering `Announcement`."""
    orderBy: [AnnouncementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AnnouncementsEdge
}

"""All input for the `updateAnnouncement` mutation."""
input UpdateAnnouncementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectNumbers: String!
  jsonData: JSON!
  oldRowId: Int!
}

"""The output of our `updateApplicationForm` mutation."""
type UpdateApplicationFormPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formData: FormData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `FormDataStatusType` that is related to this `FormData`.
  """
  formDataStatusTypeByFormDataStatusTypeId: FormDataStatusType

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads a single `Form` that is related to this `FormData`."""
  formByFormSchemaId: Form

  """An edge for our `FormData`. May be used by Relay 1."""
  formDataEdge(
    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormDataEdge
}

"""All input for the `updateApplicationForm` mutation."""
input UpdateApplicationFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  formDataRowId: Int!
  jsonData: JSON!
  lastEditedPage: String!
  clientUpdatedAt: Datetime!
}

"""The output of our `updateIntake` mutation."""
type UpdateIntakePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  intake: Intake

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads a single `GaplessCounter` that is related to this `Intake`."""
  gaplessCounterByCounterId: GaplessCounter

  """An edge for our `Intake`. May be used by Relay 1."""
  intakeEdge(
    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]
  ): IntakesEdge
}

"""All input for the `updateIntake` mutation."""
input UpdateIntakeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  intakeNumber: Int!
  startTime: Datetime!
  endTime: Datetime!
  intakeDescription: String
  isRollingIntake: Boolean
}

"""The output of our `updateRfi` mutation."""
type UpdateRfiPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  rfiData: RfiData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `RfiDataStatusType` that is related to this `RfiData`."""
  rfiDataStatusTypeByRfiDataStatusTypeId: RfiDataStatusType

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `RfiData`. May be used by Relay 1."""
  rfiDataEdge(
    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): RfiDataEdge
}

"""All input for the `updateRfi` mutation."""
input UpdateRfiInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rfiRowId: Int!
  jsonData: JSON!
}

"""The output of our `withdrawApplication` mutation."""
type WithdrawApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  application: Application

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Intake` that is related to this `Application`."""
  intakeByIntakeId: Intake

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge
}

"""All input for the `withdrawApplication` mutation."""
input WithdrawApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  applicationRowId: Int!
}
