"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """Reads and enables pagination through a set of `Analyst`."""
  allAnalysts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition
  ): AnalystsConnection

  """Reads and enables pagination through a set of `Application`."""
  allApplications(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  allApplicationAnalystLeads(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition
  ): ApplicationAnalystLeadsConnection

  """Reads and enables pagination through a set of `ApplicationFormData`."""
  allApplicationFormData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationFormData`."""
    orderBy: [ApplicationFormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationFormDataCondition
  ): ApplicationFormDataConnection

  """Reads and enables pagination through a set of `ApplicationRfiData`."""
  allApplicationRfiData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationRfiData`."""
    orderBy: [ApplicationRfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRfiDataCondition
  ): ApplicationRfiDataConnection

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  allApplicationStatuses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition
  ): ApplicationStatusesConnection

  """Reads and enables pagination through a set of `ApplicationStatusType`."""
  allApplicationStatusTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatusType`."""
    orderBy: [ApplicationStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusTypeCondition
  ): ApplicationStatusTypesConnection

  """Reads and enables pagination through a set of `Attachment`."""
  allAttachments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection

  """Reads and enables pagination through a set of `CcbcUser`."""
  allCcbcUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUsersConnection

  """Reads and enables pagination through a set of `Form`."""
  allForms(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition
  ): FormsConnection

  """Reads and enables pagination through a set of `FormData`."""
  allFormData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): FormDataConnection

  """Reads and enables pagination through a set of `FormDataStatusType`."""
  allFormDataStatusTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormDataStatusType`."""
    orderBy: [FormDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataStatusTypeCondition
  ): FormDataStatusTypesConnection

  """Reads and enables pagination through a set of `FormType`."""
  allFormTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormType`."""
    orderBy: [FormTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormTypeCondition
  ): FormTypesConnection

  """Reads and enables pagination through a set of `Intake`."""
  allIntakes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition
  ): IntakesConnection

  """Reads and enables pagination through a set of `RfiData`."""
  allRfiData(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition
  ): RfiDataConnection

  """Reads and enables pagination through a set of `RfiDataStatusType`."""
  allRfiDataStatusTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiDataStatusType`."""
    orderBy: [RfiDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataStatusTypeCondition
  ): RfiDataStatusTypesConnection
  analystByRowId(rowId: Int!): Analyst
  applicationByRowId(rowId: Int!): Application
  applicationAnalystLeadByRowId(rowId: Int!): ApplicationAnalystLead
  applicationFormDataByFormDataIdAndApplicationId(formDataId: Int!, applicationId: Int!): ApplicationFormData
  applicationRfiDataByRfiDataIdAndApplicationId(rfiDataId: Int!, applicationId: Int!): ApplicationRfiData
  applicationStatusByRowId(rowId: Int!): ApplicationStatus
  applicationStatusTypeByName(name: String!): ApplicationStatusType
  attachmentByRowId(rowId: Int!): Attachment
  ccbcUserByRowId(rowId: Int!): CcbcUser
  formByRowId(rowId: Int!): Form
  formBySlug(slug: String!): Form
  formDataByRowId(rowId: Int!): FormData
  formDataStatusTypeByName(name: String!): FormDataStatusType
  formTypeByName(name: String!): FormType
  intakeByRowId(rowId: Int!): Intake
  intakeByCcbcIntakeNumber(ccbcIntakeNumber: Int!): Intake
  intakeByApplicationNumberSeqName(applicationNumberSeqName: String!): Intake
  rfiDataByRowId(rowId: Int!): RfiData
  rfiDataStatusTypeByName(name: String!): RfiDataStatusType

  """Returns the next intake if any"""
  nextIntake: Intake

  """Returns the current open intake"""
  openIntake: Intake
  session: KeycloakJwt

  """Reads a single `Analyst` using its globally unique `ID`."""
  analyst(
    """The globally unique `ID` to be used in selecting a single `Analyst`."""
    id: ID!
  ): Analyst

  """Reads a single `Application` using its globally unique `ID`."""
  application(
    """
    The globally unique `ID` to be used in selecting a single `Application`.
    """
    id: ID!
  ): Application

  """
  Reads a single `ApplicationAnalystLead` using its globally unique `ID`.
  """
  applicationAnalystLead(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationAnalystLead`.
    """
    id: ID!
  ): ApplicationAnalystLead

  """Reads a single `ApplicationFormData` using its globally unique `ID`."""
  applicationFormData(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationFormData`.
    """
    id: ID!
  ): ApplicationFormData

  """Reads a single `ApplicationRfiData` using its globally unique `ID`."""
  applicationRfiData(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationRfiData`.
    """
    id: ID!
  ): ApplicationRfiData

  """Reads a single `ApplicationStatus` using its globally unique `ID`."""
  applicationStatus(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationStatus`.
    """
    id: ID!
  ): ApplicationStatus

  """Reads a single `ApplicationStatusType` using its globally unique `ID`."""
  applicationStatusType(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationStatusType`.
    """
    id: ID!
  ): ApplicationStatusType

  """Reads a single `Attachment` using its globally unique `ID`."""
  attachment(
    """
    The globally unique `ID` to be used in selecting a single `Attachment`.
    """
    id: ID!
  ): Attachment

  """Reads a single `CcbcUser` using its globally unique `ID`."""
  ccbcUser(
    """The globally unique `ID` to be used in selecting a single `CcbcUser`."""
    id: ID!
  ): CcbcUser

  """Reads a single `Form` using its globally unique `ID`."""
  form(
    """The globally unique `ID` to be used in selecting a single `Form`."""
    id: ID!
  ): Form

  """Reads a single `FormData` using its globally unique `ID`."""
  formData(
    """The globally unique `ID` to be used in selecting a single `FormData`."""
    id: ID!
  ): FormData

  """Reads a single `FormDataStatusType` using its globally unique `ID`."""
  formDataStatusType(
    """
    The globally unique `ID` to be used in selecting a single `FormDataStatusType`.
    """
    id: ID!
  ): FormDataStatusType

  """Reads a single `FormType` using its globally unique `ID`."""
  formType(
    """The globally unique `ID` to be used in selecting a single `FormType`."""
    id: ID!
  ): FormType

  """Reads a single `Intake` using its globally unique `ID`."""
  intake(
    """The globally unique `ID` to be used in selecting a single `Intake`."""
    id: ID!
  ): Intake

  """Reads a single `RfiData` using its globally unique `ID`."""
  rfiData(
    """The globally unique `ID` to be used in selecting a single `RfiData`."""
    id: ID!
  ): RfiData

  """Reads a single `RfiDataStatusType` using its globally unique `ID`."""
  rfiDataStatusType(
    """
    The globally unique `ID` to be used in selecting a single `RfiDataStatusType`.
    """
    id: ID!
  ): RfiDataStatusType
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""A connection to a list of `Analyst` values."""
type AnalystsConnection {
  """A list of `Analyst` objects."""
  nodes: [Analyst]!

  """
  A list of edges which contains the `Analyst` and cursor to aid in pagination.
  """
  edges: [AnalystsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Analyst` you could get from the connection."""
  totalCount: Int!
}

"""Table containing list of analysts"""
type Analyst implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the analyst"""
  rowId: Int!

  """Analyst's first name"""
  givenName: String

  """Analyst's last name"""
  familyName: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
  active: Boolean

  """Reads a single `CcbcUser` that is related to this `Analyst`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Analyst`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Analyst`."""
  ccbcUserByArchivedBy: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByAnalystId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition
  ): ApplicationAnalystLeadsConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationAnalystLeadAnalystIdAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): AnalystApplicationsByApplicationAnalystLeadAnalystIdAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnalystLeadAnalystIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): AnalystCcbcUsersByApplicationAnalystLeadAnalystIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnalystLeadAnalystIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): AnalystCcbcUsersByApplicationAnalystLeadAnalystIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnalystLeadAnalystIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): AnalystCcbcUsersByApplicationAnalystLeadAnalystIdAndArchivedByManyToManyConnection!
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
Table containing information about the application's users, this is business contact information not personally identifiable information
"""
type CcbcUser implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the user"""
  rowId: Int!

  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  sessionSub: String

  """User's first name"""
  givenName: String

  """User's last name"""
  familyName: String

  """User's email address"""
  emailAddress: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUsersConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUsersConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUsersConnection!

  """Reads and enables pagination through a set of `Intake`."""
  intakesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition
  ): IntakesConnection!

  """Reads and enables pagination through a set of `Intake`."""
  intakesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition
  ): IntakesConnection!

  """Reads and enables pagination through a set of `Intake`."""
  intakesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition
  ): IntakesConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection!

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition
  ): ApplicationStatusesConnection!

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!

  """Reads and enables pagination through a set of `FormData`."""
  formDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): FormDataConnection!

  """Reads and enables pagination through a set of `FormData`."""
  formDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): FormDataConnection!

  """Reads and enables pagination through a set of `FormData`."""
  formDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): FormDataConnection!

  """Reads and enables pagination through a set of `Analyst`."""
  analystsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition
  ): AnalystsConnection!

  """Reads and enables pagination through a set of `Analyst`."""
  analystsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition
  ): AnalystsConnection!

  """Reads and enables pagination through a set of `Analyst`."""
  analystsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition
  ): AnalystsConnection!

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition
  ): ApplicationAnalystLeadsConnection!

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition
  ): ApplicationAnalystLeadsConnection!

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition
  ): ApplicationAnalystLeadsConnection!

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition
  ): RfiDataConnection!

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition
  ): RfiDataConnection!

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition
  ): RfiDataConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCcbcUserCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByCcbcUserCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCcbcUserCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByCcbcUserCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCcbcUserUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByCcbcUserUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCcbcUserUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByCcbcUserUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCcbcUserArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByCcbcUserArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCcbcUserArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByCcbcUserArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByIntakeCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByIntakeCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByIntakeCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByIntakeCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByIntakeUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByIntakeUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByIntakeUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByIntakeUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByIntakeArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByIntakeArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByIntakeArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByIntakeArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Intake`."""
  intakesByApplicationCreatedByAndIntakeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition
  ): CcbcUserIntakesByApplicationCreatedByAndIntakeIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByApplicationCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByApplicationCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Intake`."""
  intakesByApplicationUpdatedByAndIntakeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition
  ): CcbcUserIntakesByApplicationUpdatedByAndIntakeIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByApplicationUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByApplicationUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Intake`."""
  intakesByApplicationArchivedByAndIntakeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition
  ): CcbcUserIntakesByApplicationArchivedByAndIntakeIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByApplicationArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByApplicationArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationStatusCreatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): CcbcUserApplicationsByApplicationStatusCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `ApplicationStatusType`."""
  applicationStatusTypesByApplicationStatusCreatedByAndStatus(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatusType`."""
    orderBy: [ApplicationStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusTypeCondition
  ): CcbcUserApplicationStatusTypesByApplicationStatusCreatedByAndStatusManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByAttachmentCreatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): CcbcUserApplicationsByAttachmentCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByAttachmentCreatedByAndApplicationStatusId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition
  ): CcbcUserApplicationStatusesByAttachmentCreatedByAndApplicationStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAttachmentCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByAttachmentCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAttachmentCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByAttachmentCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByAttachmentUpdatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): CcbcUserApplicationsByAttachmentUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByAttachmentUpdatedByAndApplicationStatusId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition
  ): CcbcUserApplicationStatusesByAttachmentUpdatedByAndApplicationStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAttachmentUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByAttachmentUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAttachmentUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByAttachmentUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByAttachmentArchivedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): CcbcUserApplicationsByAttachmentArchivedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByAttachmentArchivedByAndApplicationStatusId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition
  ): CcbcUserApplicationStatusesByAttachmentArchivedByAndApplicationStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAttachmentArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByAttachmentArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAttachmentArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByAttachmentArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `FormDataStatusType`."""
  formDataStatusTypesByFormDataCreatedByAndFormDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormDataStatusType`."""
    orderBy: [FormDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataStatusTypeCondition
  ): CcbcUserFormDataStatusTypesByFormDataCreatedByAndFormDataStatusTypeIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByFormDataCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByFormDataCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByFormDataCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByFormDataCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Form`."""
  formsByFormDataCreatedByAndFormSchemaId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition
  ): CcbcUserFormsByFormDataCreatedByAndFormSchemaIdManyToManyConnection!

  """Reads and enables pagination through a set of `FormDataStatusType`."""
  formDataStatusTypesByFormDataUpdatedByAndFormDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormDataStatusType`."""
    orderBy: [FormDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataStatusTypeCondition
  ): CcbcUserFormDataStatusTypesByFormDataUpdatedByAndFormDataStatusTypeIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByFormDataUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByFormDataUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByFormDataUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByFormDataUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Form`."""
  formsByFormDataUpdatedByAndFormSchemaId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition
  ): CcbcUserFormsByFormDataUpdatedByAndFormSchemaIdManyToManyConnection!

  """Reads and enables pagination through a set of `FormDataStatusType`."""
  formDataStatusTypesByFormDataArchivedByAndFormDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormDataStatusType`."""
    orderBy: [FormDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataStatusTypeCondition
  ): CcbcUserFormDataStatusTypesByFormDataArchivedByAndFormDataStatusTypeIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByFormDataArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByFormDataArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByFormDataArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByFormDataArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Form`."""
  formsByFormDataArchivedByAndFormSchemaId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition
  ): CcbcUserFormsByFormDataArchivedByAndFormSchemaIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAnalystCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByAnalystCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAnalystCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByAnalystCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAnalystUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByAnalystUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAnalystUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByAnalystUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAnalystArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByAnalystArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAnalystArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByAnalystArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationAnalystLeadCreatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): CcbcUserApplicationsByApplicationAnalystLeadCreatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `Analyst`."""
  analystsByApplicationAnalystLeadCreatedByAndAnalystId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition
  ): CcbcUserAnalystsByApplicationAnalystLeadCreatedByAndAnalystIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnalystLeadCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByApplicationAnalystLeadCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnalystLeadCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByApplicationAnalystLeadCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationAnalystLeadUpdatedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): CcbcUserApplicationsByApplicationAnalystLeadUpdatedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `Analyst`."""
  analystsByApplicationAnalystLeadUpdatedByAndAnalystId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition
  ): CcbcUserAnalystsByApplicationAnalystLeadUpdatedByAndAnalystIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnalystLeadUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByApplicationAnalystLeadUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnalystLeadUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByApplicationAnalystLeadUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationAnalystLeadArchivedByAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): CcbcUserApplicationsByApplicationAnalystLeadArchivedByAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `Analyst`."""
  analystsByApplicationAnalystLeadArchivedByAndAnalystId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition
  ): CcbcUserAnalystsByApplicationAnalystLeadArchivedByAndAnalystIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnalystLeadArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByApplicationAnalystLeadArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnalystLeadArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByApplicationAnalystLeadArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `RfiDataStatusType`."""
  rfiDataStatusTypesByRfiDataCreatedByAndRfiDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiDataStatusType`."""
    orderBy: [RfiDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataStatusTypeCondition
  ): CcbcUserRfiDataStatusTypesByRfiDataCreatedByAndRfiDataStatusTypeIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByRfiDataCreatedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByRfiDataCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByRfiDataCreatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByRfiDataCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `RfiDataStatusType`."""
  rfiDataStatusTypesByRfiDataUpdatedByAndRfiDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiDataStatusType`."""
    orderBy: [RfiDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataStatusTypeCondition
  ): CcbcUserRfiDataStatusTypesByRfiDataUpdatedByAndRfiDataStatusTypeIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByRfiDataUpdatedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByRfiDataUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByRfiDataUpdatedByAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByRfiDataUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `RfiDataStatusType`."""
  rfiDataStatusTypesByRfiDataArchivedByAndRfiDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiDataStatusType`."""
    orderBy: [RfiDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataStatusTypeCondition
  ): CcbcUserRfiDataStatusTypesByRfiDataArchivedByAndRfiDataStatusTypeIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByRfiDataArchivedByAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByRfiDataArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByRfiDataArchivedByAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUserCcbcUsersByRfiDataArchivedByAndUpdatedByManyToManyConnection!
}

"""A connection to a list of `CcbcUser` values."""
type CcbcUsersConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser` and cursor to aid in pagination.
  """
  edges: [CcbcUsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection."""
type CcbcUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `CcbcUser`."""
enum CcbcUsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SESSION_SUB_ASC
  SESSION_SUB_DESC
  GIVEN_NAME_ASC
  GIVEN_NAME_DESC
  FAMILY_NAME_ASC
  FAMILY_NAME_DESC
  EMAIL_ADDRESS_ASC
  EMAIL_ADDRESS_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CcbcUser` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CcbcUserCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `sessionSub` field."""
  sessionSub: String

  """Checks for equality with the object’s `givenName` field."""
  givenName: String

  """Checks for equality with the object’s `familyName` field."""
  familyName: String

  """Checks for equality with the object’s `emailAddress` field."""
  emailAddress: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A connection to a list of `Intake` values."""
type IntakesConnection {
  """A list of `Intake` objects."""
  nodes: [Intake]!

  """
  A list of edges which contains the `Intake` and cursor to aid in pagination.
  """
  edges: [IntakesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Intake` you could get from the connection."""
  totalCount: Int!
}

"""
Table containing intake numbers and their respective open and closing dates
"""
type Intake implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for each intake number"""
  rowId: Int!

  """Open date and time for an intake number"""
  openTimestamp: Datetime!

  """Close date and time for an intake number"""
  closeTimestamp: Datetime!

  """Unique intake number for a set of CCBC IDs"""
  ccbcIntakeNumber: Int!

  """
  The name of the sequence used to generate CCBC ids. It is added via a trigger
  """
  applicationNumberSeqName: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads and enables pagination through a set of `Application`."""
  applicationsByIntakeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationIntakeIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): IntakeCcbcUsersByApplicationIntakeIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationIntakeIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): IntakeCcbcUsersByApplicationIntakeIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationIntakeIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): IntakeCcbcUsersByApplicationIntakeIdAndArchivedByManyToManyConnection!
}

"""A connection to a list of `Application` values."""
type ApplicationsConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application` and cursor to aid in pagination.
  """
  edges: [ApplicationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
Table containing the data associated with the CCBC respondents application
"""
type Application implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Primary key ID for the application"""
  rowId: Int!

  """Reference number assigned to the application"""
  ccbcNumber: String

  """The owner of the application, identified by its JWT sub"""
  owner: String!

  """The intake associated with the application, set when it is submitted"""
  intakeId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `Intake` that is related to this `Application`."""
  intakeByIntakeId: Intake

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition
  ): ApplicationStatusesConnection!

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!

  """Reads and enables pagination through a set of `ApplicationFormData`."""
  applicationFormDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationFormData`."""
    orderBy: [ApplicationFormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationFormDataCondition
  ): ApplicationFormDataConnection!

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition
  ): ApplicationAnalystLeadsConnection!

  """Reads and enables pagination through a set of `ApplicationRfiData`."""
  applicationRfiDataByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationRfiData`."""
    orderBy: [ApplicationRfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRfiDataCondition
  ): ApplicationRfiDataConnection!

  """Computed column to return analyst lead of an application"""
  analystLead: String

  """Computed column that takes the slug to return an assessment form"""
  assessmentForm(_slug: String!): FormData

  """Computed column to display form_data"""
  formData: FormData

  """Computed column to display organization name from json data"""
  organizationName: String

  """Computed column to display the project name"""
  projectName: String

  """Computed column to return last RFI for an application"""
  rfi: String

  """Computed column to return status of an application"""
  status: String

  """Reads and enables pagination through a set of `ApplicationStatusType`."""
  applicationStatusTypesByApplicationStatusApplicationIdAndStatus(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatusType`."""
    orderBy: [ApplicationStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusTypeCondition
  ): ApplicationApplicationStatusTypesByApplicationStatusApplicationIdAndStatusManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationStatusApplicationIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): ApplicationCcbcUsersByApplicationStatusApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByAttachmentApplicationIdAndApplicationStatusId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition
  ): ApplicationApplicationStatusesByAttachmentApplicationIdAndApplicationStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAttachmentApplicationIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): ApplicationCcbcUsersByAttachmentApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAttachmentApplicationIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): ApplicationCcbcUsersByAttachmentApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAttachmentApplicationIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): ApplicationCcbcUsersByAttachmentApplicationIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `FormData`."""
  formDataByApplicationFormDataApplicationIdAndFormDataId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): ApplicationFormDataByApplicationFormDataApplicationIdAndFormDataIdManyToManyConnection!

  """Reads and enables pagination through a set of `Analyst`."""
  analystsByApplicationAnalystLeadApplicationIdAndAnalystId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition
  ): ApplicationAnalystsByApplicationAnalystLeadApplicationIdAndAnalystIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnalystLeadApplicationIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): ApplicationCcbcUsersByApplicationAnalystLeadApplicationIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnalystLeadApplicationIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): ApplicationCcbcUsersByApplicationAnalystLeadApplicationIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationAnalystLeadApplicationIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): ApplicationCcbcUsersByApplicationAnalystLeadApplicationIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByApplicationRfiDataApplicationIdAndRfiDataId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition
  ): ApplicationRfiDataByApplicationRfiDataApplicationIdAndRfiDataIdManyToManyConnection!
}

"""A connection to a list of `ApplicationStatus` values."""
type ApplicationStatusesConnection {
  """A list of `ApplicationStatus` objects."""
  nodes: [ApplicationStatus]!

  """
  A list of edges which contains the `ApplicationStatus` and cursor to aid in pagination.
  """
  edges: [ApplicationStatusesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""Table containing information about possible application statuses"""
type ApplicationStatus implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the application_status"""
  rowId: Int!

  """ID of the application this status belongs to"""
  applicationId: Int
  status: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """
  Reads a single `Application` that is related to this `ApplicationStatus`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `ApplicationStatusType` that is related to this `ApplicationStatus`.
  """
  applicationStatusTypeByStatus: ApplicationStatusType

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByApplicationStatusId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByAttachmentApplicationStatusIdAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationStatusApplicationsByAttachmentApplicationStatusIdAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAttachmentApplicationStatusIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): ApplicationStatusCcbcUsersByAttachmentApplicationStatusIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAttachmentApplicationStatusIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): ApplicationStatusCcbcUsersByAttachmentApplicationStatusIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByAttachmentApplicationStatusIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): ApplicationStatusCcbcUsersByAttachmentApplicationStatusIdAndArchivedByManyToManyConnection!
}

"""
Table containing the different statuses that can be assigned to an application
"""
type ApplicationStatusType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Name of and primary key of the status of an application"""
  name: String!

  """Description of the status type"""
  description: String

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByStatus(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition
  ): ApplicationStatusesConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationStatusStatusAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationStatusTypeApplicationsByApplicationStatusStatusAndApplicationIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByApplicationStatusStatusAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): ApplicationStatusTypeCcbcUsersByApplicationStatusStatusAndCreatedByManyToManyConnection!
}

"""Methods to use when ordering `ApplicationStatus`."""
enum ApplicationStatusesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  STATUS_ASC
  STATUS_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ApplicationStatus` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ApplicationStatusCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime
}

"""
A connection to a list of `Application` values, with data from `ApplicationStatus`.
"""
type ApplicationStatusTypeApplicationsByApplicationStatusStatusAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationStatus`, and the cursor to aid in pagination.
  """
  edges: [ApplicationStatusTypeApplicationsByApplicationStatusStatusAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationStatus`.
"""
type ApplicationStatusTypeApplicationsByApplicationStatusStatusAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition
  ): ApplicationStatusesConnection!
}

"""Methods to use when ordering `Application`."""
enum ApplicationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CCBC_NUMBER_ASC
  CCBC_NUMBER_DESC
  OWNER_ASC
  OWNER_DESC
  INTAKE_ID_ASC
  INTAKE_ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Application` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ApplicationCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `ccbcNumber` field."""
  ccbcNumber: String

  """Checks for equality with the object’s `owner` field."""
  owner: String

  """Checks for equality with the object’s `intakeId` field."""
  intakeId: Int

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationStatus`.
"""
type ApplicationStatusTypeCcbcUsersByApplicationStatusStatusAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationStatus`, and the cursor to aid in pagination.
  """
  edges: [ApplicationStatusTypeCcbcUsersByApplicationStatusStatusAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationStatus`.
"""
type ApplicationStatusTypeCcbcUsersByApplicationStatusStatusAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition
  ): ApplicationStatusesConnection!
}

"""A connection to a list of `Attachment` values."""
type AttachmentsConnection {
  """A list of `Attachment` objects."""
  nodes: [Attachment]!

  """
  A list of edges which contains the `Attachment` and cursor to aid in pagination.
  """
  edges: [AttachmentsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Attachment` you could get from the connection."""
  totalCount: Int!
}

"""Table containing information about uploaded attachments"""
type Attachment implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the attachment"""
  rowId: Int!

  """
  Universally Unique ID for the attachment, created by the fastapi storage micro-service
  """
  file: UUID

  """Description of the attachment"""
  description: String

  """Original uploaded file name"""
  fileName: String

  """Original uploaded file type"""
  fileType: String

  """Original uploaded file size"""
  fileSize: String

  """
  The id of the project (ccbc_public.application.id) that the attachment was uploaded to
  """
  applicationId: Int!

  """
  The id of the application_status (ccbc_public.application_status.id) that the attachment references
  """
  applicationStatusId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `Application` that is related to this `Attachment`."""
  applicationByApplicationId: Application

  """
  Reads a single `ApplicationStatus` that is related to this `Attachment`.
  """
  applicationStatusByApplicationStatusId: ApplicationStatus

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByArchivedBy: CcbcUser
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""A `Attachment` edge in the connection."""
type AttachmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Attachment` at the end of the edge."""
  node: Attachment
}

"""Methods to use when ordering `Attachment`."""
enum AttachmentsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FILE_ASC
  FILE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  FILE_NAME_ASC
  FILE_NAME_DESC
  FILE_TYPE_ASC
  FILE_TYPE_DESC
  FILE_SIZE_ASC
  FILE_SIZE_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  APPLICATION_STATUS_ID_ASC
  APPLICATION_STATUS_ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Attachment` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AttachmentCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `file` field."""
  file: UUID

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `fileName` field."""
  fileName: String

  """Checks for equality with the object’s `fileType` field."""
  fileType: String

  """Checks for equality with the object’s `fileSize` field."""
  fileSize: String

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `applicationStatusId` field."""
  applicationStatusId: Int

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""
A connection to a list of `Application` values, with data from `Attachment`.
"""
type ApplicationStatusApplicationsByAttachmentApplicationStatusIdAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [ApplicationStatusApplicationsByAttachmentApplicationStatusIdAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""A `Application` edge in the connection, with data from `Attachment`."""
type ApplicationStatusApplicationsByAttachmentApplicationStatusIdAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Attachment`.
"""
type ApplicationStatusCcbcUsersByAttachmentApplicationStatusIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [ApplicationStatusCcbcUsersByAttachmentApplicationStatusIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Attachment`."""
type ApplicationStatusCcbcUsersByAttachmentApplicationStatusIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Attachment`.
"""
type ApplicationStatusCcbcUsersByAttachmentApplicationStatusIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [ApplicationStatusCcbcUsersByAttachmentApplicationStatusIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Attachment`."""
type ApplicationStatusCcbcUsersByAttachmentApplicationStatusIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Attachment`.
"""
type ApplicationStatusCcbcUsersByAttachmentApplicationStatusIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [ApplicationStatusCcbcUsersByAttachmentApplicationStatusIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Attachment`."""
type ApplicationStatusCcbcUsersByAttachmentApplicationStatusIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!
}

"""A `ApplicationStatus` edge in the connection."""
type ApplicationStatusesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationStatus` at the end of the edge."""
  node: ApplicationStatus
}

"""A connection to a list of `ApplicationFormData` values."""
type ApplicationFormDataConnection {
  """A list of `ApplicationFormData` objects."""
  nodes: [ApplicationFormData]!

  """
  A list of edges which contains the `ApplicationFormData` and cursor to aid in pagination.
  """
  edges: [ApplicationFormDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationFormData` you could get from the connection.
  """
  totalCount: Int!
}

"""Table to pair an application to form data"""
type ApplicationFormData implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The foreign key of a form"""
  formDataId: Int!

  """The foreign key of an application"""
  applicationId: Int!

  """
  Reads a single `FormData` that is related to this `ApplicationFormData`.
  """
  formDataByFormDataId: FormData

  """
  Reads a single `Application` that is related to this `ApplicationFormData`.
  """
  applicationByApplicationId: Application
}

"""Table to hold applicant form data"""
type FormData implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The unique id of the form data"""
  rowId: Int!

  """The data entered into the form by the respondent"""
  jsonData: JSON!

  """Column saving the key of the last edited form page"""
  lastEditedPage: String

  """Column referencing the form data status type, defaults to draft"""
  formDataStatusTypeId: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Schema for the respective form_data"""
  formSchemaId: Int

  """
  Reads a single `FormDataStatusType` that is related to this `FormData`.
  """
  formDataStatusTypeByFormDataStatusTypeId: FormDataStatusType

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads a single `Form` that is related to this `FormData`."""
  formByFormSchemaId: Form

  """Reads and enables pagination through a set of `ApplicationFormData`."""
  applicationFormDataByFormDataId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationFormData`."""
    orderBy: [ApplicationFormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationFormDataCondition
  ): ApplicationFormDataConnection!

  """computed column to display whether form_data is editable or not"""
  isEditable: Boolean

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationFormDataFormDataIdAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): FormDataApplicationsByApplicationFormDataFormDataIdAndApplicationIdManyToManyConnection!
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The statuses applicable to a form"""
type FormDataStatusType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The name of the status type"""
  name: String!

  """The description of the status type"""
  description: String

  """Reads and enables pagination through a set of `FormData`."""
  formDataByFormDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): FormDataConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByFormDataFormDataStatusTypeIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): FormDataStatusTypeCcbcUsersByFormDataFormDataStatusTypeIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByFormDataFormDataStatusTypeIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): FormDataStatusTypeCcbcUsersByFormDataFormDataStatusTypeIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByFormDataFormDataStatusTypeIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): FormDataStatusTypeCcbcUsersByFormDataFormDataStatusTypeIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `Form`."""
  formsByFormDataFormDataStatusTypeIdAndFormSchemaId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition
  ): FormDataStatusTypeFormsByFormDataFormDataStatusTypeIdAndFormSchemaIdManyToManyConnection!
}

"""A connection to a list of `FormData` values."""
type FormDataConnection {
  """A list of `FormData` objects."""
  nodes: [FormData]!

  """
  A list of edges which contains the `FormData` and cursor to aid in pagination.
  """
  edges: [FormDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormData` you could get from the connection."""
  totalCount: Int!
}

"""A `FormData` edge in the connection."""
type FormDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormData` at the end of the edge."""
  node: FormData
}

"""Methods to use when ordering `FormData`."""
enum FormDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  LAST_EDITED_PAGE_ASC
  LAST_EDITED_PAGE_DESC
  FORM_DATA_STATUS_TYPE_ID_ASC
  FORM_DATA_STATUS_TYPE_ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  FORM_SCHEMA_ID_ASC
  FORM_SCHEMA_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `FormData` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FormDataCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `lastEditedPage` field."""
  lastEditedPage: String

  """Checks for equality with the object’s `formDataStatusTypeId` field."""
  formDataStatusTypeId: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `formSchemaId` field."""
  formSchemaId: Int
}

"""
A connection to a list of `CcbcUser` values, with data from `FormData`.
"""
type FormDataStatusTypeCcbcUsersByFormDataFormDataStatusTypeIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [FormDataStatusTypeCcbcUsersByFormDataFormDataStatusTypeIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `FormData`."""
type FormDataStatusTypeCcbcUsersByFormDataFormDataStatusTypeIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `FormData`."""
  formDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): FormDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `FormData`.
"""
type FormDataStatusTypeCcbcUsersByFormDataFormDataStatusTypeIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [FormDataStatusTypeCcbcUsersByFormDataFormDataStatusTypeIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `FormData`."""
type FormDataStatusTypeCcbcUsersByFormDataFormDataStatusTypeIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `FormData`."""
  formDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): FormDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `FormData`.
"""
type FormDataStatusTypeCcbcUsersByFormDataFormDataStatusTypeIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [FormDataStatusTypeCcbcUsersByFormDataFormDataStatusTypeIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `FormData`."""
type FormDataStatusTypeCcbcUsersByFormDataFormDataStatusTypeIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `FormData`."""
  formDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): FormDataConnection!
}

"""A connection to a list of `Form` values, with data from `FormData`."""
type FormDataStatusTypeFormsByFormDataFormDataStatusTypeIdAndFormSchemaIdManyToManyConnection {
  """A list of `Form` objects."""
  nodes: [Form]!

  """
  A list of edges which contains the `Form`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [FormDataStatusTypeFormsByFormDataFormDataStatusTypeIdAndFormSchemaIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Form` you could get from the connection."""
  totalCount: Int!
}

"""Table to hold the json_schema for forms"""
type Form implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Primary key on form"""
  rowId: Int!

  """The end url for the form data"""
  slug: String

  """The JSON schema for the respective form"""
  jsonSchema: JSON!

  """Description of the form"""
  description: String
  formType: String

  """Reads a single `FormType` that is related to this `Form`."""
  formTypeByFormType: FormType

  """Reads and enables pagination through a set of `FormData`."""
  formDataByFormSchemaId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): FormDataConnection!

  """Reads and enables pagination through a set of `FormDataStatusType`."""
  formDataStatusTypesByFormDataFormSchemaIdAndFormDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormDataStatusType`."""
    orderBy: [FormDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataStatusTypeCondition
  ): FormFormDataStatusTypesByFormDataFormSchemaIdAndFormDataStatusTypeIdManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByFormDataFormSchemaIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): FormCcbcUsersByFormDataFormSchemaIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByFormDataFormSchemaIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): FormCcbcUsersByFormDataFormSchemaIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByFormDataFormSchemaIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): FormCcbcUsersByFormDataFormSchemaIdAndArchivedByManyToManyConnection!
}

"""Table containing the different types of forms used in the application"""
type FormType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Primary key and unique identifier of the type of form"""
  name: String!

  """Description of the type of form"""
  description: String

  """Reads and enables pagination through a set of `Form`."""
  formsByFormType(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition
  ): FormsConnection!
}

"""A connection to a list of `Form` values."""
type FormsConnection {
  """A list of `Form` objects."""
  nodes: [Form]!

  """
  A list of edges which contains the `Form` and cursor to aid in pagination.
  """
  edges: [FormsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Form` you could get from the connection."""
  totalCount: Int!
}

"""A `Form` edge in the connection."""
type FormsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Form` at the end of the edge."""
  node: Form
}

"""Methods to use when ordering `Form`."""
enum FormsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SLUG_ASC
  SLUG_DESC
  JSON_SCHEMA_ASC
  JSON_SCHEMA_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  FORM_TYPE_ASC
  FORM_TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Form` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FormCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `slug` field."""
  slug: String

  """Checks for equality with the object’s `jsonSchema` field."""
  jsonSchema: JSON

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `formType` field."""
  formType: String
}

"""
A connection to a list of `FormDataStatusType` values, with data from `FormData`.
"""
type FormFormDataStatusTypesByFormDataFormSchemaIdAndFormDataStatusTypeIdManyToManyConnection {
  """A list of `FormDataStatusType` objects."""
  nodes: [FormDataStatusType]!

  """
  A list of edges which contains the `FormDataStatusType`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [FormFormDataStatusTypesByFormDataFormSchemaIdAndFormDataStatusTypeIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FormDataStatusType` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `FormDataStatusType` edge in the connection, with data from `FormData`.
"""
type FormFormDataStatusTypesByFormDataFormSchemaIdAndFormDataStatusTypeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormDataStatusType` at the end of the edge."""
  node: FormDataStatusType

  """Reads and enables pagination through a set of `FormData`."""
  formDataByFormDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): FormDataConnection!
}

"""Methods to use when ordering `FormDataStatusType`."""
enum FormDataStatusTypesOrderBy {
  NATURAL
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `FormDataStatusType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FormDataStatusTypeCondition {
  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""
A connection to a list of `CcbcUser` values, with data from `FormData`.
"""
type FormCcbcUsersByFormDataFormSchemaIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [FormCcbcUsersByFormDataFormSchemaIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `FormData`."""
type FormCcbcUsersByFormDataFormSchemaIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `FormData`."""
  formDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): FormDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `FormData`.
"""
type FormCcbcUsersByFormDataFormSchemaIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [FormCcbcUsersByFormDataFormSchemaIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `FormData`."""
type FormCcbcUsersByFormDataFormSchemaIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `FormData`."""
  formDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): FormDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `FormData`.
"""
type FormCcbcUsersByFormDataFormSchemaIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [FormCcbcUsersByFormDataFormSchemaIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `FormData`."""
type FormCcbcUsersByFormDataFormSchemaIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `FormData`."""
  formDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): FormDataConnection!
}

"""A `Form` edge in the connection, with data from `FormData`."""
type FormDataStatusTypeFormsByFormDataFormDataStatusTypeIdAndFormSchemaIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Form` at the end of the edge."""
  node: Form

  """Reads and enables pagination through a set of `FormData`."""
  formDataByFormSchemaId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): FormDataConnection!
}

"""Methods to use when ordering `ApplicationFormData`."""
enum ApplicationFormDataOrderBy {
  NATURAL
  FORM_DATA_ID_ASC
  FORM_DATA_ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ApplicationFormData` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ApplicationFormDataCondition {
  """Checks for equality with the object’s `formDataId` field."""
  formDataId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int
}

"""
A connection to a list of `Application` values, with data from `ApplicationFormData`.
"""
type FormDataApplicationsByApplicationFormDataFormDataIdAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationFormData`, and the cursor to aid in pagination.
  """
  edges: [FormDataApplicationsByApplicationFormDataFormDataIdAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationFormData`.
"""
type FormDataApplicationsByApplicationFormDataFormDataIdAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application
}

"""A `ApplicationFormData` edge in the connection."""
type ApplicationFormDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationFormData` at the end of the edge."""
  node: ApplicationFormData
}

"""A connection to a list of `ApplicationAnalystLead` values."""
type ApplicationAnalystLeadsConnection {
  """A list of `ApplicationAnalystLead` objects."""
  nodes: [ApplicationAnalystLead]!

  """
  A list of edges which contains the `ApplicationAnalystLead` and cursor to aid in pagination.
  """
  edges: [ApplicationAnalystLeadsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationAnalystLead` you could get from the connection.
  """
  totalCount: Int!
}

"""Table containing the analyst lead for the given application"""
type ApplicationAnalystLead implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the application_analyst_lead"""
  rowId: Int!

  """ID of the application this analyst lead belongs to"""
  applicationId: Int

  """ID of the analyst this analyst lead belongs to"""
  analystId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """
  Reads a single `Application` that is related to this `ApplicationAnalystLead`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `Analyst` that is related to this `ApplicationAnalystLead`.
  """
  analystByAnalystId: Analyst

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnalystLead`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnalystLead`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnalystLead`.
  """
  ccbcUserByArchivedBy: CcbcUser
}

"""A `ApplicationAnalystLead` edge in the connection."""
type ApplicationAnalystLeadsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationAnalystLead` at the end of the edge."""
  node: ApplicationAnalystLead
}

"""Methods to use when ordering `ApplicationAnalystLead`."""
enum ApplicationAnalystLeadsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  ANALYST_ID_ASC
  ANALYST_ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ApplicationAnalystLead` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ApplicationAnalystLeadCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `analystId` field."""
  analystId: Int

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A connection to a list of `ApplicationRfiData` values."""
type ApplicationRfiDataConnection {
  """A list of `ApplicationRfiData` objects."""
  nodes: [ApplicationRfiData]!

  """
  A list of edges which contains the `ApplicationRfiData` and cursor to aid in pagination.
  """
  edges: [ApplicationRfiDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationRfiData` you could get from the connection.
  """
  totalCount: Int!
}

"""Table to pair an application to RFI data"""
type ApplicationRfiData implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The foreign key of a form"""
  rfiDataId: Int!

  """The foreign key of an application"""
  applicationId: Int!

  """Reads a single `RfiData` that is related to this `ApplicationRfiData`."""
  rfiDataByRfiDataId: RfiData

  """
  Reads a single `Application` that is related to this `ApplicationRfiData`.
  """
  applicationByApplicationId: Application
}

"""Table to hold RFI form data"""
type RfiData implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The unique id of the form data"""
  rowId: Int!

  """Reference number assigned to the RFI"""
  rfiNumber: String

  """The data entered into the form by the respondent"""
  jsonData: JSON!

  """Column referencing the form data status type, defaults to draft"""
  rfiDataStatusTypeId: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime!

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Reads a single `RfiDataStatusType` that is related to this `RfiData`."""
  rfiDataStatusTypeByRfiDataStatusTypeId: RfiDataStatusType

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads and enables pagination through a set of `ApplicationRfiData`."""
  applicationRfiDataByRfiDataId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationRfiData`."""
    orderBy: [ApplicationRfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationRfiDataCondition
  ): ApplicationRfiDataConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByApplicationRfiDataRfiDataIdAndApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): RfiDataApplicationsByApplicationRfiDataRfiDataIdAndApplicationIdManyToManyConnection!
}

"""The statuses applicable to an RFI"""
type RfiDataStatusType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The name of the status type"""
  name: String!

  """The description of the status type"""
  description: String

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByRfiDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition
  ): RfiDataConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByRfiDataRfiDataStatusTypeIdAndCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): RfiDataStatusTypeCcbcUsersByRfiDataRfiDataStatusTypeIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByRfiDataRfiDataStatusTypeIdAndUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): RfiDataStatusTypeCcbcUsersByRfiDataRfiDataStatusTypeIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByRfiDataRfiDataStatusTypeIdAndArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): RfiDataStatusTypeCcbcUsersByRfiDataRfiDataStatusTypeIdAndArchivedByManyToManyConnection!
}

"""A connection to a list of `RfiData` values."""
type RfiDataConnection {
  """A list of `RfiData` objects."""
  nodes: [RfiData]!

  """
  A list of edges which contains the `RfiData` and cursor to aid in pagination.
  """
  edges: [RfiDataEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RfiData` you could get from the connection."""
  totalCount: Int!
}

"""A `RfiData` edge in the connection."""
type RfiDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RfiData` at the end of the edge."""
  node: RfiData
}

"""Methods to use when ordering `RfiData`."""
enum RfiDataOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  RFI_NUMBER_ASC
  RFI_NUMBER_DESC
  JSON_DATA_ASC
  JSON_DATA_DESC
  RFI_DATA_STATUS_TYPE_ID_ASC
  RFI_DATA_STATUS_TYPE_ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `RfiData` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RfiDataCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `rfiNumber` field."""
  rfiNumber: String

  """Checks for equality with the object’s `jsonData` field."""
  jsonData: JSON

  """Checks for equality with the object’s `rfiDataStatusTypeId` field."""
  rfiDataStatusTypeId: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""A connection to a list of `CcbcUser` values, with data from `RfiData`."""
type RfiDataStatusTypeCcbcUsersByRfiDataRfiDataStatusTypeIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `RfiData`, and the cursor to aid in pagination.
  """
  edges: [RfiDataStatusTypeCcbcUsersByRfiDataRfiDataStatusTypeIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `RfiData`."""
type RfiDataStatusTypeCcbcUsersByRfiDataRfiDataStatusTypeIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition
  ): RfiDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `RfiData`."""
type RfiDataStatusTypeCcbcUsersByRfiDataRfiDataStatusTypeIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `RfiData`, and the cursor to aid in pagination.
  """
  edges: [RfiDataStatusTypeCcbcUsersByRfiDataRfiDataStatusTypeIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `RfiData`."""
type RfiDataStatusTypeCcbcUsersByRfiDataRfiDataStatusTypeIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition
  ): RfiDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `RfiData`."""
type RfiDataStatusTypeCcbcUsersByRfiDataRfiDataStatusTypeIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `RfiData`, and the cursor to aid in pagination.
  """
  edges: [RfiDataStatusTypeCcbcUsersByRfiDataRfiDataStatusTypeIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `RfiData`."""
type RfiDataStatusTypeCcbcUsersByRfiDataRfiDataStatusTypeIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition
  ): RfiDataConnection!
}

"""Methods to use when ordering `ApplicationRfiData`."""
enum ApplicationRfiDataOrderBy {
  NATURAL
  RFI_DATA_ID_ASC
  RFI_DATA_ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ApplicationRfiData` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ApplicationRfiDataCondition {
  """Checks for equality with the object’s `rfiDataId` field."""
  rfiDataId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int
}

"""
A connection to a list of `Application` values, with data from `ApplicationRfiData`.
"""
type RfiDataApplicationsByApplicationRfiDataRfiDataIdAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationRfiData`, and the cursor to aid in pagination.
  """
  edges: [RfiDataApplicationsByApplicationRfiDataRfiDataIdAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationRfiData`.
"""
type RfiDataApplicationsByApplicationRfiDataRfiDataIdAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application
}

"""A `ApplicationRfiData` edge in the connection."""
type ApplicationRfiDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationRfiData` at the end of the edge."""
  node: ApplicationRfiData
}

"""
A connection to a list of `ApplicationStatusType` values, with data from `ApplicationStatus`.
"""
type ApplicationApplicationStatusTypesByApplicationStatusApplicationIdAndStatusManyToManyConnection {
  """A list of `ApplicationStatusType` objects."""
  nodes: [ApplicationStatusType]!

  """
  A list of edges which contains the `ApplicationStatusType`, info from the `ApplicationStatus`, and the cursor to aid in pagination.
  """
  edges: [ApplicationApplicationStatusTypesByApplicationStatusApplicationIdAndStatusManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationStatusType` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ApplicationStatusType` edge in the connection, with data from `ApplicationStatus`.
"""
type ApplicationApplicationStatusTypesByApplicationStatusApplicationIdAndStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationStatusType` at the end of the edge."""
  node: ApplicationStatusType

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByStatus(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition
  ): ApplicationStatusesConnection!
}

"""Methods to use when ordering `ApplicationStatusType`."""
enum ApplicationStatusTypesOrderBy {
  NATURAL
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ApplicationStatusType` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ApplicationStatusTypeCondition {
  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationStatus`.
"""
type ApplicationCcbcUsersByApplicationStatusApplicationIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationStatus`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationStatusApplicationIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationStatus`.
"""
type ApplicationCcbcUsersByApplicationStatusApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition
  ): ApplicationStatusesConnection!
}

"""
A connection to a list of `ApplicationStatus` values, with data from `Attachment`.
"""
type ApplicationApplicationStatusesByAttachmentApplicationIdAndApplicationStatusIdManyToManyConnection {
  """A list of `ApplicationStatus` objects."""
  nodes: [ApplicationStatus]!

  """
  A list of edges which contains the `ApplicationStatus`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [ApplicationApplicationStatusesByAttachmentApplicationIdAndApplicationStatusIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ApplicationStatus` edge in the connection, with data from `Attachment`.
"""
type ApplicationApplicationStatusesByAttachmentApplicationIdAndApplicationStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationStatus` at the end of the edge."""
  node: ApplicationStatus

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByApplicationStatusId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Attachment`.
"""
type ApplicationCcbcUsersByAttachmentApplicationIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByAttachmentApplicationIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Attachment`."""
type ApplicationCcbcUsersByAttachmentApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Attachment`.
"""
type ApplicationCcbcUsersByAttachmentApplicationIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByAttachmentApplicationIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Attachment`."""
type ApplicationCcbcUsersByAttachmentApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Attachment`.
"""
type ApplicationCcbcUsersByAttachmentApplicationIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByAttachmentApplicationIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Attachment`."""
type ApplicationCcbcUsersByAttachmentApplicationIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!
}

"""
A connection to a list of `FormData` values, with data from `ApplicationFormData`.
"""
type ApplicationFormDataByApplicationFormDataApplicationIdAndFormDataIdManyToManyConnection {
  """A list of `FormData` objects."""
  nodes: [FormData]!

  """
  A list of edges which contains the `FormData`, info from the `ApplicationFormData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationFormDataByApplicationFormDataApplicationIdAndFormDataIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormData` you could get from the connection."""
  totalCount: Int!
}

"""
A `FormData` edge in the connection, with data from `ApplicationFormData`.
"""
type ApplicationFormDataByApplicationFormDataApplicationIdAndFormDataIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormData` at the end of the edge."""
  node: FormData
}

"""
A connection to a list of `Analyst` values, with data from `ApplicationAnalystLead`.
"""
type ApplicationAnalystsByApplicationAnalystLeadApplicationIdAndAnalystIdManyToManyConnection {
  """A list of `Analyst` objects."""
  nodes: [Analyst]!

  """
  A list of edges which contains the `Analyst`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [ApplicationAnalystsByApplicationAnalystLeadApplicationIdAndAnalystIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Analyst` you could get from the connection."""
  totalCount: Int!
}

"""
A `Analyst` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type ApplicationAnalystsByApplicationAnalystLeadApplicationIdAndAnalystIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Analyst` at the end of the edge."""
  node: Analyst

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByAnalystId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition
  ): ApplicationAnalystLeadsConnection!
}

"""Methods to use when ordering `Analyst`."""
enum AnalystsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  GIVEN_NAME_ASC
  GIVEN_NAME_DESC
  FAMILY_NAME_ASC
  FAMILY_NAME_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ACTIVE_ASC
  ACTIVE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Analyst` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AnalystCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `givenName` field."""
  givenName: String

  """Checks for equality with the object’s `familyName` field."""
  familyName: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `active` field."""
  active: Boolean
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnalystLead`.
"""
type ApplicationCcbcUsersByApplicationAnalystLeadApplicationIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationAnalystLeadApplicationIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type ApplicationCcbcUsersByApplicationAnalystLeadApplicationIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnalystLead`.
"""
type ApplicationCcbcUsersByApplicationAnalystLeadApplicationIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationAnalystLeadApplicationIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type ApplicationCcbcUsersByApplicationAnalystLeadApplicationIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnalystLead`.
"""
type ApplicationCcbcUsersByApplicationAnalystLeadApplicationIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [ApplicationCcbcUsersByApplicationAnalystLeadApplicationIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type ApplicationCcbcUsersByApplicationAnalystLeadApplicationIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `RfiData` values, with data from `ApplicationRfiData`.
"""
type ApplicationRfiDataByApplicationRfiDataApplicationIdAndRfiDataIdManyToManyConnection {
  """A list of `RfiData` objects."""
  nodes: [RfiData]!

  """
  A list of edges which contains the `RfiData`, info from the `ApplicationRfiData`, and the cursor to aid in pagination.
  """
  edges: [ApplicationRfiDataByApplicationRfiDataApplicationIdAndRfiDataIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RfiData` you could get from the connection."""
  totalCount: Int!
}

"""
A `RfiData` edge in the connection, with data from `ApplicationRfiData`.
"""
type ApplicationRfiDataByApplicationRfiDataApplicationIdAndRfiDataIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RfiData` at the end of the edge."""
  node: RfiData
}

"""A `Application` edge in the connection."""
type ApplicationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application
}

"""
A connection to a list of `CcbcUser` values, with data from `Application`.
"""
type IntakeCcbcUsersByApplicationIntakeIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Application`, and the cursor to aid in pagination.
  """
  edges: [IntakeCcbcUsersByApplicationIntakeIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Application`."""
type IntakeCcbcUsersByApplicationIntakeIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Application`."""
  applicationsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Application`.
"""
type IntakeCcbcUsersByApplicationIntakeIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Application`, and the cursor to aid in pagination.
  """
  edges: [IntakeCcbcUsersByApplicationIntakeIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Application`."""
type IntakeCcbcUsersByApplicationIntakeIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Application`."""
  applicationsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Application`.
"""
type IntakeCcbcUsersByApplicationIntakeIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Application`, and the cursor to aid in pagination.
  """
  edges: [IntakeCcbcUsersByApplicationIntakeIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Application`."""
type IntakeCcbcUsersByApplicationIntakeIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Application`."""
  applicationsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection!
}

"""A `Intake` edge in the connection."""
type IntakesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Intake` at the end of the edge."""
  node: Intake
}

"""Methods to use when ordering `Intake`."""
enum IntakesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  OPEN_TIMESTAMP_ASC
  OPEN_TIMESTAMP_DESC
  CLOSE_TIMESTAMP_ASC
  CLOSE_TIMESTAMP_DESC
  CCBC_INTAKE_NUMBER_ASC
  CCBC_INTAKE_NUMBER_DESC
  APPLICATION_NUMBER_SEQ_NAME_ASC
  APPLICATION_NUMBER_SEQ_NAME_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Intake` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input IntakeCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `openTimestamp` field."""
  openTimestamp: Datetime

  """Checks for equality with the object’s `closeTimestamp` field."""
  closeTimestamp: Datetime

  """Checks for equality with the object’s `ccbcIntakeNumber` field."""
  ccbcIntakeNumber: Int

  """
  Checks for equality with the object’s `applicationNumberSeqName` field.
  """
  applicationNumberSeqName: String

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime
}

"""
A connection to a list of `CcbcUser` values, with data from `CcbcUser`.
"""
type CcbcUserCcbcUsersByCcbcUserCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CcbcUser`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCcbcUserCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CcbcUser`."""
type CcbcUserCcbcUsersByCcbcUserCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUsersConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CcbcUser`.
"""
type CcbcUserCcbcUsersByCcbcUserCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CcbcUser`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCcbcUserCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CcbcUser`."""
type CcbcUserCcbcUsersByCcbcUserCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUsersConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CcbcUser`.
"""
type CcbcUserCcbcUsersByCcbcUserUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CcbcUser`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCcbcUserUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CcbcUser`."""
type CcbcUserCcbcUsersByCcbcUserUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUsersConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CcbcUser`.
"""
type CcbcUserCcbcUsersByCcbcUserUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CcbcUser`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCcbcUserUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CcbcUser`."""
type CcbcUserCcbcUsersByCcbcUserUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUsersConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CcbcUser`.
"""
type CcbcUserCcbcUsersByCcbcUserArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CcbcUser`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCcbcUserArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CcbcUser`."""
type CcbcUserCcbcUsersByCcbcUserArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUsersConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `CcbcUser`.
"""
type CcbcUserCcbcUsersByCcbcUserArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `CcbcUser`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByCcbcUserArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `CcbcUser`."""
type CcbcUserCcbcUsersByCcbcUserArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `CcbcUser`."""
  ccbcUsersByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CcbcUserCondition
  ): CcbcUsersConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Intake`."""
type CcbcUserCcbcUsersByIntakeCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Intake`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByIntakeCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Intake`."""
type CcbcUserCcbcUsersByIntakeCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Intake`."""
  intakesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition
  ): IntakesConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Intake`."""
type CcbcUserCcbcUsersByIntakeCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Intake`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByIntakeCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Intake`."""
type CcbcUserCcbcUsersByIntakeCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Intake`."""
  intakesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition
  ): IntakesConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Intake`."""
type CcbcUserCcbcUsersByIntakeUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Intake`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByIntakeUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Intake`."""
type CcbcUserCcbcUsersByIntakeUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Intake`."""
  intakesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition
  ): IntakesConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Intake`."""
type CcbcUserCcbcUsersByIntakeUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Intake`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByIntakeUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Intake`."""
type CcbcUserCcbcUsersByIntakeUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Intake`."""
  intakesByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition
  ): IntakesConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Intake`."""
type CcbcUserCcbcUsersByIntakeArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Intake`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByIntakeArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Intake`."""
type CcbcUserCcbcUsersByIntakeArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Intake`."""
  intakesByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition
  ): IntakesConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Intake`."""
type CcbcUserCcbcUsersByIntakeArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Intake`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByIntakeArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Intake`."""
type CcbcUserCcbcUsersByIntakeArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Intake`."""
  intakesByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IntakeCondition
  ): IntakesConnection!
}

"""
A connection to a list of `Intake` values, with data from `Application`.
"""
type CcbcUserIntakesByApplicationCreatedByAndIntakeIdManyToManyConnection {
  """A list of `Intake` objects."""
  nodes: [Intake]!

  """
  A list of edges which contains the `Intake`, info from the `Application`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserIntakesByApplicationCreatedByAndIntakeIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Intake` you could get from the connection."""
  totalCount: Int!
}

"""A `Intake` edge in the connection, with data from `Application`."""
type CcbcUserIntakesByApplicationCreatedByAndIntakeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Intake` at the end of the edge."""
  node: Intake

  """Reads and enables pagination through a set of `Application`."""
  applicationsByIntakeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Application`.
"""
type CcbcUserCcbcUsersByApplicationCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Application`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Application`."""
type CcbcUserCcbcUsersByApplicationCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Application`."""
  applicationsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Application`.
"""
type CcbcUserCcbcUsersByApplicationCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Application`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Application`."""
type CcbcUserCcbcUsersByApplicationCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Application`."""
  applicationsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection!
}

"""
A connection to a list of `Intake` values, with data from `Application`.
"""
type CcbcUserIntakesByApplicationUpdatedByAndIntakeIdManyToManyConnection {
  """A list of `Intake` objects."""
  nodes: [Intake]!

  """
  A list of edges which contains the `Intake`, info from the `Application`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserIntakesByApplicationUpdatedByAndIntakeIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Intake` you could get from the connection."""
  totalCount: Int!
}

"""A `Intake` edge in the connection, with data from `Application`."""
type CcbcUserIntakesByApplicationUpdatedByAndIntakeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Intake` at the end of the edge."""
  node: Intake

  """Reads and enables pagination through a set of `Application`."""
  applicationsByIntakeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Application`.
"""
type CcbcUserCcbcUsersByApplicationUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Application`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Application`."""
type CcbcUserCcbcUsersByApplicationUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Application`."""
  applicationsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Application`.
"""
type CcbcUserCcbcUsersByApplicationUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Application`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Application`."""
type CcbcUserCcbcUsersByApplicationUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Application`."""
  applicationsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection!
}

"""
A connection to a list of `Intake` values, with data from `Application`.
"""
type CcbcUserIntakesByApplicationArchivedByAndIntakeIdManyToManyConnection {
  """A list of `Intake` objects."""
  nodes: [Intake]!

  """
  A list of edges which contains the `Intake`, info from the `Application`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserIntakesByApplicationArchivedByAndIntakeIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Intake` you could get from the connection."""
  totalCount: Int!
}

"""A `Intake` edge in the connection, with data from `Application`."""
type CcbcUserIntakesByApplicationArchivedByAndIntakeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Intake` at the end of the edge."""
  node: Intake

  """Reads and enables pagination through a set of `Application`."""
  applicationsByIntakeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Application`.
"""
type CcbcUserCcbcUsersByApplicationArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Application`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Application`."""
type CcbcUserCcbcUsersByApplicationArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Application`."""
  applicationsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Application`.
"""
type CcbcUserCcbcUsersByApplicationArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Application`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Application`."""
type CcbcUserCcbcUsersByApplicationArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Application`."""
  applicationsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationStatus`.
"""
type CcbcUserApplicationsByApplicationStatusCreatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationStatus`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationStatusCreatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationStatus`.
"""
type CcbcUserApplicationsByApplicationStatusCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition
  ): ApplicationStatusesConnection!
}

"""
A connection to a list of `ApplicationStatusType` values, with data from `ApplicationStatus`.
"""
type CcbcUserApplicationStatusTypesByApplicationStatusCreatedByAndStatusManyToManyConnection {
  """A list of `ApplicationStatusType` objects."""
  nodes: [ApplicationStatusType]!

  """
  A list of edges which contains the `ApplicationStatusType`, info from the `ApplicationStatus`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationStatusTypesByApplicationStatusCreatedByAndStatusManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationStatusType` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ApplicationStatusType` edge in the connection, with data from `ApplicationStatus`.
"""
type CcbcUserApplicationStatusTypesByApplicationStatusCreatedByAndStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationStatusType` at the end of the edge."""
  node: ApplicationStatusType

  """Reads and enables pagination through a set of `ApplicationStatus`."""
  applicationStatusesByStatus(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusCondition
  ): ApplicationStatusesConnection!
}

"""
A connection to a list of `Application` values, with data from `Attachment`.
"""
type CcbcUserApplicationsByAttachmentCreatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByAttachmentCreatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""A `Application` edge in the connection, with data from `Attachment`."""
type CcbcUserApplicationsByAttachmentCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!
}

"""
A connection to a list of `ApplicationStatus` values, with data from `Attachment`.
"""
type CcbcUserApplicationStatusesByAttachmentCreatedByAndApplicationStatusIdManyToManyConnection {
  """A list of `ApplicationStatus` objects."""
  nodes: [ApplicationStatus]!

  """
  A list of edges which contains the `ApplicationStatus`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationStatusesByAttachmentCreatedByAndApplicationStatusIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ApplicationStatus` edge in the connection, with data from `Attachment`.
"""
type CcbcUserApplicationStatusesByAttachmentCreatedByAndApplicationStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationStatus` at the end of the edge."""
  node: ApplicationStatus

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByApplicationStatusId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Attachment`.
"""
type CcbcUserCcbcUsersByAttachmentCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAttachmentCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Attachment`."""
type CcbcUserCcbcUsersByAttachmentCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Attachment`.
"""
type CcbcUserCcbcUsersByAttachmentCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAttachmentCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Attachment`."""
type CcbcUserCcbcUsersByAttachmentCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!
}

"""
A connection to a list of `Application` values, with data from `Attachment`.
"""
type CcbcUserApplicationsByAttachmentUpdatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByAttachmentUpdatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""A `Application` edge in the connection, with data from `Attachment`."""
type CcbcUserApplicationsByAttachmentUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!
}

"""
A connection to a list of `ApplicationStatus` values, with data from `Attachment`.
"""
type CcbcUserApplicationStatusesByAttachmentUpdatedByAndApplicationStatusIdManyToManyConnection {
  """A list of `ApplicationStatus` objects."""
  nodes: [ApplicationStatus]!

  """
  A list of edges which contains the `ApplicationStatus`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationStatusesByAttachmentUpdatedByAndApplicationStatusIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ApplicationStatus` edge in the connection, with data from `Attachment`.
"""
type CcbcUserApplicationStatusesByAttachmentUpdatedByAndApplicationStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationStatus` at the end of the edge."""
  node: ApplicationStatus

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByApplicationStatusId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Attachment`.
"""
type CcbcUserCcbcUsersByAttachmentUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAttachmentUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Attachment`."""
type CcbcUserCcbcUsersByAttachmentUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Attachment`.
"""
type CcbcUserCcbcUsersByAttachmentUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAttachmentUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Attachment`."""
type CcbcUserCcbcUsersByAttachmentUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!
}

"""
A connection to a list of `Application` values, with data from `Attachment`.
"""
type CcbcUserApplicationsByAttachmentArchivedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByAttachmentArchivedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""A `Application` edge in the connection, with data from `Attachment`."""
type CcbcUserApplicationsByAttachmentArchivedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!
}

"""
A connection to a list of `ApplicationStatus` values, with data from `Attachment`.
"""
type CcbcUserApplicationStatusesByAttachmentArchivedByAndApplicationStatusIdManyToManyConnection {
  """A list of `ApplicationStatus` objects."""
  nodes: [ApplicationStatus]!

  """
  A list of edges which contains the `ApplicationStatus`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationStatusesByAttachmentArchivedByAndApplicationStatusIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ApplicationStatus` edge in the connection, with data from `Attachment`.
"""
type CcbcUserApplicationStatusesByAttachmentArchivedByAndApplicationStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationStatus` at the end of the edge."""
  node: ApplicationStatus

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByApplicationStatusId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Attachment`.
"""
type CcbcUserCcbcUsersByAttachmentArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAttachmentArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Attachment`."""
type CcbcUserCcbcUsersByAttachmentArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `Attachment`.
"""
type CcbcUserCcbcUsersByAttachmentArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAttachmentArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Attachment`."""
type CcbcUserCcbcUsersByAttachmentArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!
}

"""
A connection to a list of `FormDataStatusType` values, with data from `FormData`.
"""
type CcbcUserFormDataStatusTypesByFormDataCreatedByAndFormDataStatusTypeIdManyToManyConnection {
  """A list of `FormDataStatusType` objects."""
  nodes: [FormDataStatusType]!

  """
  A list of edges which contains the `FormDataStatusType`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserFormDataStatusTypesByFormDataCreatedByAndFormDataStatusTypeIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FormDataStatusType` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `FormDataStatusType` edge in the connection, with data from `FormData`.
"""
type CcbcUserFormDataStatusTypesByFormDataCreatedByAndFormDataStatusTypeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormDataStatusType` at the end of the edge."""
  node: FormDataStatusType

  """Reads and enables pagination through a set of `FormData`."""
  formDataByFormDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): FormDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `FormData`.
"""
type CcbcUserCcbcUsersByFormDataCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByFormDataCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `FormData`."""
type CcbcUserCcbcUsersByFormDataCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `FormData`."""
  formDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): FormDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `FormData`.
"""
type CcbcUserCcbcUsersByFormDataCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByFormDataCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `FormData`."""
type CcbcUserCcbcUsersByFormDataCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `FormData`."""
  formDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): FormDataConnection!
}

"""A connection to a list of `Form` values, with data from `FormData`."""
type CcbcUserFormsByFormDataCreatedByAndFormSchemaIdManyToManyConnection {
  """A list of `Form` objects."""
  nodes: [Form]!

  """
  A list of edges which contains the `Form`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserFormsByFormDataCreatedByAndFormSchemaIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Form` you could get from the connection."""
  totalCount: Int!
}

"""A `Form` edge in the connection, with data from `FormData`."""
type CcbcUserFormsByFormDataCreatedByAndFormSchemaIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Form` at the end of the edge."""
  node: Form

  """Reads and enables pagination through a set of `FormData`."""
  formDataByFormSchemaId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): FormDataConnection!
}

"""
A connection to a list of `FormDataStatusType` values, with data from `FormData`.
"""
type CcbcUserFormDataStatusTypesByFormDataUpdatedByAndFormDataStatusTypeIdManyToManyConnection {
  """A list of `FormDataStatusType` objects."""
  nodes: [FormDataStatusType]!

  """
  A list of edges which contains the `FormDataStatusType`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserFormDataStatusTypesByFormDataUpdatedByAndFormDataStatusTypeIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FormDataStatusType` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `FormDataStatusType` edge in the connection, with data from `FormData`.
"""
type CcbcUserFormDataStatusTypesByFormDataUpdatedByAndFormDataStatusTypeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormDataStatusType` at the end of the edge."""
  node: FormDataStatusType

  """Reads and enables pagination through a set of `FormData`."""
  formDataByFormDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): FormDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `FormData`.
"""
type CcbcUserCcbcUsersByFormDataUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByFormDataUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `FormData`."""
type CcbcUserCcbcUsersByFormDataUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `FormData`."""
  formDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): FormDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `FormData`.
"""
type CcbcUserCcbcUsersByFormDataUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByFormDataUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `FormData`."""
type CcbcUserCcbcUsersByFormDataUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `FormData`."""
  formDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): FormDataConnection!
}

"""A connection to a list of `Form` values, with data from `FormData`."""
type CcbcUserFormsByFormDataUpdatedByAndFormSchemaIdManyToManyConnection {
  """A list of `Form` objects."""
  nodes: [Form]!

  """
  A list of edges which contains the `Form`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserFormsByFormDataUpdatedByAndFormSchemaIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Form` you could get from the connection."""
  totalCount: Int!
}

"""A `Form` edge in the connection, with data from `FormData`."""
type CcbcUserFormsByFormDataUpdatedByAndFormSchemaIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Form` at the end of the edge."""
  node: Form

  """Reads and enables pagination through a set of `FormData`."""
  formDataByFormSchemaId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): FormDataConnection!
}

"""
A connection to a list of `FormDataStatusType` values, with data from `FormData`.
"""
type CcbcUserFormDataStatusTypesByFormDataArchivedByAndFormDataStatusTypeIdManyToManyConnection {
  """A list of `FormDataStatusType` objects."""
  nodes: [FormDataStatusType]!

  """
  A list of edges which contains the `FormDataStatusType`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserFormDataStatusTypesByFormDataArchivedByAndFormDataStatusTypeIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FormDataStatusType` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `FormDataStatusType` edge in the connection, with data from `FormData`.
"""
type CcbcUserFormDataStatusTypesByFormDataArchivedByAndFormDataStatusTypeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormDataStatusType` at the end of the edge."""
  node: FormDataStatusType

  """Reads and enables pagination through a set of `FormData`."""
  formDataByFormDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): FormDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `FormData`.
"""
type CcbcUserCcbcUsersByFormDataArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByFormDataArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `FormData`."""
type CcbcUserCcbcUsersByFormDataArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `FormData`."""
  formDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): FormDataConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `FormData`.
"""
type CcbcUserCcbcUsersByFormDataArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByFormDataArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `FormData`."""
type CcbcUserCcbcUsersByFormDataArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `FormData`."""
  formDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): FormDataConnection!
}

"""A connection to a list of `Form` values, with data from `FormData`."""
type CcbcUserFormsByFormDataArchivedByAndFormSchemaIdManyToManyConnection {
  """A list of `Form` objects."""
  nodes: [Form]!

  """
  A list of edges which contains the `Form`, info from the `FormData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserFormsByFormDataArchivedByAndFormSchemaIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Form` you could get from the connection."""
  totalCount: Int!
}

"""A `Form` edge in the connection, with data from `FormData`."""
type CcbcUserFormsByFormDataArchivedByAndFormSchemaIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Form` at the end of the edge."""
  node: Form

  """Reads and enables pagination through a set of `FormData`."""
  formDataByFormSchemaId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormDataCondition
  ): FormDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Analyst`."""
type CcbcUserCcbcUsersByAnalystCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Analyst`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAnalystCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Analyst`."""
type CcbcUserCcbcUsersByAnalystCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Analyst`."""
  analystsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition
  ): AnalystsConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Analyst`."""
type CcbcUserCcbcUsersByAnalystCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Analyst`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAnalystCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Analyst`."""
type CcbcUserCcbcUsersByAnalystCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Analyst`."""
  analystsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition
  ): AnalystsConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Analyst`."""
type CcbcUserCcbcUsersByAnalystUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Analyst`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAnalystUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Analyst`."""
type CcbcUserCcbcUsersByAnalystUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Analyst`."""
  analystsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition
  ): AnalystsConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Analyst`."""
type CcbcUserCcbcUsersByAnalystUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Analyst`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAnalystUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Analyst`."""
type CcbcUserCcbcUsersByAnalystUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Analyst`."""
  analystsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition
  ): AnalystsConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Analyst`."""
type CcbcUserCcbcUsersByAnalystArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Analyst`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAnalystArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Analyst`."""
type CcbcUserCcbcUsersByAnalystArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Analyst`."""
  analystsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition
  ): AnalystsConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `Analyst`."""
type CcbcUserCcbcUsersByAnalystArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `Analyst`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByAnalystArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `Analyst`."""
type CcbcUserCcbcUsersByAnalystArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `Analyst`."""
  analystsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AnalystCondition
  ): AnalystsConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationAnalystLead`.
"""
type CcbcUserApplicationsByApplicationAnalystLeadCreatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationAnalystLeadCreatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type CcbcUserApplicationsByApplicationAnalystLeadCreatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `Analyst` values, with data from `ApplicationAnalystLead`.
"""
type CcbcUserAnalystsByApplicationAnalystLeadCreatedByAndAnalystIdManyToManyConnection {
  """A list of `Analyst` objects."""
  nodes: [Analyst]!

  """
  A list of edges which contains the `Analyst`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserAnalystsByApplicationAnalystLeadCreatedByAndAnalystIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Analyst` you could get from the connection."""
  totalCount: Int!
}

"""
A `Analyst` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type CcbcUserAnalystsByApplicationAnalystLeadCreatedByAndAnalystIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Analyst` at the end of the edge."""
  node: Analyst

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByAnalystId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnalystLead`.
"""
type CcbcUserCcbcUsersByApplicationAnalystLeadCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationAnalystLeadCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type CcbcUserCcbcUsersByApplicationAnalystLeadCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnalystLead`.
"""
type CcbcUserCcbcUsersByApplicationAnalystLeadCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationAnalystLeadCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type CcbcUserCcbcUsersByApplicationAnalystLeadCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationAnalystLead`.
"""
type CcbcUserApplicationsByApplicationAnalystLeadUpdatedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationAnalystLeadUpdatedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type CcbcUserApplicationsByApplicationAnalystLeadUpdatedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `Analyst` values, with data from `ApplicationAnalystLead`.
"""
type CcbcUserAnalystsByApplicationAnalystLeadUpdatedByAndAnalystIdManyToManyConnection {
  """A list of `Analyst` objects."""
  nodes: [Analyst]!

  """
  A list of edges which contains the `Analyst`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserAnalystsByApplicationAnalystLeadUpdatedByAndAnalystIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Analyst` you could get from the connection."""
  totalCount: Int!
}

"""
A `Analyst` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type CcbcUserAnalystsByApplicationAnalystLeadUpdatedByAndAnalystIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Analyst` at the end of the edge."""
  node: Analyst

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByAnalystId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnalystLead`.
"""
type CcbcUserCcbcUsersByApplicationAnalystLeadUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationAnalystLeadUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type CcbcUserCcbcUsersByApplicationAnalystLeadUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnalystLead`.
"""
type CcbcUserCcbcUsersByApplicationAnalystLeadUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationAnalystLeadUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type CcbcUserCcbcUsersByApplicationAnalystLeadUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationAnalystLead`.
"""
type CcbcUserApplicationsByApplicationAnalystLeadArchivedByAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserApplicationsByApplicationAnalystLeadArchivedByAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type CcbcUserApplicationsByApplicationAnalystLeadArchivedByAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `Analyst` values, with data from `ApplicationAnalystLead`.
"""
type CcbcUserAnalystsByApplicationAnalystLeadArchivedByAndAnalystIdManyToManyConnection {
  """A list of `Analyst` objects."""
  nodes: [Analyst]!

  """
  A list of edges which contains the `Analyst`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserAnalystsByApplicationAnalystLeadArchivedByAndAnalystIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Analyst` you could get from the connection."""
  totalCount: Int!
}

"""
A `Analyst` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type CcbcUserAnalystsByApplicationAnalystLeadArchivedByAndAnalystIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Analyst` at the end of the edge."""
  node: Analyst

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByAnalystId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnalystLead`.
"""
type CcbcUserCcbcUsersByApplicationAnalystLeadArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationAnalystLeadArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type CcbcUserCcbcUsersByApplicationAnalystLeadArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnalystLead`.
"""
type CcbcUserCcbcUsersByApplicationAnalystLeadArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByApplicationAnalystLeadArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type CcbcUserCcbcUsersByApplicationAnalystLeadArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `RfiDataStatusType` values, with data from `RfiData`.
"""
type CcbcUserRfiDataStatusTypesByRfiDataCreatedByAndRfiDataStatusTypeIdManyToManyConnection {
  """A list of `RfiDataStatusType` objects."""
  nodes: [RfiDataStatusType]!

  """
  A list of edges which contains the `RfiDataStatusType`, info from the `RfiData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserRfiDataStatusTypesByRfiDataCreatedByAndRfiDataStatusTypeIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `RfiDataStatusType` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `RfiDataStatusType` edge in the connection, with data from `RfiData`.
"""
type CcbcUserRfiDataStatusTypesByRfiDataCreatedByAndRfiDataStatusTypeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RfiDataStatusType` at the end of the edge."""
  node: RfiDataStatusType

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByRfiDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition
  ): RfiDataConnection!
}

"""Methods to use when ordering `RfiDataStatusType`."""
enum RfiDataStatusTypesOrderBy {
  NATURAL
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `RfiDataStatusType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RfiDataStatusTypeCondition {
  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""A connection to a list of `CcbcUser` values, with data from `RfiData`."""
type CcbcUserCcbcUsersByRfiDataCreatedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `RfiData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByRfiDataCreatedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `RfiData`."""
type CcbcUserCcbcUsersByRfiDataCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition
  ): RfiDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `RfiData`."""
type CcbcUserCcbcUsersByRfiDataCreatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `RfiData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByRfiDataCreatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `RfiData`."""
type CcbcUserCcbcUsersByRfiDataCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition
  ): RfiDataConnection!
}

"""
A connection to a list of `RfiDataStatusType` values, with data from `RfiData`.
"""
type CcbcUserRfiDataStatusTypesByRfiDataUpdatedByAndRfiDataStatusTypeIdManyToManyConnection {
  """A list of `RfiDataStatusType` objects."""
  nodes: [RfiDataStatusType]!

  """
  A list of edges which contains the `RfiDataStatusType`, info from the `RfiData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserRfiDataStatusTypesByRfiDataUpdatedByAndRfiDataStatusTypeIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `RfiDataStatusType` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `RfiDataStatusType` edge in the connection, with data from `RfiData`.
"""
type CcbcUserRfiDataStatusTypesByRfiDataUpdatedByAndRfiDataStatusTypeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RfiDataStatusType` at the end of the edge."""
  node: RfiDataStatusType

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByRfiDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition
  ): RfiDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `RfiData`."""
type CcbcUserCcbcUsersByRfiDataUpdatedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `RfiData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByRfiDataUpdatedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `RfiData`."""
type CcbcUserCcbcUsersByRfiDataUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition
  ): RfiDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `RfiData`."""
type CcbcUserCcbcUsersByRfiDataUpdatedByAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `RfiData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByRfiDataUpdatedByAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `RfiData`."""
type CcbcUserCcbcUsersByRfiDataUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition
  ): RfiDataConnection!
}

"""
A connection to a list of `RfiDataStatusType` values, with data from `RfiData`.
"""
type CcbcUserRfiDataStatusTypesByRfiDataArchivedByAndRfiDataStatusTypeIdManyToManyConnection {
  """A list of `RfiDataStatusType` objects."""
  nodes: [RfiDataStatusType]!

  """
  A list of edges which contains the `RfiDataStatusType`, info from the `RfiData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserRfiDataStatusTypesByRfiDataArchivedByAndRfiDataStatusTypeIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `RfiDataStatusType` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `RfiDataStatusType` edge in the connection, with data from `RfiData`.
"""
type CcbcUserRfiDataStatusTypesByRfiDataArchivedByAndRfiDataStatusTypeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RfiDataStatusType` at the end of the edge."""
  node: RfiDataStatusType

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByRfiDataStatusTypeId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition
  ): RfiDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `RfiData`."""
type CcbcUserCcbcUsersByRfiDataArchivedByAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `RfiData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByRfiDataArchivedByAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `RfiData`."""
type CcbcUserCcbcUsersByRfiDataArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition
  ): RfiDataConnection!
}

"""A connection to a list of `CcbcUser` values, with data from `RfiData`."""
type CcbcUserCcbcUsersByRfiDataArchivedByAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `RfiData`, and the cursor to aid in pagination.
  """
  edges: [CcbcUserCcbcUsersByRfiDataArchivedByAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CcbcUser` edge in the connection, with data from `RfiData`."""
type CcbcUserCcbcUsersByRfiDataArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """Reads and enables pagination through a set of `RfiData`."""
  rfiDataByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RfiDataCondition
  ): RfiDataConnection!
}

"""
A connection to a list of `Application` values, with data from `ApplicationAnalystLead`.
"""
type AnalystApplicationsByApplicationAnalystLeadAnalystIdAndApplicationIdManyToManyConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [AnalystApplicationsByApplicationAnalystLeadAnalystIdAndApplicationIdManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

"""
A `Application` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type AnalystApplicationsByApplicationAnalystLeadAnalystIdAndApplicationIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnalystLead`.
"""
type AnalystCcbcUsersByApplicationAnalystLeadAnalystIdAndCreatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [AnalystCcbcUsersByApplicationAnalystLeadAnalystIdAndCreatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type AnalystCcbcUsersByApplicationAnalystLeadAnalystIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByCreatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnalystLead`.
"""
type AnalystCcbcUsersByApplicationAnalystLeadAnalystIdAndUpdatedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [AnalystCcbcUsersByApplicationAnalystLeadAnalystIdAndUpdatedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type AnalystCcbcUsersByApplicationAnalystLeadAnalystIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByUpdatedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition
  ): ApplicationAnalystLeadsConnection!
}

"""
A connection to a list of `CcbcUser` values, with data from `ApplicationAnalystLead`.
"""
type AnalystCcbcUsersByApplicationAnalystLeadAnalystIdAndArchivedByManyToManyConnection {
  """A list of `CcbcUser` objects."""
  nodes: [CcbcUser]!

  """
  A list of edges which contains the `CcbcUser`, info from the `ApplicationAnalystLead`, and the cursor to aid in pagination.
  """
  edges: [AnalystCcbcUsersByApplicationAnalystLeadAnalystIdAndArchivedByManyToManyEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CcbcUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CcbcUser` edge in the connection, with data from `ApplicationAnalystLead`.
"""
type AnalystCcbcUsersByApplicationAnalystLeadAnalystIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CcbcUser` at the end of the edge."""
  node: CcbcUser

  """
  Reads and enables pagination through a set of `ApplicationAnalystLead`.
  """
  applicationAnalystLeadsByArchivedBy(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationAnalystLeadCondition
  ): ApplicationAnalystLeadsConnection!
}

"""A `Analyst` edge in the connection."""
type AnalystsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Analyst` at the end of the edge."""
  node: Analyst
}

"""A connection to a list of `ApplicationStatusType` values."""
type ApplicationStatusTypesConnection {
  """A list of `ApplicationStatusType` objects."""
  nodes: [ApplicationStatusType]!

  """
  A list of edges which contains the `ApplicationStatusType` and cursor to aid in pagination.
  """
  edges: [ApplicationStatusTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationStatusType` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ApplicationStatusType` edge in the connection."""
type ApplicationStatusTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationStatusType` at the end of the edge."""
  node: ApplicationStatusType
}

"""A connection to a list of `FormDataStatusType` values."""
type FormDataStatusTypesConnection {
  """A list of `FormDataStatusType` objects."""
  nodes: [FormDataStatusType]!

  """
  A list of edges which contains the `FormDataStatusType` and cursor to aid in pagination.
  """
  edges: [FormDataStatusTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FormDataStatusType` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FormDataStatusType` edge in the connection."""
type FormDataStatusTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormDataStatusType` at the end of the edge."""
  node: FormDataStatusType
}

"""A connection to a list of `FormType` values."""
type FormTypesConnection {
  """A list of `FormType` objects."""
  nodes: [FormType]!

  """
  A list of edges which contains the `FormType` and cursor to aid in pagination.
  """
  edges: [FormTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormType` you could get from the connection."""
  totalCount: Int!
}

"""A `FormType` edge in the connection."""
type FormTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormType` at the end of the edge."""
  node: FormType
}

"""Methods to use when ordering `FormType`."""
enum FormTypesOrderBy {
  NATURAL
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `FormType` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FormTypeCondition {
  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""A connection to a list of `RfiDataStatusType` values."""
type RfiDataStatusTypesConnection {
  """A list of `RfiDataStatusType` objects."""
  nodes: [RfiDataStatusType]!

  """
  A list of edges which contains the `RfiDataStatusType` and cursor to aid in pagination.
  """
  edges: [RfiDataStatusTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `RfiDataStatusType` you could get from the connection.
  """
  totalCount: Int!
}

"""A `RfiDataStatusType` edge in the connection."""
type RfiDataStatusTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RfiDataStatusType` at the end of the edge."""
  node: RfiDataStatusType
}

type KeycloakJwt {
  """
  OPTIONAL - The "jti" (JWT ID) claim provides a unique identifier for the JWT.
     The identifier value MUST be assigned in a manner that ensures that
     there is a negligible probability that the same value will be
     accidentally assigned to a different data object; if the application
     uses multiple issuers, collisions MUST be prevented among values
     produced by different issuers as well.  The "jti" claim can be used
     to prevent the JWT from being replayed.  The "jti" value is a case-
     sensitive string.
  """
  jti: UUID

  """
  REQUIRED - The "exp" (expiration time) claim identifies the expiration time on
     or after which the JWT MUST NOT be accepted for processing.  The
     processing of the "exp" claim requires that the current date/time
     MUST be before the expiration date/time listed in the "exp" claim.
  """
  exp: Int

  """
  OPTIONAL - The "nbf" (not before) claim identifies the time before which the JWT
     MUST NOT be accepted for processing.  The processing of the "nbf"
     claim requires that the current date/time MUST be after or equal to
     the not-before date/time listed in the "nbf" claim.  Implementers MAY
     provide for some small leeway, usually no more than a few minutes, to
     account for clock skew.  Its value MUST be a number containing a
     NumericDate value.
  """
  nbf: Int

  """
  REQUIRED - The "iat" (issued at) claim identifies the time at which the JWT was
     issued.  This claim can be used to determine the age of the JWT.  Its
     value MUST be a number containing a NumericDate value.
  """
  iat: Int

  """
  REQUIRED - The "iss" (issuer) claim identifies the principal that issued the
     JWT.  The processing of this claim is generally application specific.
     The "iss" value is a case-sensitive string containing a StringOrURI
     value.
  """
  iss: String

  """
  REQUIRED - The "aud" (audience) claim identifies the recipients that the JWT is
     intended for.  Each principal intended to process the JWT MUST
     identify itself with a value in the audience claim.  If the principal
     processing the claim does not identify itself with a value in the
     "aud" claim when this claim is present, then the JWT MUST be
     rejected.  In the general case, the "aud" value is an array of case-
     sensitive strings, each containing a StringOrURI value.  In the
     special case when the JWT has one audience, the "aud" value MAY be a
     single case-sensitive string containing a StringOrURI value.  The
     interpretation of audience values is generally application specific.
  """
  aud: String

  """
  REQUIRED - The "sub" (subject) claim identifies the principal that is the
     subject of the JWT.  The claims in a JWT are normally statements
     about the subject.  The subject value MUST either be scoped to be
     locally unique in the context of the issuer or be globally unique.
     The processing of this claim is generally application specific.  The
     "sub" value is a case-sensitive string containing a StringOrURI
     value.
  """
  sub: String

  """
  OPTIONAL - The "typ" (type) Header Parameter defined by [JWS] and [JWE] is used
     by JWT applications to declare the media type [IANA.MediaTypes] of
     this complete JWT.  This is intended for use by the JWT application
     when values that are not JWTs could also be present in an application
     data structure that can contain a JWT object; the application can use
     this value to disambiguate among the different kinds of objects that
     might be present.  It will typically not be used by applications when
     it is already known that the object is a JWT.  This parameter is
     ignored by JWT implementations; any processing of this parameter is
     performed by the JWT application.  If present, it is RECOMMENDED that
     its value be "JWT" to indicate that this object is a JWT.  While
     media type names are not case sensitive, it is RECOMMENDED that "JWT"
     always be spelled using uppercase characters for compatibility with
     legacy implementations.
  """
  typ: String

  """
  OPTIONAL - Authorized party - the party to which the ID Token was issued. If 
    present, it MUST contain the OAuth 2.0 Client ID of this party. This 
    Claim is only needed when the ID Token has a single audience value and 
    that audience is different than the authorized party. It MAY be included 
    even when the authorized party is the same as the sole audience. The azp
    value is a case sensitive string containing a StringOrURI value.
  """
  azp: String

  """
  Time when the End-User authentication occurred. Its value is a JSON number
     representing the number of seconds from 1970-01-01T0:0:0Z as measured 
     in UTC until the date/time. When a max_age request is made or when auth_time 
     is requested as an Essential Claim, then this Claim is REQUIRED; otherwise, 
     its inclusion is OPTIONAL
  """
  authTime: Int

  """
  Session State. JSON string that represents the End-Users login state at the OP. 
    It MUST NOT contain the space (" ") character. This value is opaque to the RP. 
    This is REQUIRED if session management is supported. The Session State value is 
    initially calculated on the server. The same Session State value is also 
    recalculated by the OP iframe in the browser client. The generation of suitable 
    Session State values is specified in Section 4.2, and is based on a salted 
    cryptographic hash of Client ID, origin URL, and OP browser state. For the origin 
    URL, the server can use the origin URL of the Authentication Response, following 
    the algorithm specified in Section 4 of RFC 6454 [RFC6454].
  """
  sessionState: UUID

  """
  OPTIONAL - Authentication Context Class Reference. String specifying an 
    Authentication Context Class Reference value that identifies the Authentication 
    Context Class that the authentication performed satisfied. The value "0" 
    indicates the End-User authentication did not meet the requirements of ISO/IEC 29115 
    [ISO29115] level 1. Authentication using a long-lived browser cookie, for instance, 
    is one example where the use of "level 0" is appropriate. Authentications with 
    level 0 SHOULD NOT be used to authorize access to any resource of any monetary 
    value. (This corresponds to the OpenID 2.0 PAPE [OpenID.PAPE] nist_auth_level 0.) 
    An absolute URI or an RFC 6711 [RFC6711] registered name SHOULD be used as the acr 
    value; registered names MUST NOT be used with a different meaning than that which 
    is registered. Parties using this claim will need to agree upon the meanings of 
    the values used, which may be context-specific. The acr value is a case sensitive 
    string.
  """
  acr: String

  """Whether or not a users email is verified with the login provider."""
  emailVerified: Boolean

  """
  Users full name by combining given_name and family_name set and returned by login provider.
  """
  name: String

  """
  Username as set and returned by provider including provider name separated by @. eg. username@github
  """
  preferredUsername: String

  """First name as set and returned by login provider."""
  givenName: String

  """Last name as set and returned by login provider."""
  familyName: String

  """Email address as set and returned by login provider."""
  email: String

  """
  If created via a broker external login, this is an identifier that can be used to 
    match external broker backchannel logout requests to a UserSession
  """
  brokerSessionId: String
  priorityGroup: String

  """Name of the identity provider."""
  identityProvider: String
  userGroups: [String]

  """Reads a single `CcbcUser` that is related to this `KeycloakJwt`."""
  ccbcUserBySub: CcbcUser
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Analyst`."""
  createAnalyst(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAnalystInput!
  ): CreateAnalystPayload

  """Creates a single `ApplicationAnalystLead`."""
  createApplicationAnalystLead(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationAnalystLeadInput!
  ): CreateApplicationAnalystLeadPayload

  """Creates a single `ApplicationFormData`."""
  createApplicationFormData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationFormDataInput!
  ): CreateApplicationFormDataPayload

  """Creates a single `ApplicationRfiData`."""
  createApplicationRfiData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationRfiDataInput!
  ): CreateApplicationRfiDataPayload

  """Creates a single `ApplicationStatus`."""
  createApplicationStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationStatusInput!
  ): CreateApplicationStatusPayload

  """Creates a single `ApplicationStatusType`."""
  createApplicationStatusType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationStatusTypeInput!
  ): CreateApplicationStatusTypePayload

  """Creates a single `Attachment`."""
  createAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAttachmentInput!
  ): CreateAttachmentPayload

  """Creates a single `CcbcUser`."""
  createCcbcUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCcbcUserInput!
  ): CreateCcbcUserPayload

  """Creates a single `Form`."""
  createForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormInput!
  ): CreateFormPayload

  """Creates a single `FormData`."""
  createFormData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormDataInput!
  ): CreateFormDataPayload

  """Creates a single `FormDataStatusType`."""
  createFormDataStatusType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormDataStatusTypeInput!
  ): CreateFormDataStatusTypePayload

  """Creates a single `FormType`."""
  createFormType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormTypeInput!
  ): CreateFormTypePayload

  """Creates a single `Intake`."""
  createIntake(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateIntakeInput!
  ): CreateIntakePayload

  """Creates a single `RfiData`."""
  createRfiData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRfiDataInput!
  ): CreateRfiDataPayload

  """Creates a single `RfiDataStatusType`."""
  createRfiDataStatusType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRfiDataStatusTypeInput!
  ): CreateRfiDataStatusTypePayload

  """Updates a single `Analyst` using its globally unique id and a patch."""
  updateAnalyst(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAnalystInput!
  ): UpdateAnalystPayload

  """Updates a single `Analyst` using a unique key and a patch."""
  updateAnalystByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAnalystByRowIdInput!
  ): UpdateAnalystPayload

  """
  Updates a single `Application` using its globally unique id and a patch.
  """
  updateApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationInput!
  ): UpdateApplicationPayload

  """Updates a single `Application` using a unique key and a patch."""
  updateApplicationByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationByRowIdInput!
  ): UpdateApplicationPayload

  """
  Updates a single `ApplicationAnalystLead` using its globally unique id and a patch.
  """
  updateApplicationAnalystLead(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationAnalystLeadInput!
  ): UpdateApplicationAnalystLeadPayload

  """
  Updates a single `ApplicationAnalystLead` using a unique key and a patch.
  """
  updateApplicationAnalystLeadByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationAnalystLeadByRowIdInput!
  ): UpdateApplicationAnalystLeadPayload

  """
  Updates a single `ApplicationFormData` using its globally unique id and a patch.
  """
  updateApplicationFormData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationFormDataInput!
  ): UpdateApplicationFormDataPayload

  """Updates a single `ApplicationFormData` using a unique key and a patch."""
  updateApplicationFormDataByFormDataIdAndApplicationId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationFormDataByFormDataIdAndApplicationIdInput!
  ): UpdateApplicationFormDataPayload

  """
  Updates a single `ApplicationRfiData` using its globally unique id and a patch.
  """
  updateApplicationRfiData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationRfiDataInput!
  ): UpdateApplicationRfiDataPayload

  """Updates a single `ApplicationRfiData` using a unique key and a patch."""
  updateApplicationRfiDataByRfiDataIdAndApplicationId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationRfiDataByRfiDataIdAndApplicationIdInput!
  ): UpdateApplicationRfiDataPayload

  """
  Updates a single `ApplicationStatus` using its globally unique id and a patch.
  """
  updateApplicationStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationStatusInput!
  ): UpdateApplicationStatusPayload

  """Updates a single `ApplicationStatus` using a unique key and a patch."""
  updateApplicationStatusByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationStatusByRowIdInput!
  ): UpdateApplicationStatusPayload

  """
  Updates a single `ApplicationStatusType` using its globally unique id and a patch.
  """
  updateApplicationStatusType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationStatusTypeInput!
  ): UpdateApplicationStatusTypePayload

  """
  Updates a single `ApplicationStatusType` using a unique key and a patch.
  """
  updateApplicationStatusTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationStatusTypeByNameInput!
  ): UpdateApplicationStatusTypePayload

  """
  Updates a single `Attachment` using its globally unique id and a patch.
  """
  updateAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAttachmentInput!
  ): UpdateAttachmentPayload

  """Updates a single `Attachment` using a unique key and a patch."""
  updateAttachmentByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAttachmentByRowIdInput!
  ): UpdateAttachmentPayload

  """Updates a single `CcbcUser` using its globally unique id and a patch."""
  updateCcbcUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCcbcUserInput!
  ): UpdateCcbcUserPayload

  """Updates a single `CcbcUser` using a unique key and a patch."""
  updateCcbcUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCcbcUserByRowIdInput!
  ): UpdateCcbcUserPayload

  """Updates a single `Form` using its globally unique id and a patch."""
  updateForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormInput!
  ): UpdateFormPayload

  """Updates a single `Form` using a unique key and a patch."""
  updateFormByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormByRowIdInput!
  ): UpdateFormPayload

  """Updates a single `Form` using a unique key and a patch."""
  updateFormBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormBySlugInput!
  ): UpdateFormPayload

  """Updates a single `FormData` using its globally unique id and a patch."""
  updateFormData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormDataInput!
  ): UpdateFormDataPayload

  """Updates a single `FormData` using a unique key and a patch."""
  updateFormDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormDataByRowIdInput!
  ): UpdateFormDataPayload

  """
  Updates a single `FormDataStatusType` using its globally unique id and a patch.
  """
  updateFormDataStatusType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormDataStatusTypeInput!
  ): UpdateFormDataStatusTypePayload

  """Updates a single `FormDataStatusType` using a unique key and a patch."""
  updateFormDataStatusTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormDataStatusTypeByNameInput!
  ): UpdateFormDataStatusTypePayload

  """Updates a single `FormType` using its globally unique id and a patch."""
  updateFormType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormTypeInput!
  ): UpdateFormTypePayload

  """Updates a single `FormType` using a unique key and a patch."""
  updateFormTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormTypeByNameInput!
  ): UpdateFormTypePayload

  """Updates a single `Intake` using its globally unique id and a patch."""
  updateIntake(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIntakeInput!
  ): UpdateIntakePayload

  """Updates a single `Intake` using a unique key and a patch."""
  updateIntakeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIntakeByRowIdInput!
  ): UpdateIntakePayload

  """Updates a single `Intake` using a unique key and a patch."""
  updateIntakeByCcbcIntakeNumber(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIntakeByCcbcIntakeNumberInput!
  ): UpdateIntakePayload

  """Updates a single `Intake` using a unique key and a patch."""
  updateIntakeByApplicationNumberSeqName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIntakeByApplicationNumberSeqNameInput!
  ): UpdateIntakePayload

  """Updates a single `RfiData` using its globally unique id and a patch."""
  updateRfiData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRfiDataInput!
  ): UpdateRfiDataPayload

  """Updates a single `RfiData` using a unique key and a patch."""
  updateRfiDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRfiDataByRowIdInput!
  ): UpdateRfiDataPayload

  """
  Updates a single `RfiDataStatusType` using its globally unique id and a patch.
  """
  updateRfiDataStatusType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRfiDataStatusTypeInput!
  ): UpdateRfiDataStatusTypePayload

  """Updates a single `RfiDataStatusType` using a unique key and a patch."""
  updateRfiDataStatusTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRfiDataStatusTypeByNameInput!
  ): UpdateRfiDataStatusTypePayload

  """Deletes a single `Analyst` using its globally unique id."""
  deleteAnalyst(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAnalystInput!
  ): DeleteAnalystPayload

  """Deletes a single `Analyst` using a unique key."""
  deleteAnalystByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAnalystByRowIdInput!
  ): DeleteAnalystPayload

  """
  Deletes a single `ApplicationAnalystLead` using its globally unique id.
  """
  deleteApplicationAnalystLead(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationAnalystLeadInput!
  ): DeleteApplicationAnalystLeadPayload

  """Deletes a single `ApplicationAnalystLead` using a unique key."""
  deleteApplicationAnalystLeadByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationAnalystLeadByRowIdInput!
  ): DeleteApplicationAnalystLeadPayload

  """Deletes a single `ApplicationFormData` using its globally unique id."""
  deleteApplicationFormData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationFormDataInput!
  ): DeleteApplicationFormDataPayload

  """Deletes a single `ApplicationFormData` using a unique key."""
  deleteApplicationFormDataByFormDataIdAndApplicationId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationFormDataByFormDataIdAndApplicationIdInput!
  ): DeleteApplicationFormDataPayload

  """Deletes a single `ApplicationRfiData` using its globally unique id."""
  deleteApplicationRfiData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationRfiDataInput!
  ): DeleteApplicationRfiDataPayload

  """Deletes a single `ApplicationRfiData` using a unique key."""
  deleteApplicationRfiDataByRfiDataIdAndApplicationId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationRfiDataByRfiDataIdAndApplicationIdInput!
  ): DeleteApplicationRfiDataPayload

  """Deletes a single `ApplicationStatus` using its globally unique id."""
  deleteApplicationStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationStatusInput!
  ): DeleteApplicationStatusPayload

  """Deletes a single `ApplicationStatus` using a unique key."""
  deleteApplicationStatusByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationStatusByRowIdInput!
  ): DeleteApplicationStatusPayload

  """Deletes a single `ApplicationStatusType` using its globally unique id."""
  deleteApplicationStatusType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationStatusTypeInput!
  ): DeleteApplicationStatusTypePayload

  """Deletes a single `ApplicationStatusType` using a unique key."""
  deleteApplicationStatusTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationStatusTypeByNameInput!
  ): DeleteApplicationStatusTypePayload

  """Deletes a single `Attachment` using its globally unique id."""
  deleteAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAttachmentInput!
  ): DeleteAttachmentPayload

  """Deletes a single `Attachment` using a unique key."""
  deleteAttachmentByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAttachmentByRowIdInput!
  ): DeleteAttachmentPayload

  """Deletes a single `CcbcUser` using its globally unique id."""
  deleteCcbcUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCcbcUserInput!
  ): DeleteCcbcUserPayload

  """Deletes a single `CcbcUser` using a unique key."""
  deleteCcbcUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCcbcUserByRowIdInput!
  ): DeleteCcbcUserPayload

  """Deletes a single `Form` using its globally unique id."""
  deleteForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormInput!
  ): DeleteFormPayload

  """Deletes a single `Form` using a unique key."""
  deleteFormByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormByRowIdInput!
  ): DeleteFormPayload

  """Deletes a single `Form` using a unique key."""
  deleteFormBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormBySlugInput!
  ): DeleteFormPayload

  """Deletes a single `FormData` using its globally unique id."""
  deleteFormData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormDataInput!
  ): DeleteFormDataPayload

  """Deletes a single `FormData` using a unique key."""
  deleteFormDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormDataByRowIdInput!
  ): DeleteFormDataPayload

  """Deletes a single `FormDataStatusType` using its globally unique id."""
  deleteFormDataStatusType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormDataStatusTypeInput!
  ): DeleteFormDataStatusTypePayload

  """Deletes a single `FormDataStatusType` using a unique key."""
  deleteFormDataStatusTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormDataStatusTypeByNameInput!
  ): DeleteFormDataStatusTypePayload

  """Deletes a single `FormType` using its globally unique id."""
  deleteFormType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormTypeInput!
  ): DeleteFormTypePayload

  """Deletes a single `FormType` using a unique key."""
  deleteFormTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormTypeByNameInput!
  ): DeleteFormTypePayload

  """Deletes a single `Intake` using its globally unique id."""
  deleteIntake(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteIntakeInput!
  ): DeleteIntakePayload

  """Deletes a single `Intake` using a unique key."""
  deleteIntakeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteIntakeByRowIdInput!
  ): DeleteIntakePayload

  """Deletes a single `Intake` using a unique key."""
  deleteIntakeByCcbcIntakeNumber(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteIntakeByCcbcIntakeNumberInput!
  ): DeleteIntakePayload

  """Deletes a single `Intake` using a unique key."""
  deleteIntakeByApplicationNumberSeqName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteIntakeByApplicationNumberSeqNameInput!
  ): DeleteIntakePayload

  """Deletes a single `RfiData` using its globally unique id."""
  deleteRfiData(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRfiDataInput!
  ): DeleteRfiDataPayload

  """Deletes a single `RfiData` using a unique key."""
  deleteRfiDataByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRfiDataByRowIdInput!
  ): DeleteRfiDataPayload

  """Deletes a single `RfiDataStatusType` using its globally unique id."""
  deleteRfiDataStatusType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRfiDataStatusTypeInput!
  ): DeleteRfiDataStatusTypePayload

  """Deletes a single `RfiDataStatusType` using a unique key."""
  deleteRfiDataStatusTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRfiDataStatusTypeByNameInput!
  ): DeleteRfiDataStatusTypePayload
  createApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationInput!
  ): CreateApplicationPayload
  createAssessmentForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAssessmentFormInput!
  ): CreateAssessmentFormPayload
  createRfi(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRfiInput!
  ): CreateRfiPayload
  createUserFromSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserFromSessionInput!
  ): CreateUserFromSessionPayload

  """Detects closed intake and marks all submitted applications as Received"""
  receiveApplications(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ReceiveApplicationsInput!
  ): ReceiveApplicationsPayload
  submitApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SubmitApplicationInput!
  ): SubmitApplicationPayload

  """
  Mutation to update the "application" form.
  This mutation should only be used by applicants as it sets the submission page data
  
  """
  updateApplicationForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationFormInput!
  ): UpdateApplicationFormPayload
  updateRfi(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRfiInput!
  ): UpdateRfiPayload

  """Mutation to change the status of an application to withdrawn"""
  withdrawApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: WithdrawApplicationInput!
  ): WithdrawApplicationPayload
}

"""The output of our create `Analyst` mutation."""
type CreateAnalystPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Analyst` that was created by this mutation."""
  analyst: Analyst

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `Analyst`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Analyst`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Analyst`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Analyst`. May be used by Relay 1."""
  analystEdge(
    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AnalystsEdge
}

"""All input for the create `Analyst` mutation."""
input CreateAnalystInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Analyst` to be created by this mutation."""
  analyst: AnalystInput!
}

"""An input for mutations affecting `Analyst`"""
input AnalystInput {
  """Analyst's first name"""
  givenName: String

  """Analyst's last name"""
  familyName: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
  active: Boolean
}

"""The output of our create `ApplicationAnalystLead` mutation."""
type CreateApplicationAnalystLeadPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationAnalystLead` that was created by this mutation."""
  applicationAnalystLead: ApplicationAnalystLead

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationAnalystLead`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `Analyst` that is related to this `ApplicationAnalystLead`.
  """
  analystByAnalystId: Analyst

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnalystLead`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnalystLead`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnalystLead`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationAnalystLead`. May be used by Relay 1."""
  applicationAnalystLeadEdge(
    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationAnalystLeadsEdge
}

"""All input for the create `ApplicationAnalystLead` mutation."""
input CreateApplicationAnalystLeadInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ApplicationAnalystLead` to be created by this mutation."""
  applicationAnalystLead: ApplicationAnalystLeadInput!
}

"""An input for mutations affecting `ApplicationAnalystLead`"""
input ApplicationAnalystLeadInput {
  """ID of the application this analyst lead belongs to"""
  applicationId: Int

  """ID of the analyst this analyst lead belongs to"""
  analystId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `ApplicationFormData` mutation."""
type CreateApplicationFormDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationFormData` that was created by this mutation."""
  applicationFormData: ApplicationFormData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `FormData` that is related to this `ApplicationFormData`.
  """
  formDataByFormDataId: FormData

  """
  Reads a single `Application` that is related to this `ApplicationFormData`.
  """
  applicationByApplicationId: Application

  """An edge for our `ApplicationFormData`. May be used by Relay 1."""
  applicationFormDataEdge(
    """The method to use when ordering `ApplicationFormData`."""
    orderBy: [ApplicationFormDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationFormDataEdge
}

"""All input for the create `ApplicationFormData` mutation."""
input CreateApplicationFormDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ApplicationFormData` to be created by this mutation."""
  applicationFormData: ApplicationFormDataInput!
}

"""An input for mutations affecting `ApplicationFormData`"""
input ApplicationFormDataInput {
  """The foreign key of a form"""
  formDataId: Int!

  """The foreign key of an application"""
  applicationId: Int!
}

"""The output of our create `ApplicationRfiData` mutation."""
type CreateApplicationRfiDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationRfiData` that was created by this mutation."""
  applicationRfiData: ApplicationRfiData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `RfiData` that is related to this `ApplicationRfiData`."""
  rfiDataByRfiDataId: RfiData

  """
  Reads a single `Application` that is related to this `ApplicationRfiData`.
  """
  applicationByApplicationId: Application

  """An edge for our `ApplicationRfiData`. May be used by Relay 1."""
  applicationRfiDataEdge(
    """The method to use when ordering `ApplicationRfiData`."""
    orderBy: [ApplicationRfiDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRfiDataEdge
}

"""All input for the create `ApplicationRfiData` mutation."""
input CreateApplicationRfiDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ApplicationRfiData` to be created by this mutation."""
  applicationRfiData: ApplicationRfiDataInput!
}

"""An input for mutations affecting `ApplicationRfiData`"""
input ApplicationRfiDataInput {
  """The foreign key of a form"""
  rfiDataId: Int!

  """The foreign key of an application"""
  applicationId: Int!
}

"""The output of our create `ApplicationStatus` mutation."""
type CreateApplicationStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationStatus` that was created by this mutation."""
  applicationStatus: ApplicationStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationStatus`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `ApplicationStatusType` that is related to this `ApplicationStatus`.
  """
  applicationStatusTypeByStatus: ApplicationStatusType

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByCreatedBy: CcbcUser

  """An edge for our `ApplicationStatus`. May be used by Relay 1."""
  applicationStatusEdge(
    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusesEdge
}

"""All input for the create `ApplicationStatus` mutation."""
input CreateApplicationStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ApplicationStatus` to be created by this mutation."""
  applicationStatus: ApplicationStatusInput!
}

"""An input for mutations affecting `ApplicationStatus`"""
input ApplicationStatusInput {
  """ID of the application this status belongs to"""
  applicationId: Int
  status: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime
}

"""The output of our create `ApplicationStatusType` mutation."""
type CreateApplicationStatusTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationStatusType` that was created by this mutation."""
  applicationStatusType: ApplicationStatusType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ApplicationStatusType`. May be used by Relay 1."""
  applicationStatusTypeEdge(
    """The method to use when ordering `ApplicationStatusType`."""
    orderBy: [ApplicationStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusTypesEdge
}

"""All input for the create `ApplicationStatusType` mutation."""
input CreateApplicationStatusTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ApplicationStatusType` to be created by this mutation."""
  applicationStatusType: ApplicationStatusTypeInput!
}

"""An input for mutations affecting `ApplicationStatusType`"""
input ApplicationStatusTypeInput {
  """Name of and primary key of the status of an application"""
  name: String!

  """Description of the status type"""
  description: String
}

"""The output of our create `Attachment` mutation."""
type CreateAttachmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Attachment` that was created by this mutation."""
  attachment: Attachment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Application` that is related to this `Attachment`."""
  applicationByApplicationId: Application

  """
  Reads a single `ApplicationStatus` that is related to this `Attachment`.
  """
  applicationStatusByApplicationStatusId: ApplicationStatus

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Attachment`. May be used by Relay 1."""
  attachmentEdge(
    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsEdge
}

"""All input for the create `Attachment` mutation."""
input CreateAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Attachment` to be created by this mutation."""
  attachment: AttachmentInput!
}

"""An input for mutations affecting `Attachment`"""
input AttachmentInput {
  """
  Universally Unique ID for the attachment, created by the fastapi storage micro-service
  """
  file: UUID

  """Description of the attachment"""
  description: String

  """Original uploaded file name"""
  fileName: String

  """Original uploaded file type"""
  fileType: String

  """Original uploaded file size"""
  fileSize: String

  """
  The id of the project (ccbc_public.application.id) that the attachment was uploaded to
  """
  applicationId: Int!

  """
  The id of the application_status (ccbc_public.application_status.id) that the attachment references
  """
  applicationStatusId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `CcbcUser` mutation."""
type CreateCcbcUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CcbcUser` that was created by this mutation."""
  ccbcUser: CcbcUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `CcbcUser`. May be used by Relay 1."""
  ccbcUserEdge(
    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CcbcUsersEdge
}

"""All input for the create `CcbcUser` mutation."""
input CreateCcbcUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CcbcUser` to be created by this mutation."""
  ccbcUser: CcbcUserInput!
}

"""An input for mutations affecting `CcbcUser`"""
input CcbcUserInput {
  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  sessionSub: String

  """User's first name"""
  givenName: String

  """User's last name"""
  familyName: String

  """User's email address"""
  emailAddress: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `Form` mutation."""
type CreateFormPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Form` that was created by this mutation."""
  form: Form

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `FormType` that is related to this `Form`."""
  formTypeByFormType: FormType

  """An edge for our `Form`. May be used by Relay 1."""
  formEdge(
    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsEdge
}

"""All input for the create `Form` mutation."""
input CreateFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Form` to be created by this mutation."""
  form: FormInput!
}

"""An input for mutations affecting `Form`"""
input FormInput {
  """The end url for the form data"""
  slug: String

  """The JSON schema for the respective form"""
  jsonSchema: JSON

  """Description of the form"""
  description: String
  formType: String
}

"""The output of our create `FormData` mutation."""
type CreateFormDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormData` that was created by this mutation."""
  formData: FormData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `FormDataStatusType` that is related to this `FormData`.
  """
  formDataStatusTypeByFormDataStatusTypeId: FormDataStatusType

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads a single `Form` that is related to this `FormData`."""
  formByFormSchemaId: Form

  """An edge for our `FormData`. May be used by Relay 1."""
  formDataEdge(
    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormDataEdge
}

"""All input for the create `FormData` mutation."""
input CreateFormDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FormData` to be created by this mutation."""
  formData: FormDataInput!
}

"""An input for mutations affecting `FormData`"""
input FormDataInput {
  """The data entered into the form by the respondent"""
  jsonData: JSON

  """Column saving the key of the last edited form page"""
  lastEditedPage: String

  """Column referencing the form data status type, defaults to draft"""
  formDataStatusTypeId: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Schema for the respective form_data"""
  formSchemaId: Int
}

"""The output of our create `FormDataStatusType` mutation."""
type CreateFormDataStatusTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormDataStatusType` that was created by this mutation."""
  formDataStatusType: FormDataStatusType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FormDataStatusType`. May be used by Relay 1."""
  formDataStatusTypeEdge(
    """The method to use when ordering `FormDataStatusType`."""
    orderBy: [FormDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormDataStatusTypesEdge
}

"""All input for the create `FormDataStatusType` mutation."""
input CreateFormDataStatusTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FormDataStatusType` to be created by this mutation."""
  formDataStatusType: FormDataStatusTypeInput!
}

"""An input for mutations affecting `FormDataStatusType`"""
input FormDataStatusTypeInput {
  """The name of the status type"""
  name: String!

  """The description of the status type"""
  description: String
}

"""The output of our create `FormType` mutation."""
type CreateFormTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormType` that was created by this mutation."""
  formType: FormType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FormType`. May be used by Relay 1."""
  formTypeEdge(
    """The method to use when ordering `FormType`."""
    orderBy: [FormTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormTypesEdge
}

"""All input for the create `FormType` mutation."""
input CreateFormTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FormType` to be created by this mutation."""
  formType: FormTypeInput!
}

"""An input for mutations affecting `FormType`"""
input FormTypeInput {
  """Primary key and unique identifier of the type of form"""
  name: String!

  """Description of the type of form"""
  description: String
}

"""The output of our create `Intake` mutation."""
type CreateIntakePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Intake` that was created by this mutation."""
  intake: Intake

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Intake`. May be used by Relay 1."""
  intakeEdge(
    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]
  ): IntakesEdge
}

"""All input for the create `Intake` mutation."""
input CreateIntakeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Intake` to be created by this mutation."""
  intake: IntakeInput!
}

"""An input for mutations affecting `Intake`"""
input IntakeInput {
  """Open date and time for an intake number"""
  openTimestamp: Datetime!

  """Close date and time for an intake number"""
  closeTimestamp: Datetime!

  """Unique intake number for a set of CCBC IDs"""
  ccbcIntakeNumber: Int!

  """
  The name of the sequence used to generate CCBC ids. It is added via a trigger
  """
  applicationNumberSeqName: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `RfiData` mutation."""
type CreateRfiDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RfiData` that was created by this mutation."""
  rfiData: RfiData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `RfiDataStatusType` that is related to this `RfiData`."""
  rfiDataStatusTypeByRfiDataStatusTypeId: RfiDataStatusType

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `RfiData`. May be used by Relay 1."""
  rfiDataEdge(
    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): RfiDataEdge
}

"""All input for the create `RfiData` mutation."""
input CreateRfiDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RfiData` to be created by this mutation."""
  rfiData: RfiDataInput!
}

"""An input for mutations affecting `RfiData`"""
input RfiDataInput {
  """Reference number assigned to the RFI"""
  rfiNumber: String

  """The data entered into the form by the respondent"""
  jsonData: JSON

  """Column referencing the form data status type, defaults to draft"""
  rfiDataStatusTypeId: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""The output of our create `RfiDataStatusType` mutation."""
type CreateRfiDataStatusTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RfiDataStatusType` that was created by this mutation."""
  rfiDataStatusType: RfiDataStatusType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `RfiDataStatusType`. May be used by Relay 1."""
  rfiDataStatusTypeEdge(
    """The method to use when ordering `RfiDataStatusType`."""
    orderBy: [RfiDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RfiDataStatusTypesEdge
}

"""All input for the create `RfiDataStatusType` mutation."""
input CreateRfiDataStatusTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RfiDataStatusType` to be created by this mutation."""
  rfiDataStatusType: RfiDataStatusTypeInput!
}

"""An input for mutations affecting `RfiDataStatusType`"""
input RfiDataStatusTypeInput {
  """The name of the status type"""
  name: String!

  """The description of the status type"""
  description: String
}

"""The output of our update `Analyst` mutation."""
type UpdateAnalystPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Analyst` that was updated by this mutation."""
  analyst: Analyst

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `Analyst`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Analyst`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Analyst`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Analyst`. May be used by Relay 1."""
  analystEdge(
    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AnalystsEdge
}

"""All input for the `updateAnalyst` mutation."""
input UpdateAnalystInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Analyst` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Analyst` being updated.
  """
  analystPatch: AnalystPatch!
}

"""
Represents an update to a `Analyst`. Fields that are set will be updated.
"""
input AnalystPatch {
  """Analyst's first name"""
  givenName: String

  """Analyst's last name"""
  familyName: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
  active: Boolean
}

"""All input for the `updateAnalystByRowId` mutation."""
input UpdateAnalystByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Analyst` being updated.
  """
  analystPatch: AnalystPatch!

  """Unique ID for the analyst"""
  rowId: Int!
}

"""The output of our update `Application` mutation."""
type UpdateApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Application` that was updated by this mutation."""
  application: Application

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Intake` that is related to this `Application`."""
  intakeByIntakeId: Intake

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge
}

"""All input for the `updateApplication` mutation."""
input UpdateApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Application` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Application` being updated.
  """
  applicationPatch: ApplicationPatch!
}

"""
Represents an update to a `Application`. Fields that are set will be updated.
"""
input ApplicationPatch {
  """Reference number assigned to the application"""
  ccbcNumber: String

  """The owner of the application, identified by its JWT sub"""
  owner: String

  """The intake associated with the application, set when it is submitted"""
  intakeId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateApplicationByRowId` mutation."""
input UpdateApplicationByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Application` being updated.
  """
  applicationPatch: ApplicationPatch!

  """Primary key ID for the application"""
  rowId: Int!
}

"""The output of our update `ApplicationAnalystLead` mutation."""
type UpdateApplicationAnalystLeadPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationAnalystLead` that was updated by this mutation."""
  applicationAnalystLead: ApplicationAnalystLead

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationAnalystLead`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `Analyst` that is related to this `ApplicationAnalystLead`.
  """
  analystByAnalystId: Analyst

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnalystLead`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnalystLead`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnalystLead`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationAnalystLead`. May be used by Relay 1."""
  applicationAnalystLeadEdge(
    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationAnalystLeadsEdge
}

"""All input for the `updateApplicationAnalystLead` mutation."""
input UpdateApplicationAnalystLeadInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationAnalystLead` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationAnalystLead` being updated.
  """
  applicationAnalystLeadPatch: ApplicationAnalystLeadPatch!
}

"""
Represents an update to a `ApplicationAnalystLead`. Fields that are set will be updated.
"""
input ApplicationAnalystLeadPatch {
  """ID of the application this analyst lead belongs to"""
  applicationId: Int

  """ID of the analyst this analyst lead belongs to"""
  analystId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateApplicationAnalystLeadByRowId` mutation."""
input UpdateApplicationAnalystLeadByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationAnalystLead` being updated.
  """
  applicationAnalystLeadPatch: ApplicationAnalystLeadPatch!

  """Unique ID for the application_analyst_lead"""
  rowId: Int!
}

"""The output of our update `ApplicationFormData` mutation."""
type UpdateApplicationFormDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationFormData` that was updated by this mutation."""
  applicationFormData: ApplicationFormData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `FormData` that is related to this `ApplicationFormData`.
  """
  formDataByFormDataId: FormData

  """
  Reads a single `Application` that is related to this `ApplicationFormData`.
  """
  applicationByApplicationId: Application

  """An edge for our `ApplicationFormData`. May be used by Relay 1."""
  applicationFormDataEdge(
    """The method to use when ordering `ApplicationFormData`."""
    orderBy: [ApplicationFormDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationFormDataEdge
}

"""All input for the `updateApplicationFormData` mutation."""
input UpdateApplicationFormDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationFormData` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationFormData` being updated.
  """
  applicationFormDataPatch: ApplicationFormDataPatch!
}

"""
Represents an update to a `ApplicationFormData`. Fields that are set will be updated.
"""
input ApplicationFormDataPatch {
  """The foreign key of a form"""
  formDataId: Int

  """The foreign key of an application"""
  applicationId: Int
}

"""
All input for the `updateApplicationFormDataByFormDataIdAndApplicationId` mutation.
"""
input UpdateApplicationFormDataByFormDataIdAndApplicationIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationFormData` being updated.
  """
  applicationFormDataPatch: ApplicationFormDataPatch!

  """The foreign key of a form"""
  formDataId: Int!

  """The foreign key of an application"""
  applicationId: Int!
}

"""The output of our update `ApplicationRfiData` mutation."""
type UpdateApplicationRfiDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationRfiData` that was updated by this mutation."""
  applicationRfiData: ApplicationRfiData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `RfiData` that is related to this `ApplicationRfiData`."""
  rfiDataByRfiDataId: RfiData

  """
  Reads a single `Application` that is related to this `ApplicationRfiData`.
  """
  applicationByApplicationId: Application

  """An edge for our `ApplicationRfiData`. May be used by Relay 1."""
  applicationRfiDataEdge(
    """The method to use when ordering `ApplicationRfiData`."""
    orderBy: [ApplicationRfiDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRfiDataEdge
}

"""All input for the `updateApplicationRfiData` mutation."""
input UpdateApplicationRfiDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationRfiData` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationRfiData` being updated.
  """
  applicationRfiDataPatch: ApplicationRfiDataPatch!
}

"""
Represents an update to a `ApplicationRfiData`. Fields that are set will be updated.
"""
input ApplicationRfiDataPatch {
  """The foreign key of a form"""
  rfiDataId: Int

  """The foreign key of an application"""
  applicationId: Int
}

"""
All input for the `updateApplicationRfiDataByRfiDataIdAndApplicationId` mutation.
"""
input UpdateApplicationRfiDataByRfiDataIdAndApplicationIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationRfiData` being updated.
  """
  applicationRfiDataPatch: ApplicationRfiDataPatch!

  """The foreign key of a form"""
  rfiDataId: Int!

  """The foreign key of an application"""
  applicationId: Int!
}

"""The output of our update `ApplicationStatus` mutation."""
type UpdateApplicationStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationStatus` that was updated by this mutation."""
  applicationStatus: ApplicationStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationStatus`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `ApplicationStatusType` that is related to this `ApplicationStatus`.
  """
  applicationStatusTypeByStatus: ApplicationStatusType

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByCreatedBy: CcbcUser

  """An edge for our `ApplicationStatus`. May be used by Relay 1."""
  applicationStatusEdge(
    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusesEdge
}

"""All input for the `updateApplicationStatus` mutation."""
input UpdateApplicationStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationStatus` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationStatus` being updated.
  """
  applicationStatusPatch: ApplicationStatusPatch!
}

"""
Represents an update to a `ApplicationStatus`. Fields that are set will be updated.
"""
input ApplicationStatusPatch {
  """ID of the application this status belongs to"""
  applicationId: Int
  status: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime
}

"""All input for the `updateApplicationStatusByRowId` mutation."""
input UpdateApplicationStatusByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationStatus` being updated.
  """
  applicationStatusPatch: ApplicationStatusPatch!

  """Unique ID for the application_status"""
  rowId: Int!
}

"""The output of our update `ApplicationStatusType` mutation."""
type UpdateApplicationStatusTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationStatusType` that was updated by this mutation."""
  applicationStatusType: ApplicationStatusType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ApplicationStatusType`. May be used by Relay 1."""
  applicationStatusTypeEdge(
    """The method to use when ordering `ApplicationStatusType`."""
    orderBy: [ApplicationStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusTypesEdge
}

"""All input for the `updateApplicationStatusType` mutation."""
input UpdateApplicationStatusTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationStatusType` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ApplicationStatusType` being updated.
  """
  applicationStatusTypePatch: ApplicationStatusTypePatch!
}

"""
Represents an update to a `ApplicationStatusType`. Fields that are set will be updated.
"""
input ApplicationStatusTypePatch {
  """Name of and primary key of the status of an application"""
  name: String

  """Description of the status type"""
  description: String
}

"""All input for the `updateApplicationStatusTypeByName` mutation."""
input UpdateApplicationStatusTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationStatusType` being updated.
  """
  applicationStatusTypePatch: ApplicationStatusTypePatch!

  """Name of and primary key of the status of an application"""
  name: String!
}

"""The output of our update `Attachment` mutation."""
type UpdateAttachmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Attachment` that was updated by this mutation."""
  attachment: Attachment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Application` that is related to this `Attachment`."""
  applicationByApplicationId: Application

  """
  Reads a single `ApplicationStatus` that is related to this `Attachment`.
  """
  applicationStatusByApplicationStatusId: ApplicationStatus

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Attachment`. May be used by Relay 1."""
  attachmentEdge(
    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsEdge
}

"""All input for the `updateAttachment` mutation."""
input UpdateAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Attachment` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Attachment` being updated.
  """
  attachmentPatch: AttachmentPatch!
}

"""
Represents an update to a `Attachment`. Fields that are set will be updated.
"""
input AttachmentPatch {
  """
  Universally Unique ID for the attachment, created by the fastapi storage micro-service
  """
  file: UUID

  """Description of the attachment"""
  description: String

  """Original uploaded file name"""
  fileName: String

  """Original uploaded file type"""
  fileType: String

  """Original uploaded file size"""
  fileSize: String

  """
  The id of the project (ccbc_public.application.id) that the attachment was uploaded to
  """
  applicationId: Int

  """
  The id of the application_status (ccbc_public.application_status.id) that the attachment references
  """
  applicationStatusId: Int

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateAttachmentByRowId` mutation."""
input UpdateAttachmentByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Attachment` being updated.
  """
  attachmentPatch: AttachmentPatch!

  """Unique ID for the attachment"""
  rowId: Int!
}

"""The output of our update `CcbcUser` mutation."""
type UpdateCcbcUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CcbcUser` that was updated by this mutation."""
  ccbcUser: CcbcUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `CcbcUser`. May be used by Relay 1."""
  ccbcUserEdge(
    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CcbcUsersEdge
}

"""All input for the `updateCcbcUser` mutation."""
input UpdateCcbcUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CcbcUser` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `CcbcUser` being updated.
  """
  ccbcUserPatch: CcbcUserPatch!
}

"""
Represents an update to a `CcbcUser`. Fields that are set will be updated.
"""
input CcbcUserPatch {
  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  sessionSub: String

  """User's first name"""
  givenName: String

  """User's last name"""
  familyName: String

  """User's email address"""
  emailAddress: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateCcbcUserByRowId` mutation."""
input UpdateCcbcUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CcbcUser` being updated.
  """
  ccbcUserPatch: CcbcUserPatch!

  """Unique ID for the user"""
  rowId: Int!
}

"""The output of our update `Form` mutation."""
type UpdateFormPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Form` that was updated by this mutation."""
  form: Form

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `FormType` that is related to this `Form`."""
  formTypeByFormType: FormType

  """An edge for our `Form`. May be used by Relay 1."""
  formEdge(
    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsEdge
}

"""All input for the `updateForm` mutation."""
input UpdateFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Form` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Form` being updated.
  """
  formPatch: FormPatch!
}

"""Represents an update to a `Form`. Fields that are set will be updated."""
input FormPatch {
  """The end url for the form data"""
  slug: String

  """The JSON schema for the respective form"""
  jsonSchema: JSON

  """Description of the form"""
  description: String
  formType: String
}

"""All input for the `updateFormByRowId` mutation."""
input UpdateFormByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Form` being updated.
  """
  formPatch: FormPatch!

  """Primary key on form"""
  rowId: Int!
}

"""All input for the `updateFormBySlug` mutation."""
input UpdateFormBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Form` being updated.
  """
  formPatch: FormPatch!

  """The end url for the form data"""
  slug: String!
}

"""The output of our update `FormData` mutation."""
type UpdateFormDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormData` that was updated by this mutation."""
  formData: FormData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `FormDataStatusType` that is related to this `FormData`.
  """
  formDataStatusTypeByFormDataStatusTypeId: FormDataStatusType

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads a single `Form` that is related to this `FormData`."""
  formByFormSchemaId: Form

  """An edge for our `FormData`. May be used by Relay 1."""
  formDataEdge(
    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormDataEdge
}

"""All input for the `updateFormData` mutation."""
input UpdateFormDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormData` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `FormData` being updated.
  """
  formDataPatch: FormDataPatch!
}

"""
Represents an update to a `FormData`. Fields that are set will be updated.
"""
input FormDataPatch {
  """The data entered into the form by the respondent"""
  jsonData: JSON

  """Column saving the key of the last edited form page"""
  lastEditedPage: String

  """Column referencing the form data status type, defaults to draft"""
  formDataStatusTypeId: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime

  """Schema for the respective form_data"""
  formSchemaId: Int
}

"""All input for the `updateFormDataByRowId` mutation."""
input UpdateFormDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormData` being updated.
  """
  formDataPatch: FormDataPatch!

  """The unique id of the form data"""
  rowId: Int!
}

"""The output of our update `FormDataStatusType` mutation."""
type UpdateFormDataStatusTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormDataStatusType` that was updated by this mutation."""
  formDataStatusType: FormDataStatusType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FormDataStatusType`. May be used by Relay 1."""
  formDataStatusTypeEdge(
    """The method to use when ordering `FormDataStatusType`."""
    orderBy: [FormDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormDataStatusTypesEdge
}

"""All input for the `updateFormDataStatusType` mutation."""
input UpdateFormDataStatusTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormDataStatusType` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `FormDataStatusType` being updated.
  """
  formDataStatusTypePatch: FormDataStatusTypePatch!
}

"""
Represents an update to a `FormDataStatusType`. Fields that are set will be updated.
"""
input FormDataStatusTypePatch {
  """The name of the status type"""
  name: String

  """The description of the status type"""
  description: String
}

"""All input for the `updateFormDataStatusTypeByName` mutation."""
input UpdateFormDataStatusTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormDataStatusType` being updated.
  """
  formDataStatusTypePatch: FormDataStatusTypePatch!

  """The name of the status type"""
  name: String!
}

"""The output of our update `FormType` mutation."""
type UpdateFormTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormType` that was updated by this mutation."""
  formType: FormType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FormType`. May be used by Relay 1."""
  formTypeEdge(
    """The method to use when ordering `FormType`."""
    orderBy: [FormTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormTypesEdge
}

"""All input for the `updateFormType` mutation."""
input UpdateFormTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormType` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `FormType` being updated.
  """
  formTypePatch: FormTypePatch!
}

"""
Represents an update to a `FormType`. Fields that are set will be updated.
"""
input FormTypePatch {
  """Primary key and unique identifier of the type of form"""
  name: String

  """Description of the type of form"""
  description: String
}

"""All input for the `updateFormTypeByName` mutation."""
input UpdateFormTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormType` being updated.
  """
  formTypePatch: FormTypePatch!

  """Primary key and unique identifier of the type of form"""
  name: String!
}

"""The output of our update `Intake` mutation."""
type UpdateIntakePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Intake` that was updated by this mutation."""
  intake: Intake

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Intake`. May be used by Relay 1."""
  intakeEdge(
    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]
  ): IntakesEdge
}

"""All input for the `updateIntake` mutation."""
input UpdateIntakeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Intake` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Intake` being updated.
  """
  intakePatch: IntakePatch!
}

"""
Represents an update to a `Intake`. Fields that are set will be updated.
"""
input IntakePatch {
  """Open date and time for an intake number"""
  openTimestamp: Datetime

  """Close date and time for an intake number"""
  closeTimestamp: Datetime

  """Unique intake number for a set of CCBC IDs"""
  ccbcIntakeNumber: Int

  """
  The name of the sequence used to generate CCBC ids. It is added via a trigger
  """
  applicationNumberSeqName: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateIntakeByRowId` mutation."""
input UpdateIntakeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Intake` being updated.
  """
  intakePatch: IntakePatch!

  """Unique ID for each intake number"""
  rowId: Int!
}

"""All input for the `updateIntakeByCcbcIntakeNumber` mutation."""
input UpdateIntakeByCcbcIntakeNumberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Intake` being updated.
  """
  intakePatch: IntakePatch!

  """Unique intake number for a set of CCBC IDs"""
  ccbcIntakeNumber: Int!
}

"""All input for the `updateIntakeByApplicationNumberSeqName` mutation."""
input UpdateIntakeByApplicationNumberSeqNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Intake` being updated.
  """
  intakePatch: IntakePatch!

  """
  The name of the sequence used to generate CCBC ids. It is added via a trigger
  """
  applicationNumberSeqName: String!
}

"""The output of our update `RfiData` mutation."""
type UpdateRfiDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RfiData` that was updated by this mutation."""
  rfiData: RfiData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `RfiDataStatusType` that is related to this `RfiData`."""
  rfiDataStatusTypeByRfiDataStatusTypeId: RfiDataStatusType

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `RfiData`. May be used by Relay 1."""
  rfiDataEdge(
    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): RfiDataEdge
}

"""All input for the `updateRfiData` mutation."""
input UpdateRfiDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RfiData` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `RfiData` being updated.
  """
  rfiDataPatch: RfiDataPatch!
}

"""
Represents an update to a `RfiData`. Fields that are set will be updated.
"""
input RfiDataPatch {
  """Reference number assigned to the RFI"""
  rfiNumber: String

  """The data entered into the form by the respondent"""
  jsonData: JSON

  """Column referencing the form data status type, defaults to draft"""
  rfiDataStatusTypeId: String

  """created by user id"""
  createdBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """archived at timestamp"""
  archivedAt: Datetime
}

"""All input for the `updateRfiDataByRowId` mutation."""
input UpdateRfiDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RfiData` being updated.
  """
  rfiDataPatch: RfiDataPatch!

  """The unique id of the form data"""
  rowId: Int!
}

"""The output of our update `RfiDataStatusType` mutation."""
type UpdateRfiDataStatusTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RfiDataStatusType` that was updated by this mutation."""
  rfiDataStatusType: RfiDataStatusType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `RfiDataStatusType`. May be used by Relay 1."""
  rfiDataStatusTypeEdge(
    """The method to use when ordering `RfiDataStatusType`."""
    orderBy: [RfiDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RfiDataStatusTypesEdge
}

"""All input for the `updateRfiDataStatusType` mutation."""
input UpdateRfiDataStatusTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RfiDataStatusType` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `RfiDataStatusType` being updated.
  """
  rfiDataStatusTypePatch: RfiDataStatusTypePatch!
}

"""
Represents an update to a `RfiDataStatusType`. Fields that are set will be updated.
"""
input RfiDataStatusTypePatch {
  """The name of the status type"""
  name: String

  """The description of the status type"""
  description: String
}

"""All input for the `updateRfiDataStatusTypeByName` mutation."""
input UpdateRfiDataStatusTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RfiDataStatusType` being updated.
  """
  rfiDataStatusTypePatch: RfiDataStatusTypePatch!

  """The name of the status type"""
  name: String!
}

"""The output of our delete `Analyst` mutation."""
type DeleteAnalystPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Analyst` that was deleted by this mutation."""
  analyst: Analyst
  deletedAnalystId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `Analyst`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Analyst`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Analyst`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Analyst`. May be used by Relay 1."""
  analystEdge(
    """The method to use when ordering `Analyst`."""
    orderBy: [AnalystsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AnalystsEdge
}

"""All input for the `deleteAnalyst` mutation."""
input DeleteAnalystInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Analyst` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteAnalystByRowId` mutation."""
input DeleteAnalystByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the analyst"""
  rowId: Int!
}

"""The output of our delete `ApplicationAnalystLead` mutation."""
type DeleteApplicationAnalystLeadPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationAnalystLead` that was deleted by this mutation."""
  applicationAnalystLead: ApplicationAnalystLead
  deletedApplicationAnalystLeadId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationAnalystLead`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `Analyst` that is related to this `ApplicationAnalystLead`.
  """
  analystByAnalystId: Analyst

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnalystLead`.
  """
  ccbcUserByCreatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnalystLead`.
  """
  ccbcUserByUpdatedBy: CcbcUser

  """
  Reads a single `CcbcUser` that is related to this `ApplicationAnalystLead`.
  """
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `ApplicationAnalystLead`. May be used by Relay 1."""
  applicationAnalystLeadEdge(
    """The method to use when ordering `ApplicationAnalystLead`."""
    orderBy: [ApplicationAnalystLeadsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationAnalystLeadsEdge
}

"""All input for the `deleteApplicationAnalystLead` mutation."""
input DeleteApplicationAnalystLeadInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationAnalystLead` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteApplicationAnalystLeadByRowId` mutation."""
input DeleteApplicationAnalystLeadByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the application_analyst_lead"""
  rowId: Int!
}

"""The output of our delete `ApplicationFormData` mutation."""
type DeleteApplicationFormDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationFormData` that was deleted by this mutation."""
  applicationFormData: ApplicationFormData
  deletedApplicationFormDataId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `FormData` that is related to this `ApplicationFormData`.
  """
  formDataByFormDataId: FormData

  """
  Reads a single `Application` that is related to this `ApplicationFormData`.
  """
  applicationByApplicationId: Application

  """An edge for our `ApplicationFormData`. May be used by Relay 1."""
  applicationFormDataEdge(
    """The method to use when ordering `ApplicationFormData`."""
    orderBy: [ApplicationFormDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationFormDataEdge
}

"""All input for the `deleteApplicationFormData` mutation."""
input DeleteApplicationFormDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationFormData` to be deleted.
  """
  id: ID!
}

"""
All input for the `deleteApplicationFormDataByFormDataIdAndApplicationId` mutation.
"""
input DeleteApplicationFormDataByFormDataIdAndApplicationIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The foreign key of a form"""
  formDataId: Int!

  """The foreign key of an application"""
  applicationId: Int!
}

"""The output of our delete `ApplicationRfiData` mutation."""
type DeleteApplicationRfiDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationRfiData` that was deleted by this mutation."""
  applicationRfiData: ApplicationRfiData
  deletedApplicationRfiDataId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `RfiData` that is related to this `ApplicationRfiData`."""
  rfiDataByRfiDataId: RfiData

  """
  Reads a single `Application` that is related to this `ApplicationRfiData`.
  """
  applicationByApplicationId: Application

  """An edge for our `ApplicationRfiData`. May be used by Relay 1."""
  applicationRfiDataEdge(
    """The method to use when ordering `ApplicationRfiData`."""
    orderBy: [ApplicationRfiDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationRfiDataEdge
}

"""All input for the `deleteApplicationRfiData` mutation."""
input DeleteApplicationRfiDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationRfiData` to be deleted.
  """
  id: ID!
}

"""
All input for the `deleteApplicationRfiDataByRfiDataIdAndApplicationId` mutation.
"""
input DeleteApplicationRfiDataByRfiDataIdAndApplicationIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The foreign key of a form"""
  rfiDataId: Int!

  """The foreign key of an application"""
  applicationId: Int!
}

"""The output of our delete `ApplicationStatus` mutation."""
type DeleteApplicationStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationStatus` that was deleted by this mutation."""
  applicationStatus: ApplicationStatus
  deletedApplicationStatusId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationStatus`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `ApplicationStatusType` that is related to this `ApplicationStatus`.
  """
  applicationStatusTypeByStatus: ApplicationStatusType

  """Reads a single `CcbcUser` that is related to this `ApplicationStatus`."""
  ccbcUserByCreatedBy: CcbcUser

  """An edge for our `ApplicationStatus`. May be used by Relay 1."""
  applicationStatusEdge(
    """The method to use when ordering `ApplicationStatus`."""
    orderBy: [ApplicationStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusesEdge
}

"""All input for the `deleteApplicationStatus` mutation."""
input DeleteApplicationStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationStatus` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteApplicationStatusByRowId` mutation."""
input DeleteApplicationStatusByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the application_status"""
  rowId: Int!
}

"""The output of our delete `ApplicationStatusType` mutation."""
type DeleteApplicationStatusTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationStatusType` that was deleted by this mutation."""
  applicationStatusType: ApplicationStatusType
  deletedApplicationStatusTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ApplicationStatusType`. May be used by Relay 1."""
  applicationStatusTypeEdge(
    """The method to use when ordering `ApplicationStatusType`."""
    orderBy: [ApplicationStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusTypesEdge
}

"""All input for the `deleteApplicationStatusType` mutation."""
input DeleteApplicationStatusTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationStatusType` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteApplicationStatusTypeByName` mutation."""
input DeleteApplicationStatusTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Name of and primary key of the status of an application"""
  name: String!
}

"""The output of our delete `Attachment` mutation."""
type DeleteAttachmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Attachment` that was deleted by this mutation."""
  attachment: Attachment
  deletedAttachmentId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Application` that is related to this `Attachment`."""
  applicationByApplicationId: Application

  """
  Reads a single `ApplicationStatus` that is related to this `Attachment`.
  """
  applicationStatusByApplicationStatusId: ApplicationStatus

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Attachment`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Attachment`. May be used by Relay 1."""
  attachmentEdge(
    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsEdge
}

"""All input for the `deleteAttachment` mutation."""
input DeleteAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Attachment` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteAttachmentByRowId` mutation."""
input DeleteAttachmentByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the attachment"""
  rowId: Int!
}

"""The output of our delete `CcbcUser` mutation."""
type DeleteCcbcUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CcbcUser` that was deleted by this mutation."""
  ccbcUser: CcbcUser
  deletedCcbcUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `CcbcUser`. May be used by Relay 1."""
  ccbcUserEdge(
    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CcbcUsersEdge
}

"""All input for the `deleteCcbcUser` mutation."""
input DeleteCcbcUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CcbcUser` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteCcbcUserByRowId` mutation."""
input DeleteCcbcUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the user"""
  rowId: Int!
}

"""The output of our delete `Form` mutation."""
type DeleteFormPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Form` that was deleted by this mutation."""
  form: Form
  deletedFormId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `FormType` that is related to this `Form`."""
  formTypeByFormType: FormType

  """An edge for our `Form`. May be used by Relay 1."""
  formEdge(
    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsEdge
}

"""All input for the `deleteForm` mutation."""
input DeleteFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Form` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteFormByRowId` mutation."""
input DeleteFormByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Primary key on form"""
  rowId: Int!
}

"""All input for the `deleteFormBySlug` mutation."""
input DeleteFormBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The end url for the form data"""
  slug: String!
}

"""The output of our delete `FormData` mutation."""
type DeleteFormDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormData` that was deleted by this mutation."""
  formData: FormData
  deletedFormDataId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `FormDataStatusType` that is related to this `FormData`.
  """
  formDataStatusTypeByFormDataStatusTypeId: FormDataStatusType

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads a single `Form` that is related to this `FormData`."""
  formByFormSchemaId: Form

  """An edge for our `FormData`. May be used by Relay 1."""
  formDataEdge(
    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormDataEdge
}

"""All input for the `deleteFormData` mutation."""
input DeleteFormDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormData` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteFormDataByRowId` mutation."""
input DeleteFormDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The unique id of the form data"""
  rowId: Int!
}

"""The output of our delete `FormDataStatusType` mutation."""
type DeleteFormDataStatusTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormDataStatusType` that was deleted by this mutation."""
  formDataStatusType: FormDataStatusType
  deletedFormDataStatusTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FormDataStatusType`. May be used by Relay 1."""
  formDataStatusTypeEdge(
    """The method to use when ordering `FormDataStatusType`."""
    orderBy: [FormDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormDataStatusTypesEdge
}

"""All input for the `deleteFormDataStatusType` mutation."""
input DeleteFormDataStatusTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormDataStatusType` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteFormDataStatusTypeByName` mutation."""
input DeleteFormDataStatusTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The name of the status type"""
  name: String!
}

"""The output of our delete `FormType` mutation."""
type DeleteFormTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormType` that was deleted by this mutation."""
  formType: FormType
  deletedFormTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `FormType`. May be used by Relay 1."""
  formTypeEdge(
    """The method to use when ordering `FormType`."""
    orderBy: [FormTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormTypesEdge
}

"""All input for the `deleteFormType` mutation."""
input DeleteFormTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormType` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteFormTypeByName` mutation."""
input DeleteFormTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Primary key and unique identifier of the type of form"""
  name: String!
}

"""The output of our delete `Intake` mutation."""
type DeleteIntakePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Intake` that was deleted by this mutation."""
  intake: Intake
  deletedIntakeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Intake`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Intake`. May be used by Relay 1."""
  intakeEdge(
    """The method to use when ordering `Intake`."""
    orderBy: [IntakesOrderBy!] = [PRIMARY_KEY_ASC]
  ): IntakesEdge
}

"""All input for the `deleteIntake` mutation."""
input DeleteIntakeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Intake` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteIntakeByRowId` mutation."""
input DeleteIntakeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for each intake number"""
  rowId: Int!
}

"""All input for the `deleteIntakeByCcbcIntakeNumber` mutation."""
input DeleteIntakeByCcbcIntakeNumberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique intake number for a set of CCBC IDs"""
  ccbcIntakeNumber: Int!
}

"""All input for the `deleteIntakeByApplicationNumberSeqName` mutation."""
input DeleteIntakeByApplicationNumberSeqNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The name of the sequence used to generate CCBC ids. It is added via a trigger
  """
  applicationNumberSeqName: String!
}

"""The output of our delete `RfiData` mutation."""
type DeleteRfiDataPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RfiData` that was deleted by this mutation."""
  rfiData: RfiData
  deletedRfiDataId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `RfiDataStatusType` that is related to this `RfiData`."""
  rfiDataStatusTypeByRfiDataStatusTypeId: RfiDataStatusType

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `RfiData`. May be used by Relay 1."""
  rfiDataEdge(
    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): RfiDataEdge
}

"""All input for the `deleteRfiData` mutation."""
input DeleteRfiDataInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RfiData` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteRfiDataByRowId` mutation."""
input DeleteRfiDataByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The unique id of the form data"""
  rowId: Int!
}

"""The output of our delete `RfiDataStatusType` mutation."""
type DeleteRfiDataStatusTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RfiDataStatusType` that was deleted by this mutation."""
  rfiDataStatusType: RfiDataStatusType
  deletedRfiDataStatusTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `RfiDataStatusType`. May be used by Relay 1."""
  rfiDataStatusTypeEdge(
    """The method to use when ordering `RfiDataStatusType`."""
    orderBy: [RfiDataStatusTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RfiDataStatusTypesEdge
}

"""All input for the `deleteRfiDataStatusType` mutation."""
input DeleteRfiDataStatusTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RfiDataStatusType` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteRfiDataStatusTypeByName` mutation."""
input DeleteRfiDataStatusTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The name of the status type"""
  name: String!
}

"""The output of our `createApplication` mutation."""
type CreateApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  application: Application

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Intake` that is related to this `Application`."""
  intakeByIntakeId: Intake

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge
}

"""All input for the `createApplication` mutation."""
input CreateApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `createAssessmentForm` mutation."""
type CreateAssessmentFormPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formData: FormData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `FormDataStatusType` that is related to this `FormData`.
  """
  formDataStatusTypeByFormDataStatusTypeId: FormDataStatusType

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads a single `Form` that is related to this `FormData`."""
  formByFormSchemaId: Form

  """An edge for our `FormData`. May be used by Relay 1."""
  formDataEdge(
    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormDataEdge
}

"""All input for the `createAssessmentForm` mutation."""
input CreateAssessmentFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  schemaSlug: String!
  _jsonData: JSON!
  _applicationId: Int!
}

"""The output of our `createRfi` mutation."""
type CreateRfiPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  rfiData: RfiData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `RfiDataStatusType` that is related to this `RfiData`."""
  rfiDataStatusTypeByRfiDataStatusTypeId: RfiDataStatusType

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `RfiData`. May be used by Relay 1."""
  rfiDataEdge(
    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): RfiDataEdge
}

"""All input for the `createRfi` mutation."""
input CreateRfiInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  applicationRowId: Int!
  jsonData: JSON!
}

"""The output of our `createUserFromSession` mutation."""
type CreateUserFromSessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  ccbcUser: CcbcUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `CcbcUser`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `CcbcUser`. May be used by Relay 1."""
  ccbcUserEdge(
    """The method to use when ordering `CcbcUser`."""
    orderBy: [CcbcUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CcbcUsersEdge
}

"""All input for the `createUserFromSession` mutation."""
input CreateUserFromSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `receiveApplications` mutation."""
type ReceiveApplicationsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  resultIds: [Int]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `receiveApplications` mutation."""
input ReceiveApplicationsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `submitApplication` mutation."""
type SubmitApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  application: Application

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Intake` that is related to this `Application`."""
  intakeByIntakeId: Intake

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge
}

"""All input for the `submitApplication` mutation."""
input SubmitApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  applicationRowId: Int!
}

"""The output of our `updateApplicationForm` mutation."""
type UpdateApplicationFormPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formData: FormData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `FormDataStatusType` that is related to this `FormData`.
  """
  formDataStatusTypeByFormDataStatusTypeId: FormDataStatusType

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `FormData`."""
  ccbcUserByArchivedBy: CcbcUser

  """Reads a single `Form` that is related to this `FormData`."""
  formByFormSchemaId: Form

  """An edge for our `FormData`. May be used by Relay 1."""
  formDataEdge(
    """The method to use when ordering `FormData`."""
    orderBy: [FormDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormDataEdge
}

"""All input for the `updateApplicationForm` mutation."""
input UpdateApplicationFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  formDataRowId: Int!
  jsonData: JSON!
  lastEditedPage: String!
}

"""The output of our `updateRfi` mutation."""
type UpdateRfiPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  rfiData: RfiData

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `RfiDataStatusType` that is related to this `RfiData`."""
  rfiDataStatusTypeByRfiDataStatusTypeId: RfiDataStatusType

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `RfiData`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `RfiData`. May be used by Relay 1."""
  rfiDataEdge(
    """The method to use when ordering `RfiData`."""
    orderBy: [RfiDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): RfiDataEdge
}

"""All input for the `updateRfi` mutation."""
input UpdateRfiInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rfiRowId: Int!
  jsonData: JSON!
}

"""The output of our `withdrawApplication` mutation."""
type WithdrawApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  application: Application

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Intake` that is related to this `Application`."""
  intakeByIntakeId: Intake

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByCreatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByUpdatedBy: CcbcUser

  """Reads a single `CcbcUser` that is related to this `Application`."""
  ccbcUserByArchivedBy: CcbcUser

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge
}

"""All input for the `withdrawApplication` mutation."""
input WithdrawApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  applicationRowId: Int!
}
