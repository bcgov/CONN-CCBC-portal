# Tests that rely on the committed code, without needing the docker images to be built
name: test code

env:
  PGPASSWORD: postgres
  PGUSER: postgres
  PGDATABASE: ccbc

on:
  workflow_call:

concurrency:
  group: test-code-${{ github.ref }}
  cancel-in-progress: true

jobs:
  install-test-env:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - run: make install_dev_tools
      - run: make stop_pg # cleanly stop the database, otherwise it will complain in the subsequent jobs
      - run: yarn install --frozen-lockfile --check-files
        working-directory: ./app

  trivy-scan-code:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: trivy scan
        uses: ./.github/workflows/trivy.yaml

  codeql-scan:
    name: codeql-scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']
        os: ['linux']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  cocogitto:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Tag the base ref for pull requests
        shell: bash
        working-directory: .
        if: github.event_name == 'pull_request'
        run: git checkout "$GITHUB_BASE_REF" && git tag latest && git checkout "$GITHUB_HEAD_REF"
      - name: Conventional commits check
        uses: oknozor/cocogitto-action@v3
        with:
          check-latest-tag-only: true

  gitleaks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: ./.bin/install-gitleaks-linux-x64.sh
      - run: ./gitleaks detect --exit-code 0 --report-format sarif --report-path "gitleaks.sarif"
      - uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'gitleaks.sarif'

  jest:
    needs: [install-test-env]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - name: run jest tests with coverage
        shell: bash
        working-directory: ./app
        run: yarn test --coverage
      - name: SonarCloud Scan
        uses: ./.github/workflows/sonarcloud.yaml

  eslint:
    needs: [install-test-env]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - run: yarn run eslint -f @microsoft/eslint-formatter-sarif -o results.sarif . || true
        working-directory: ./app
      - name: Remove entries with suppressions from SARIF
        run: |
          node - <<EOF
          const fs = require('fs');

          // Read the SARIF file
          const sarifData = fs.readFileSync('results.sarif', 'utf8');
          const sarifJson = JSON.parse(sarifData);

          // Remove entries with suppressions
          sarifJson.runs.forEach(run => {
            run.results = run.results.filter(result => !result.suppressions || result.suppressions?.length === 0);
          });

          // Write the modified SARIF file
          fs.writeFileSync('results.sarif', JSON.stringify(sarifJson, null, 2));
          EOF
        working-directory: ./app
      - uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: app/results.sarif

  schema:
    needs: [install-test-env]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - name: deploy db migrations
        run: make start_pg && make drop_db && make deploy_db_migrations
      - run: yarn build:schema
        working-directory: ./app
      - name: Check for inconsistency between graphql schema and commit schema
        run: git diff --exit-code || (echo 'The contents of the `schema` folder are out of sync with `app/schema/schema.graphql`. Did you forget to \"yarn build:schema\"?' && false)

  reverts:
    needs: [install-test-env]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - name: deploy db migrations
        run: make start_pg && make drop_db && make deploy_db_migrations
      - name: revert db migrations
        run: make revert_db_migrations
      - name: re-deploy db migrations
        run: make deploy_db_migrations

  pgtap:
    needs: [install-test-env]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - name: Run Database Unit Tests
        run: make db_unit_tests
      - name: Run Database Style Tests
        run: make db_style_tests

  check_immutable_sqitch_files:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: ./.bin/sqitch-check-immutable-files.sh db origin/main

  check_deleted_sqitch_tags:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: |
          node - <<EOF
          const { execSync } = require('child_process');
          let tagError = false
          // Get the diff
          const diff = execSync('git diff origin/main -- ./db/sqitch.plan').toString();

          // Split the diff into lines
          const lines = diff.split('\n');

          // Counters to keep track of lines starting with @
          const counters = {};

          for (const line of lines) {
            // If it's a deletion and starts with @
            if (line.startsWith('-@')) {
              const content = line.slice(1); // remove the leading -
              counters[content] = (counters[content] || 0) - 1;
            }
            // If it's an addition and starts with @
            else if (line.startsWith('+@')) {
              const content = line.slice(1); // remove the leading +
              counters[content] = (counters[content] || 0) + 1;
            }
          }

          // Check if there is any line that was deleted but not added back
          for (const content in counters) {
            if (counters[content] < 0) {
              console.error(`Error: Tag deleted: ${content}`);
              tagError=true
            } else if(counters[content] > 1) {
              console.error(`Error: Tag added multiple times, likely due to merge error: ${content}`)
              tagError=true
            }
          }
          if(tagError){
            process.exit(1);
          }
          EOF

  lint-chart:
    runs-on: ubuntu-latest
    environment:
      name: tools
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Authenticate to OpenShift Linter namespace
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_LINTER_TOKEN }}
          insecure_skip_tls_verify: true
      - run: make lint_chart
