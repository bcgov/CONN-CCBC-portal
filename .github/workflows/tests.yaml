name: Run CCBC tests

env:
  PGPASSWORD: postgres
  PGUSER: postgres
  PGDATABASE: ccbc

on: 
  workflow_call:
    secrets:
      SONAR_TOKEN: 
        required: true


jobs:
  install-test-env:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup

  trivy-scan-app:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Trivy Vulnerability Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ghcr.io/bcgov/conn-ccbc-portal/ccbc-app:sha-${{ github.sha }}
        format: sarif
        output: trivy-results.sarif
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: os,library
        severity: CRITICAL
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  trivy-scan-db:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Trivy Vulnerability Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ghcr.io/bcgov/conn-ccbc-portal/ccbc-db:sha-${{ github.sha }}
        format: sarif
        output: trivy-results.sarif
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: os,library
        severity: CRITICAL
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  jest:
    needs: [install-test-env]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - name: run jest tests with coverage
        shell: bash
        working-directory: ./app
        run: yarn test --coverage
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  schema:
    needs: [install-test-env]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - name: run app locally
        uses: ./.github/actions/local-app-run
      - run: yarn build:schema
        working-directory: ./app
      - name: Check for inconsistency between graphql schema and commit schema
        run: git diff --exit-code || (echo 'The contents of the `schema` folder are out of sync with `app/schema/schema.graphql`. Did you forget to \"yarn build:schema\"?' && false)

  pgtap:
    needs: [install-test-env]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - run: make stop_pg # cleanly stop the database, otherwise it will complain in the subsequent jobs
      - name: run app locally
        uses: ./.github/actions/local-app-run
      - name: Install pg_prove
        run: sudo cpan TAP::Parser::SourceHandler::pgTAP
        env:
          SHELL: /bin/bash
      - name: Install pgtap
        run: |
          git clone https://github.com/theory/pgtap.git
          cd pgtap
          git checkout v1.2.0
          git branch
          make
          make install
          psql -c 'CREATE EXTENSION pgtap;' || true
      - name: Run Database Unit Tests
        run: pg_prove --username ${{ env.PGUSER }} --dbname ${{ env.PGDATABASE }} db/test/unit/**/*_test.sql
      - name: Run Database Style Tests
        run: pg_prove --username ${{ env.PGUSER }} --dbname ${{ env.PGDATABASE }} db/test/style/*_test.sql --set schemas_to_test=ccbc_public,ccbc_private

  zap-owasp-baseline:
    needs: [install-test-env]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - name: run app locally
        uses: ./.github/actions/local-app-run
      - name: ZAP Base Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: "owasp/zap2docker-stable"
          target: "http://localhost:3000/"
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a -d -T 5 -m 2"
          issue_title: OWASP Baseline
          fail_action: true
