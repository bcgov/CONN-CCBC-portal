# Main workflow, orchestrating and triggering other workflows
name: main

on:
  workflow_call: # be sure to use 'secrets: inherit' in the caller
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    uses: ./.github/workflows/build.yaml

  test-code:
    uses: ./.github/workflows/test-code.yaml
    secrets: inherit

  test-containers:
    needs: [build]
    uses: ./.github/workflows/test-containers.yaml
    secrets:
      HAPPO_API_KEY: ${{ secrets.HAPPO_API_KEY }}
      HAPPO_API_SECRET: ${{ secrets.HAPPO_API_SECRET }}
      RENOVATE_GITHUB_TOKEN: ${{ secrets.RENOVATE_GITHUB_TOKEN }}
      RENOVATE_PRIVATE_KEY: ${{ secrets.RENOVATE_PRIVATE_KEY }}

  deploy:
    if: github.event.ref == 'refs/heads/main'
    needs: [test-code, test-containers]
    uses: ./.github/workflows/deploy.yaml
    secrets:
      OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
      OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
      OPENSHIFT_APP_NAMESPACE: ${{ secrets.OPENSHIFT_APP_NAMESPACE }}
      OPENSHIFT_METABASE_NAMESPACE: ${{ secrets.OPENSHIFT_METABASE_NAMESPACE }}
      OPENSHIFT_METABASE_PROD_NAMESPACE: ${{ secrets.OPENSHIFT_METABASE_PROD_NAMESPACE }}
      NEXT_PUBLIC_GROWTHBOOK_API_KEY: ${{ secrets.NEXT_PUBLIC_GROWTHBOOK_API_KEY }}
      CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      OPENSHIFT_SECURE_ROUTE: ${{ secrets.OPENSHIFT_SECURE_ROUTE }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      AWS_S3_REGION: ${{ secrets.AWS_S3_REGION }}
      AWS_S3_KEY: ${{ secrets.AWS_S3_KEY }}
      AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
      AWS_S3_SECRET_KEY: ${{ secrets.AWS_S3_SECRET_KEY }}
      CERTBOT_EMAIL: ${{ secrets.CERTBOT_EMAIL }}
      CERTBOT_SERVER: ${{ secrets.CERTBOT_SERVER }}
      AWS_CLAM_S3_BUCKET: ${{ secrets.AWS_CLAM_S3_BUCKET }}

  create_hotfix_branch:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Git and import GPG key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.RENOVATE_PRIVATE_KEY }}
        run: |
          echo "${GPG_PRIVATE_KEY}" | gpg --import
          git config user.name "CCBC Service Account"
          git config user.email "ccbc@button.is"
          git config user.signingkey "$(gpg --list-secret-keys --with-colons | awk -F: '/sec:/ {print $5}')"
          git config commit.gpgsign true
      - name: Recreate hotfix branch with signed commit
        run: |
          git fetch origin
          git branch -D hotfix || true
          git checkout -b hotfix
          git commit --allow-empty -m "Recreate hotfix branch"
          git push -f origin hotfix
