# Main workflow, orchestrating and triggering other workflows
name: main

on:
  workflow_call: # be sure to use 'secrets: inherit' in the caller
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # build:
  #   uses: ./.github/workflows/build.yaml

  # test-code:
  #   uses: ./.github/workflows/test-code.yaml
  #   secrets: inherit

  # test-containers:
  #   needs: [build]
  #   uses: ./.github/workflows/test-containers.yaml
  #   secrets:
  #     HAPPO_API_KEY: ${{ secrets.HAPPO_API_KEY }}
  #     HAPPO_API_SECRET: ${{ secrets.HAPPO_API_SECRET }}
  #     RENOVATE_GITHUB_TOKEN: ${{ secrets.RENOVATE_GITHUB_TOKEN }}
  #     RENOVATE_PRIVATE_KEY: ${{ secrets.RENOVATE_PRIVATE_KEY }}

  create-release-pr:
    # if: github.event.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.RENOVATE_GITHUB_TOKEN }}
      - name: Set up Git and import GPG key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.RENOVATE_PRIVATE_KEY }}
        run: |
          echo "${GPG_PRIVATE_KEY}" | gpg --import
          git config user.name "CCBC Service Account"
          git config user.email "ccbc@button.is"
          git config user.signingkey "$(gpg --list-secret-keys --with-colons | awk -F: '/sec:/ {print $5}')"
          git config commit.gpgsign true
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - name: Delete Latest Service Account Tag
        run: |
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          COMMIT_HASH=$(git rev-parse $LATEST_TAG)
          TAG_CREATOR=$(git log -1 --pretty=format:'%an' $COMMIT_HASH)
          if [ "$TAG_CREATOR" = "CCBC Service Account" ]; then
              git tag -d $LATEST_TAG
              git push --delete origin $LATEST_TAG
          fi
      - name: Delete and Recreate Branch
        run: |
          git branch -D chore/release || true
          git push origin --delete chore/release || true
          git checkout -b chore/release
      - name: Close Previous PRs
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo
            console.log(owner)
            const prs = await github.rest.pulls.list({ owner, repo, state: 'open', head: 'chore/release' })
            console.log(prs.length)
          # for (const pr of prs.data) {
          #   await github.pulls.update({ owner, repo, pull_number: pr.number, state: 'closed' })
          # }
      - name: Make Release
        run: |
          git checkout chore/release
          git push --set-upstream origin chore/release
          git pull
          echo '--ci' | make release
      - name: Create PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo
            await github.rest.pulls.create({
              owner,
              repo,
              title: 'chore: release',
              head: 'chore/release',
              base: 'main',
            });
  # deploy:
  #   if: github.event.ref == 'refs/heads/main'
  #   needs: [test-code, test-containers]
  #   uses: ./.github/workflows/deploy.yaml
  #   secrets:
  #     OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  #     OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  #     OPENSHIFT_APP_NAMESPACE: ${{ secrets.OPENSHIFT_APP_NAMESPACE }}
  #     OPENSHIFT_METABASE_NAMESPACE: ${{ secrets.OPENSHIFT_METABASE_NAMESPACE }}
  #     OPENSHIFT_METABASE_PROD_NAMESPACE: ${{ secrets.OPENSHIFT_METABASE_PROD_NAMESPACE }}
  #     NEXT_PUBLIC_GROWTHBOOK_API_KEY: ${{ secrets.NEXT_PUBLIC_GROWTHBOOK_API_KEY }}
  #     CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  #     OPENSHIFT_SECURE_ROUTE: ${{ secrets.OPENSHIFT_SECURE_ROUTE }}
  #     AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
  #     AWS_S3_REGION: ${{ secrets.AWS_S3_REGION }}
  #     AWS_S3_KEY: ${{ secrets.AWS_S3_KEY }}
  #     AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
  #     AWS_S3_SECRET_KEY: ${{ secrets.AWS_S3_SECRET_KEY }}
  #     CERTBOT_EMAIL: ${{ secrets.CERTBOT_EMAIL }}
  #     CERTBOT_SERVER: ${{ secrets.CERTBOT_SERVER }}
  #     AWS_CLAM_S3_BUCKET: ${{ secrets.AWS_CLAM_S3_BUCKET }}
