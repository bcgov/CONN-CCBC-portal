name: Create and publish a Docker image to ghrc.io and deploy to openshift

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TAG: sha-${{ github.sha }}
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  HAPPO_API_KEY: ${{ secrets.HAPPO_API_KEY }}
  HAPPO_API_SECRET: ${{ secrets.HAPPO_API_SECRET }}
  NEXT_PUBLIC_GROWTHBOOK_API_KEY: ${{ secrets.NEXT_PUBLIC_GROWTHBOOK_API_KEY  }}
  AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
  AWS_S3_REGION: ${{ secrets.AWS_S3_REGION }}
  AWS_S3_KEY: ${{ secrets.AWS_S3_KEY }}
  AWS_S3_SECRET_KEY: ${{ secrets.AWS_S3_SECRET_KEY }}
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}

jobs:
  trivy-scan-code:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: fs
        format: sarif
        output: trivy-results.sarif
        exit-code: '0'
        ignore-unfixed: true
        severity: CRITICAL
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push-image:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - image: ghcr.io/bcgov/conn-ccbc-portal/ccbc-app
            context: .
            dockerfile: app/Dockerfile
            name: app
          - image: ghcr.io/bcgov/conn-ccbc-portal/ccbc-db
            context: .
            dockerfile: db/Dockerfile
            name: db
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ matrix.image }}
          tags: |
            type=sha,format=long,prefix=sha-
            latest

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.name }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ matrix.context }}
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          file: ${{ matrix.dockerfile }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  tests:
    needs: [build-and-push-image]
    uses: ./.github/workflows/tests.yaml
    secrets: 
      SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}

  end-to-end:
    needs: [tests, build-and-push-image]
    uses: ./.github/workflows/end_to_end.yaml
    secrets:
      HAPPO_API_KEY: ${{ secrets.HAPPO_API_KEY }}
      HAPPO_API_SECRET: ${{ secrets.HAPPO_API_SECRET }}

  deploy-to-openshift-development:
    if: github.event.ref == 'refs/heads/main'
    needs: [end-to-end]
    runs-on: ubuntu-latest
    environment:
      name: development
      url: 'https://ccbc-dev.apps.silver.devops.gov.bc.ca'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Deploy
        uses: ./.github/actions/app
        with:
          openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          openshift_app_namespace: ${{ secrets.OPENSHIFT_APP_NAMESPACE }}
          openshift_metabase_namespace: ${{ secrets.OPENSHIFT_METABASE_NAMESPACE }}
          next_public_growthbook_api_key: ${{ secrets.NEXT_PUBLIC_GROWTHBOOK_API_KEY }}
          tag: ${{ env.TAG }}
          client_secret: ${{ secrets.CLIENT_SECRET }}
          route: ${{ secrets.OPENSHIFT_ROUTE }}
          secure_route: ${{ secrets.OPENSHIFT_SECURE_ROUTE }}
          aws_s3_bucket: ${{ secrets.AWS_S3_BUCKET }}
          aws_s3_region: ${{ secrets.AWS_S3_REGION }}
          aws_s3_key: ${{ secrets.AWS_S3_KEY }}
          aws_s3_secret_key: ${{ secrets.AWS_S3_SECRET_KEY }}
          aws_role_arn: ${{ secrets.AWS_ROLE_ARN }}
          certbot_email: ${{ secrets.CERTBOT_EMAIL }}
          certbot_server: ${{ secrets.CERTBOT_SERVER }}
          environment: dev

  deploy-to-openshift-test:
    needs: [deploy-to-openshift-development]
    runs-on: ubuntu-latest
    environment:
      name: test
      url: 'https://ccbc-test.apps.silver.devops.gov.bc.ca'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Deploy
        uses: ./.github/actions/app
        with:
          openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          openshift_app_namespace: ${{ secrets.OPENSHIFT_APP_NAMESPACE }}
          openshift_metabase_namespace: ${{ secrets.OPENSHIFT_METABASE_NAMESPACE }}
          next_public_growthbook_api_key: ${{ secrets.NEXT_PUBLIC_GROWTHBOOK_API_KEY }}
          tag: ${{ env.TAG }}
          client_secret: ${{ secrets.CLIENT_SECRET }}
          route: ${{ secrets.OPENSHIFT_ROUTE }}
          secure_route: ${{ secrets.OPENSHIFT_SECURE_ROUTE }}
          aws_s3_bucket: ${{ secrets.AWS_S3_BUCKET }}
          aws_s3_region: ${{ secrets.AWS_S3_REGION }}
          aws_s3_key: ${{ secrets.AWS_S3_KEY }}
          aws_s3_secret_key: ${{ secrets.AWS_S3_SECRET_KEY }}
          aws_role_arn: ${{ secrets.AWS_ROLE_ARN }}
          certbot_email: ${{ secrets.CERTBOT_EMAIL }}
          certbot_server: ${{ secrets.CERTBOT_SERVER }}
          environment: test

    # Uncomment this production namespace is ready

  deploy-to-openshift-production:
    needs: [deploy-to-openshift-test]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: 'https://ccbc.apps.silver.devops.gov.bc.ca'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Deploy
        uses: ./.github/actions/app
        with:
          openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          openshift_app_namespace: ${{ secrets.OPENSHIFT_APP_NAMESPACE }}
          openshift_metabase_namespace: ${{ secrets.OPENSHIFT_METABASE_NAMESPACE }}
          next_public_growthbook_api_key: ${{ secrets.NEXT_PUBLIC_GROWTHBOOK_API_KEY }}
          tag: ${{ env.TAG }}
          client_secret: ${{ secrets.CLIENT_SECRET }}
          route: ${{ secrets.OPENSHIFT_ROUTE }}
          secure_route: ${{ secrets.OPENSHIFT_SECURE_ROUTE }}
          aws_s3_bucket: ${{ secrets.AWS_S3_BUCKET }}
          aws_s3_region: ${{ secrets.AWS_S3_REGION }}
          aws_s3_key: ${{ secrets.AWS_S3_KEY }}
          aws_s3_secret_key: ${{ secrets.AWS_S3_SECRET_KEY }}
          aws_role_arn: ${{ secrets.AWS_ROLE_ARN }}
          certbot_email: ${{ secrets.CERTBOT_EMAIL }}
          certbot_server: ${{ secrets.CERTBOT_SERVER }}
          environment: prod
