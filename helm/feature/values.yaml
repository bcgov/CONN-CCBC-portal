fullnameOverride: feature #to be overwritten by deploy script

replicaCount: 1

image:
  app:
    repository: ghcr.io/bcgov/conn-ccbc-portal/ccbc-app
    pullPolicy: IfNotPresent
    tag: 'sha-d53715434b85fd10f07e9976014e2dfa6166b818' # The tag value must be passed in via the deploy script
    clientSecret: '' # clientSecret must be passed in via deploy script
  psql:
    repository: gcr.io/ggl-cas-storage/cas-postgres
    pullPolicy: IfNotPresent
    tag: '0.3.0'
  db:
    repository: ghcr.io/bcgov/conn-ccbc-portal/ccbc-db
    pullPolicy: IfNotPresent
    tag: 'sha-d53715434b85fd10f07e9976014e2dfa6166b818' # The tag value must be passed in via the deploy script

sentry:
  release: '' # The release value must be passed in via the deploy script

app:
  port: '3000'
  probesPort: '9000'
  namespace: ''
  enableAnalytics: true
secureRoute:
  host: '' # The host value must be passed in via the deploy script
  wwwRoute:
    enable: false
growthbook:
  key: '' # The host value must be passed in via the deploy script
resources:
  app:
    requests:
      cpu: 1m
      memory: '256Mi'
    limits:
      cpu: 200m
      memory: '1024Mi'
  psql:
    requests:
      cpu: 10m
      memory: '128Mi'
    limits:
      cpu: 100m
      memory: '256Mi'

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 1
  targetCPUUtilizationPercentage: 110
  # targetMemoryUtilizationPercentage: 80

deployer:
  namespace: '' # The namespace must be passed in via the deploy script
  serviceAccount:
    enabled: true

networkPolicies:
  enabled: true

objectStorage:
  awsS3Bucket: '' # The value must be passed in via the deploy script
  awsS3Region: '' # The value must be passed in via the deploy script
  awsS3Key: '' # The value must be passed in via the deploy script
  awsS3SecretKey: '' # The value must be passed in via the deploy script
  awsRoleArn: '' # The value must be passed in via the deploy script

db:
  name: feature # To be passed in via the deploy script
  appUser: ccbc_app
  readonlyUser: ccbc_readonly
  test:
    password: '' # The value must be passed in via the deploy script

  # A bash script to run in a pre-upgrade hook, in a psql container
  # The script will be run by the postgres user,
  # allowing to clean up any objects created in a previous postMigrationCommand
  preUpgradeCommand: |
    psql -v "ON_ERROR_STOP=1" <<EOF
    drop schema if exists sqitch cascade;
    drop schema if exists mocks cascade;
    drop schema if exists ccbc_public cascade;
    drop schema if exists ccbc_private cascade;
    drop schema if exists audit cascade;
    EOF
    psql -f deploy/create_roles.sql;
    PGPASSWORD=$TEST_PG_PASSWORD
    pg_dump -h ccbc-replicas.ff61fb-test.svc.cluster.local -d ccbc > /tmp/ccbc.sql;
    PGPASSWORD=$PGPASSWORD_DEV
    psql -f /tmp/ccbc.sql;

  # A bash script to run after the migrations are deployed, in a psql container
  # The script will be run by the postgres user, allowing to deploy test data, bypassing RLS
  # sqitch --chdir mocks_schema deploy;
  # for file in data/dev/*.sql; do
  #   psql -v "ON_ERROR_STOP=1" -f "${file}";
  # done;
  postMigrationCommand: ~

loadTest:
  # if true, this will start the app with ENABLE_MOCK_AUTH=true, and deploy the data located in `db/data/perf`
  # These settings enable load testing, which is triggered in a separate helm chart
  enable: false
