nameOverride: ccbc
fullnameOverride: ccbc

replicaCount: 3

deploy:
  enabled: true

image:
  app:
    repository: ghcr.io/bcgov/conn-ccbc-portal/ccbc-app
    pullPolicy: IfNotPresent
    tag: 'sha-d53715434b85fd10f07e9976014e2dfa6166b818' # The tag value must be passed in via the deploy script
    clientSecret: '' # clientSecret must be passed in via deploy script
  psql:
    repository: gcr.io/ggl-cas-storage/cas-postgres
    pullPolicy: IfNotPresent
    tag: '0.3.0'
  db:
    repository: ghcr.io/bcgov/conn-ccbc-portal/ccbc-db
    pullPolicy: IfNotPresent
    tag: 'sha-d53715434b85fd10f07e9976014e2dfa6166b818' # The tag value must be passed in via the deploy script
  cronsp:
    repository: ghcr.io/bcgov/conn-ccbc-portal/ccbc-cron-sp
    pullPolicy: IfNotPresent
    tag: 'sha-65212713aa9902ec41a0ee00df51ded83c971a0d' # The tag value must be passed in via the deploy script
  cronshp:
    repository: ghcr.io/bcgov/conn-ccbc-portal/ccbc-cron-shp
    pullPolicy: IfNotPresent
    tag: 'sha-3373572fcd485773d21e32f3b16d50b44456e368' # The tag value must be passed in via the deploy script

sentry:
  release: '' # The release value must be passed in via the deploy script

cronsp:
  clientSecret: '' # client-secret must be passed in via deploy script
  clientId: '' # client-id must be passed in via deploy script
  path: '/api/sharepoint/cron-cbc-project'
  schedule: '0 12,16 * * 1-5' #trigger noon and 4pm on weekdays
  port: '3000'
  keycloakHost: '' # keycloakHost must be passed in via deploy script

cronshp:
  enabled: true
  schedule: '0 23 * * 1-5' #trigger 11pm on weekdays
  erFile: '' # The value must be passed in via the deploy script
  rdFile: '' # The value must be passed in via the deploy script
  coveragesFile: '' # The value must be passed in via the deploy script

cronmilestone:
  path: '/api/analyst/cron-milestones'
  schedule: '0 7 * * *' # Trigger 7AM every day
  deploy:
    enabled: true # This will deploy the cron job to run the milestones

croncommunity:
  path: '/api/analyst/cron-community'
  schedule: '0 7 * * *' # Trigger 7AM every day
  deploy:
    enabled: true # This will deploy the cron job to run the community report

app:
  port: '3000'
  probesPort: '9000'
  namespace: ''
  enableAnalytics: true
  sessionSecret: '' # sessionSecret must be passed in via deploy script
secureRoute:
  host: '' # The host value must be passed in via the deploy script
  wwwRoute:
    enable: false
growthbook:
  key: '' # The host value must be passed in via the deploy script
resources:
  app:
    requests:
      cpu: 10m
      memory: '512Mi'
  psql:
    requests:
      cpu: 10m
      memory: '128Mi'

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 5
  targetCPUUtilizationPercentage: 400
  # targetMemoryUtilizationPercentage: 80

deployer:
  namespace: '' # The namespace must be passed in via the deploy script
  serviceAccount:
    enabled: true

networkPolicies:
  enabled: true

objectStorage:
  awsS3Bucket: '' # The value must be passed in via the deploy script
  awsS3Region: '' # The value must be passed in via the deploy script
  awsS3Key: '' # The value must be passed in via the deploy script
  awsS3SecretKey: '' # The value must be passed in via the deploy script
  awsRoleArn: '' # The value must be passed in via the deploy script

# Must be passed via the deploy script
cert:
  cert: |
    ''
  key: |
    ''
  ca: |
    ''

sharepoint:
  spSite: ''
  spSaUser: ''
  spSaPassword: ''
  spDocLibrary: ''
  spMsFileName: ''
  spListName: ''

ches:
  url: ''
  client: ''
  clientSecret: ''
  to: ''
  keycloakHost: ''

db:
  name: ccbc
  appUser: ccbc_app
  readonlyUser: ccbc_readonly

  # A bash script to run in a pre-upgrade hook, in a psql container
  # The script will be run by the postgres user,
  # allowing to clean up any objects created in a previous postMigrationCommand
  preUpgradeCommand: ~

  # A bash script to run after the migrations are deployed, in a psql container
  # The script will be run by the postgres user, allowing to deploy test data, bypassing RLS
  postMigrationCommand: ~

metabase:
  embedSecret: '' # The value must be passed in via the deploy script
  siteUrl: '' # The value must be passed in via the deploy script
  instanceName: ccbc-metabase
  namespace: '' # The value must be passed in via the deploy script
  prodNamespace: '' # The value must be passed in via the deploy script
  prodIngress:
    enable: false

loadTest:
  # if true, this will start the app with ENABLE_MOCK_AUTH=true, and deploy the data located in `db/data/perf`
  # These settings enable load testing, which is triggered in a separate helm chart
  enable: false

crunchy-postgres:
  nameOverride: ccbc
  fullnameOverride: ccbc
  # crunchyImage: artifacts.developer.gov.bc.ca/bcgov-docker-local/crunchy-postgres:ubi8-14.7-0
  postgresVersion: 17
  postGISVersion: 3.4
  instances:
    name: hippo-ha # high availability
    replicas: 3
    dataVolumeClaimSpec:
      storage: 2Gi
      storageClassName: netapp-block-standard
    requests:
      cpu: 300m
      memory: 512Mi
    replicaCertCopy:
      requests:
        cpu: 1m
        memory: 32Mi
  pgBackRest:
    retention: '30' # Ideally a larger number such as 30 backups/days
    # If retention-full-type set to 'count' then the oldest backups will expire when the number of backups reach the number defined in retention
    # If retention-full-type set to 'time' then the number defined in retention will take that many days worth of full backups before expiration
    retentionFullType: count
    repos:
      schedules:
        full: 0 8 * * *
        incremental: 0 0,4,12,16,20 * * *
      volume:
        accessModes: 'ReadWriteOnce'
        storage: 10Gi
        storageClassName: netapp-file-backup
    repoHost:
      requests:
        cpu: 2m
        memory: 64Mi
    sidecars:
      requests:
        cpu: 1m
        memory: 64Mi
    s3:
      enabled: true
      createS3Secret: false
      # secret name below must match secret created through s3-backup chart
      s3Secret: s3-pgbackrest
      s3Path: /
      s3UriStyle: path
      bucket: ''
      endpoint: s3.ca-central-1.amazonaws.com
      region: ca-central-1
      key: ''
      keySecret: ''
  patroni:
    postgresql:
      pg_hba: 'host all all 0.0.0.0/0 md5'
      parameters:
        shared_buffers: 16MB # default is 128MB; a good tuned default for shared_buffers is 25% of the memory allocated to the pod
        wal_buffers: '64kB' # this can be set to -1 to automatically set as 1/32 of shared_buffers or 64kB, whichever is larger
        min_wal_size: 32MB
        max_wal_size: 64MB # default is 1GB
        max_slot_wal_keep_size: 128MB # default is -1, allowing unlimited wal growth when replicas fall behind
  proxy:
    pgBouncer:
      replicas: 2
      requests:
        cpu: 2m
        memory: 8Mi
  pgmonitor:
    enabled: true
    exporter:
      requests:
        cpu: 1m
        memory: 64Mi
