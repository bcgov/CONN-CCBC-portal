apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "ccbc.fullname" . }}
  labels:
{{ include "ccbc.labels" . | indent 4}}
spec:
  selector:
    matchLabels:
      app: {{ template "ccbc.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: {{ template "ccbc.fullname" . }}
    spec:
      initContainers:
        - env:
          - name: PGDATABASE
            value: ccbc
          - name: PGUSER
            value: postgres
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: ccbc-pguser-postgres
          - name: PGUSER_OWNER
            valueFrom:
              secretKeyRef:
                key: database-owner-user
                name: {{ template "ccbc.fullname" . }}
          - name: PGPASSWORD_OWNER
            valueFrom:
              secretKeyRef:
                key: database-owner-password
                name: {{ template "ccbc.fullname" . }}
          - name: DATABASE_NAME
            valueFrom:
              secretKeyRef:
                key: database-name
                name: {{ template "ccbc.fullname" . }}
          - name: PGUSER_APP
            valueFrom:
              secretKeyRef:
                key: database-app-user
                name: {{ template "ccbc.fullname" . }}
          - name: PGPASSWORD_APP
            valueFrom:
              secretKeyRef:
                key: database-app-password
                name: {{ template "ccbc.fullname" . }}
          - name: PGUSER_READONLY
            valueFrom:
              secretKeyRef:
                key: database-readonly-user
                name: {{ template "ccbc.fullname" . }}
          - name: PGPASSWORD_READONLY
            valueFrom:
              secretKeyRef:
                key: database-readonly-password
                name: {{ template "ccbc.fullname" . }}
          - name: PGPORT
            value: "5432"
          - name: PGHOST
            value: ccbc-primary.ff61fb-dev.svc
          name: {{ template "ccbc.fullname" . }}-provision-pg-credentials
          image: {{ .Values.image.psql.repository }}:{{ .Values.image.psql.tag }}
          resources:
            limits:
              cpu: {{ .Values.resources.psql.limits.cpu }}
              memory: {{ .Values.resources.psql.limits.memory }}
            requests:
              cpu: {{ .Values.resources.psql.requests.cpu }}
              memory: {{ .Values.resources.psql.requests.memory }}
          command:
            - /usr/bin/env
            - bash
            - -c
            - |
              set -euox pipefail;
              create-user-db -d $(DATABASE_NAME) -u $(PGUSER_APP) -p $(PGPASSWORD_APP);
              create-user-db -d $(DATABASE_NAME) -u $(PGUSER_READONLY) -p $(PGPASSWORD_READONLY);
              psql -d $(DATABASE_NAME) <<EOF
                grant pg_read_all_data to $(PGUSER_READONLY);
                alter role $(PGUSER_READONLY) BYPASSRLS;
              EOF
        - env:
          - name: SQITCH_TARGET
            value: "db:pg:"
          - name: PGUSER
            value: {{ template "ccbc.fullname" . }}
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: ccbc-pguser-ccbc
          - name: PGDATABASE
            value: {{ template "ccbc.fullname" . }}
          - name: PGPORT
            value: "5432"
          - name: PGHOST
            value: ccbc-primary.ff61fb-dev.svc
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          name: {{ template "ccbc.fullname" . }}-wait-for-migrations
          image: {{ .Values.image.db.repository }}:{{ .Values.image.db.tag }}
          imagePullPolicy: {{ .Values.image.db.pullPolicy }}
          resources:
            limits:
              cpu: {{ .Values.resources.psql.limits.cpu }}
              memory: {{ .Values.resources.psql.limits.memory }}
            requests:
              cpu: {{ .Values.resources.psql.requests.cpu }}
              memory: {{ .Values.resources.psql.requests.memory }}
          command:
            - /usr/bin/env
            - bash
            - -c
            - |
              set -euox pipefail;
              sqitch deploy;
      containers:
        - name: {{ template "ccbc.fullname" . }}
          image: {{ .Values.image.app.repository }}:{{ .Values.image.app.tag }}
          imagePullPolicy: {{ .Values.image.app.pullPolicy }}
          env:
          - name: PGUSER
            value: {{ template "ccbc.fullname" . }}_app
          - name: PGDATABASE
            value: {{ template "ccbc.fullname" . }}
          - name: PGHOST
            value: ccbc-primary.ff61fb-dev.svc
          - name: SESSION_SECRET
            valueFrom:
              secretKeyRef:
                key: session-secret
                name: {{ template "ccbc.fullname" . }}
          - name: HOST
            value: {{ .Values.route.host }}
          - name: NAMESPACE
            value: {{ .Values.app.namespace }}
          - name: ENABLE_ANALYTICS
            value: {{ .Values.app.enableAnalytics | quote }}
          resources:
            requests:
              memory: {{ .Values.resources.app.requests.memory }}
              cpu: {{ .Values.resources.app.requests.cpu }}
            limits:
              memory: {{ .Values.resources.app.limits.memory }}
              cpu: {{ .Values.resources.app.limits.cpu }}
          ports:
            - containerPort: {{ .Values.app.port }}
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: {{ .Values.app.probesPort }}
            # we want the readiness threshold to fail fast,
            # to prevent any request from going to a pod that is not ready
            failureThreshold: 1
            successThreshold: 1
            periodSeconds: 5
            timeoutSeconds: 5
            initialDelaySeconds: 5
          livenessProbe:
          # the liveness probe is here to ensure that a pod does not get
          # stuck in a shutdown state. It needs to allow enough time for
          # the registered shutdown handler to run to completion.
            httpGet:
              path: /live
              port: {{ .Values.app.probesPort }}
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 3
            successThreshold: 1
            timeoutSeconds: 5
